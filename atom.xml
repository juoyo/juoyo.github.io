<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yao - Home</title>
  
  <subtitle>久久为功，要为祖国健康工作50年哦</subtitle>
  <link href="https://juoyo.github.io/atom.xml" rel="self"/>
  
  <link href="https://juoyo.github.io/"/>
  <updated>2021-10-05T03:07:18.484Z</updated>
  <id>https://juoyo.github.io/</id>
  
  <author>
    <name>Yao Zhu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>juoyoXC</title>
    <link href="https://juoyo.github.io/posts/3a2c1446.html"/>
    <id>https://juoyo.github.io/posts/3a2c1446.html</id>
    <published>2021-10-05T03:04:36.000Z</published>
    <updated>2021-10-05T03:07:18.484Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="29f42ad829df0634db21089d2baa1dabe818d2e705382f6e533a6948f96e057d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="juoyoGK" scheme="https://juoyo.github.io/categories/juoyoGK/"/>
    
    
    <category term="juoyoXC" scheme="https://juoyo.github.io/tags/juoyoXC/"/>
    
  </entry>
  
  <entry>
    <title>GitBook使用指导</title>
    <link href="https://juoyo.github.io/posts/f81dea0b.html"/>
    <id>https://juoyo.github.io/posts/f81dea0b.html</id>
    <published>2021-06-26T15:19:41.000Z</published>
    <updated>2021-06-26T17:50:38.771Z</updated>
    
    <content type="html"><![CDATA[<p>GitBook使用指导</p><a id="more"></a><p>1.创建文件夹，如dirname</p><p>2.命令行运行gitbook init</p><p>3.修改书籍内容</p><p>4.gitbook serve 预览书籍</p><p>5.gitbook build 生成静态文件</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;GitBook使用指导&lt;/p&gt;</summary>
    
    
    
    
    <category term="gitbook" scheme="https://juoyo.github.io/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核演进</title>
    <link href="https://juoyo.github.io/posts/ff311587.html"/>
    <id>https://juoyo.github.io/posts/ff311587.html</id>
    <published>2021-06-03T07:38:00.000Z</published>
    <updated>2021-06-03T07:39:51.836Z</updated>
    
    <content type="html"><![CDATA[<p>Linux内核相关演进历史。</p><a id="more"></a><p><strong>一．Linux 内核简介</strong></p><p>  Linux 是最受欢迎的自由电脑操作系统内核。它是一个用C 语言写成，符合POSIX标准的类Unix 操作系统。Linux 最早是由芬兰黑客Linus Torvalds 为尝试在英特尔x86架构上提供自由免费的类Unix 操作系统而开发的。该计划开始于1991年，这里有一份Linus Torvalds 当时在Usenet 新闻组comp.os.minix 所登载的贴子，这份著名的贴子标志着Linux 计划的正式开始。</p><p>  在计划的早期有一些Minix 黑客提供了协助，而今天全球无数程序员正在为该计</p><p>划无偿提供帮助。</p><p>  技术上说Linux 是一个内核。“内核”指的是一个提供硬件抽象层、磁盘及文件系统控制、多任务等功能的系统软件。一个内核不是一套完整的操作系统。一套基于Linux 内核的完整操作系统叫作Linux 操作系统，或是GNU/Linux。</p><p>  Linux 是一个宏内核（monolithic kernel）系统。设备驱动程序可以完全访问硬件。Linux 内的设备驱动程序可以方便地以模块化（modularize）的形式设置，并在系统运行期间可直接装载或卸载。</p><p><strong>Linux 内核组成部分：</strong></p><p>进程管理（process management）、定时器（timer）、中断管理（interrupt management）、内存管理（memory management）、模块管理（module management）、虚拟文件系统接口（VFS layer）、文件系统（file system）、设备驱动程序（device driver）、进程间通信（inter-process communication）、网络管理（network management）、系统启动（system init）等操作系统功能的实现。</p><hr><hr><p><strong>二．Linux 内核版本号</strong></p><p><strong>1.第一种方式</strong></p><p>  内核是一个用来和硬件打交道并为用户程序提供一个有限服务集的低级支撑软件。一个计算机系统是一个硬件和软件的共生体，它们互相依赖，不可分割。</p><p>  Linux 的版本号分为两部分，即内核版本与发行版本。内核版本号由3个数字组成：r.x.y。各数字含义如下：</p><p>r：目前发布的内核主版本。</p><p>x：偶数表示稳定版本；奇数表示开发中版本。</p><p>y：错误修补的次数。</p><p>  一般来说，x 位为偶数的版本是一个可以使用的稳定版本，如2.4.4；x 位为奇数的版本一般加入了一些新的内容，不一定很稳定，是测试版本，如2.1.111。</p><hr><p><strong>2.第二种方式</strong></p><p>  <strong>major.minor.patch-build.desc</strong></p><p>  <strong>2.26.35-rc5</strong></p><p>说明如下：</p><table><thead><tr><th>**major **</th><th>**minor **</th><th><strong>patch</strong></th><th><strong>build</strong></th><th><strong>desc</strong></th></tr></thead><tbody><tr><td>表示主版本号，有结构性变化时才变更</td><td>表示次版本号，新增功能时才发生变化；一般奇数表示测试版，偶数表示生产版</td><td>表示对次版本的修订次数或补丁包数</td><td>表示编译（或构建）的次数，每次编译可能对少量程序做优化或修改，但一般没有大的（可控的）功能变化</td><td>用来描述当前的版本特殊信息；其信息由编译时指定，具有较大的随意性，但也有一些描述标识是常用的</td></tr></tbody></table><p>对于desc的说明如下：</p><table><thead><tr><th><strong>rc</strong></th><th>**smp **</th><th><strong>pp</strong></th><th>**EL **</th><th>**mm **</th><th>**fc **</th></tr></thead><tbody><tr><td>（有时也用一个字母r），表示候选版本（release candidate），rc 后的数字表示该正式版本的第几个候选版本，多数情况下，各候选版本之间数字越大越接近正式版</td><td>表示对称多处理器（Symmetric MultiProcessing）</td><td>在Red Hat Linux 中常用来表示测试版本（pre-patch）</td><td>在Red Hat Linux 中用来表示企业版Linux（Enterprise Linux）</td><td>表示专门用来测试新的技术或新功能的版本</td><td>在Red Hat Linux 中表示Fedora Core</td></tr></tbody></table><p>  如果在生产机上，最好不要安装小版本号是奇数的内核。同样，pre-patch 的内核</p><p>版本也不建议安装在生产机上。</p><hr><hr><p><strong>三、Linux内核的发布历史</strong></p><p>  内核是Linux 系统的重要组成部分，每一次内核新版本的发布都受到Linux 爱好</p><p>者的关注，下面表格中列出了Linux 内核的重要发展事件。</p><table><thead><tr><th><strong>内核版本号</strong></th><th>**时间 **</th><th>**内核发展史 **</th></tr></thead><tbody><tr><td>0.00</td><td>1991.2-4</td><td>两个进程分别显示AAA BBB</td></tr><tr><td>0.01</td><td>1991.9</td><td>第一个正式向外公布的Linux 内核版本</td></tr><tr><td>0.02</td><td>1991.10.5</td><td>Linus Torvalds 将当时最初的0.02内核版本发布到了Minix 新闻组，很快就得到了反应。Linus Torvalds 在这种简单的任务切换机制上进行扩展，并在很多热心支持者的帮助下开发和推出了Linux 的第一个稳定的工作版本。</td></tr><tr><td>0.03</td><td>1991.10.5</td><td></td></tr><tr><td>0.10</td><td>1991.10</td><td>Linux0.10版本内核发布，0.11版本随后在1991年12月推出，当时它被发布在Internet 上，供人们免费使用。</td></tr><tr><td>0.11</td><td>1991.12.8</td><td>基本可以正常运行的内核版本</td></tr><tr><td>0.12</td><td>1992.1.15</td><td>主要加入对数学协处理器的软件模拟程序</td></tr><tr><td>0.95(0.13)</td><td>1992.3.8</td><td>开始加入虚拟文件系统思想的内核版本</td></tr><tr><td>0.96</td><td>1992.5.12</td><td>开始加入网络支持和虚拟文件系统</td></tr><tr><td>0.97</td><td>1992.8.1</td><td></td></tr><tr><td>0.98</td><td>1992.9.29</td><td></td></tr><tr><td>0.99</td><td>1992.12.13</td><td></td></tr><tr><td>1.0</td><td>1994.3.14</td><td>Linux1.0版本内核发布，使用它的用户越来越多，而且Linux 系统的核心开发队伍也建起来了。</td></tr><tr><td>1.2</td><td>1995.3.7</td><td></td></tr><tr><td>2.0</td><td>1996.2.9</td><td></td></tr><tr><td>2.2</td><td>1991.1.26</td><td></td></tr><tr><td>2.4</td><td>2001.1.4</td><td>Linux2.4.0版本内核发布。</td></tr><tr><td>2.6</td><td>2003.12.17</td><td>Linux2.6版本内核发布，与2.4内核版本相比，它在很多方面进行了改进，如支持多处理器配置和64位计算，它还支持实现高效率线和处理的本机POSIX 线程库(NPTL)。实际上，性能、安全性和驱动程序的改进是整个2.6.x 内核的关键。</td></tr><tr><td>2.6.15</td><td>2006</td><td>Linux2.6.15版本内核发布。它对IPv6的支持在这个内核中有了很大的改进。PowerPC 用户现在有了一个用于64 位和32 位PowerPC 的泛型树，它使这两种架构上的内核编辑成为可能。</td></tr><tr><td>2.6.30</td><td>2009.6</td><td>改善了文件系统、加入了完整性检验补丁、TOMOYO Linux 安全模块、可靠的数据报套接字（datagram socket)协议支持、对象存储设备支持、FS-Cache 文件系统缓存层、nilfs 文件系统、线程中断处理支持等等。</td></tr><tr><td>2.6.32</td><td>2009.12</td><td>增添了虚拟化内存de-duplicacion、重写了writeback 代码、改进了Btrfs 文件系统、添加了ATI R600/R700 3D 和KMS 支持、CFQ 低传输延迟时间模式、perf timechart 工具、内存控制器支持soft limits、支持S+Core 架构、支持Intel Moorestown 及其新的固件接口、支持运行时电源管理、以及新的驱动。</td></tr><tr><td>2.6.34</td><td>2010.5</td><td>添加了Ceph 和LogFS 两个新的文件系统，其中前者为分布式的文件系统，后者是适用于Flash 设备的文件系统。Linux Kernel 2.6.34的其他特性包括新的Vhost net、改进了Btrfs 文件系统、对Kprobes jump 进行了优化、新的perf 功能、RCU lockdep、Generalized TTL Security Mechanism (RFC 5082)及privateVLAN proxy arp (RFC 3069)支持、asynchronous 挂起恢复等等。</td></tr><tr><td>2.6.36</td><td>2010.10</td><td>Tilera 处理器架构支持、新的文件通知接口fanotify、Intel显卡上实现KMS 和KDB 的整合、并行管理工作队列、Intel i3/5平台上内置显卡和CPU 的智能电源管理、CIFS 文件系统本地缓存、改善虚拟内存的层级结构，提升桌面操作响应速度、改善虚拟内存溢出终结器的算法、整合了AppArmor 安全模型（注：与SELinux 基于文件的标注不同，AppArmor 是基于路径的）。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux内核相关演进历史。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://juoyo.github.io/categories/Linux/"/>
    
    <category term="内核" scheme="https://juoyo.github.io/categories/Linux/%E5%86%85%E6%A0%B8/"/>
    
    
    <category term="Linux" scheme="https://juoyo.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Flutter实践</title>
    <link href="https://juoyo.github.io/posts/625fcc1f.html"/>
    <id>https://juoyo.github.io/posts/625fcc1f.html</id>
    <published>2021-05-08T15:05:19.000Z</published>
    <updated>2021-06-26T14:24:45.646Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter实践</p><a id="more"></a><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;  <span class="comment">// 导入包，导入Material UI组件库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用入口，调用runAPP启动应用</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;  </span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyApp继承自StatelessWidget（无状态组件）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        <span class="comment">// 应用名</span></span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        <span class="comment">// This is the theme of your application.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Try running your application with &quot;flutter run&quot;. You&#x27;ll see the</span></span><br><span class="line">        <span class="comment">// application has a blue toolbar. Then, without quitting the app, try</span></span><br><span class="line">        <span class="comment">// changing the primarySwatch below to Colors.green and then invoke</span></span><br><span class="line">        <span class="comment">// &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;,</span></span><br><span class="line">        <span class="comment">// or simply save your changes to &quot;hot reload&quot; in a Flutter IDE).</span></span><br><span class="line">        <span class="comment">// Notice that the counter didn&#x27;t reset back to zero; the application</span></span><br><span class="line">        <span class="comment">// is not restarted.</span></span><br><span class="line">          <span class="comment">// 主要样布：蓝色主题</span></span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">        <span class="comment">// 应用首页路由</span></span><br><span class="line">      home: MyHomePage(title: <span class="string">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用首页MyHomePage类继承自StatefulWidget（有状态组件）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyHomePage(&#123;Key key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the home page of your application. It is stateful, meaning</span></span><br><span class="line">  <span class="comment">// that it has a State object (defined below) that contains fields that affect</span></span><br><span class="line">  <span class="comment">// how it looks.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// This class is the configuration for the state. It holds the values (in this</span></span><br><span class="line">  <span class="comment">// case the title) provided by the parent (in this case the App widget) and</span></span><br><span class="line">  <span class="comment">// used by the build method of the State. Fields in a Widget subclass are</span></span><br><span class="line">  <span class="comment">// always marked &quot;final&quot;.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyHomePage类对应的状态类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="comment">// This call to setState tells the Flutter framework that something has</span></span><br><span class="line">      <span class="comment">// changed in this State, which causes it to rerun the build method below</span></span><br><span class="line">      <span class="comment">// so that the display can reflect the updated values. If we changed</span></span><br><span class="line">      <span class="comment">// _counter without calling setState(), then the build method would not be</span></span><br><span class="line">      <span class="comment">// called again, and so nothing would appear to happen.</span></span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// This method is rerun every time setState is called, for instance as done</span></span><br><span class="line">    <span class="comment">// by the _incrementCounter method above.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The Flutter framework has been optimized to make rerunning build methods</span></span><br><span class="line">    <span class="comment">// fast, so that you can just rebuild anything that needs updating rather</span></span><br><span class="line">    <span class="comment">// than having to individually change instances of widgets.</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        <span class="comment">// Here we take the value from the MyHomePage object that was created by</span></span><br><span class="line">        <span class="comment">// the App.build method, and use it to set our appbar title.</span></span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        <span class="comment">// Center is a layout widget. It takes a single child and positions it</span></span><br><span class="line">        <span class="comment">// in the middle of the parent.</span></span><br><span class="line">        child: Column(</span><br><span class="line">          <span class="comment">// Column is also a layout widget. It takes a list of children and</span></span><br><span class="line">          <span class="comment">// arranges them vertically. By default, it sizes itself to fit its</span></span><br><span class="line">          <span class="comment">// children horizontally, and tries to be as tall as its parent.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Invoke &quot;debug painting&quot; (press &quot;p&quot; in the console, choose the</span></span><br><span class="line">          <span class="comment">// &quot;Toggle Debug Paint&quot; action from the Flutter Inspector in Android</span></span><br><span class="line">          <span class="comment">// Studio, or the &quot;Toggle Debug Paint&quot; command in Visual Studio Code)</span></span><br><span class="line">          <span class="comment">// to see the wireframe for each widget.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Column has various properties to control how it sizes itself and</span></span><br><span class="line">          <span class="comment">// how it positions its children. Here we use mainAxisAlignment to</span></span><br><span class="line">          <span class="comment">// center the children vertically; the main axis here is the vertical</span></span><br><span class="line">          <span class="comment">// axis because Columns are vertical (the cross axis would be</span></span><br><span class="line">          <span class="comment">// horizontal).</span></span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;<span class="subst">$_counter</span>&#x27;</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.headline4,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">      ), <span class="comment">// This trailing comma makes auto-formatting nicer for build methods.</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-Flutter布局基础教程"><a href="#1-Flutter布局基础教程" class="headerlink" title="1.Flutter布局基础教程"></a>1.Flutter布局基础教程</h2><h3 id="1-1-Row-和-Column-类"><a href="#1-1-Row-和-Column-类" class="headerlink" title="1.1 Row 和 Column 类"></a>1.1 Row 和 Column 类</h3><h3 id="1-2-轴大小和对齐方式"><a href="#1-2-轴大小和对齐方式" class="headerlink" title="1.2 轴大小和对齐方式"></a>1.2 轴大小和对齐方式</h3><h4 id="1-2-1-mainAxisSize-属性"><a href="#1-2-1-mainAxisSize-属性" class="headerlink" title="1.2.1 mainAxisSize 属性"></a>1.2.1 mainAxisSize 属性</h4><h4 id="1-2-2-mainAxisAlignment-属性"><a href="#1-2-2-mainAxisAlignment-属性" class="headerlink" title="1.2.2 mainAxisAlignment 属性"></a>1.2.2 mainAxisAlignment 属性</h4><h4 id="1-2-3-crossAxisAlignment属性"><a href="#1-2-3-crossAxisAlignment属性" class="headerlink" title="1.2.3 crossAxisAlignment属性"></a>1.2.3 crossAxisAlignment属性</h4><h3 id="1-3-Flexible-widget"><a href="#1-3-Flexible-widget" class="headerlink" title="1.3 Flexible widget"></a>1.3 Flexible widget</h3><h3 id="1-4-Expanded-widget"><a href="#1-4-Expanded-widget" class="headerlink" title="1.4 Expanded widget"></a>1.4 Expanded widget</h3><p><code>Expanded</code> widget 能够包裹一个 widget 并强制其填满剩余空间</p><h3 id="1-5-SizedBox-widget"><a href="#1-5-SizedBox-widget" class="headerlink" title="1.5 SizedBox widget"></a>1.5 SizedBox widget</h3><h2 id="2-Flutter中的布局"><a href="#2-Flutter中的布局" class="headerlink" title="2.Flutter中的布局"></a>2.Flutter中的布局</h2><h2 id="3-Flutter应用中加入交互体验"><a href="#3-Flutter应用中加入交互体验" class="headerlink" title="3.Flutter应用中加入交互体验"></a>3.Flutter应用中加入交互体验</h2><h2 id="1-用户界面"><a href="#1-用户界面" class="headerlink" title="1.用户界面"></a>1.用户界面</h2><h3 id="1-1-Widgets介绍"><a href="#1-1-Widgets介绍" class="headerlink" title="1.1 Widgets介绍"></a>1.1 Widgets介绍</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;Flutter实践&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu系统常用开发命令</title>
    <link href="https://juoyo.github.io/posts/9ed9c941.html"/>
    <id>https://juoyo.github.io/posts/9ed9c941.html</id>
    <published>2021-03-16T14:25:24.000Z</published>
    <updated>2021-03-31T14:57:45.191Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu系统常用开发命令</p><a id="more"></a><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><h3 id="子命令"><a href="#子命令" class="headerlink" title="子命令"></a>子命令</h3><p>django-admin.py和manage.py都是Django的命令工具集</p><p>语法：</p><p>django-admin <subcommand> [options]</subcommand></p><p>manage.py <subcommand> [options]</subcommand></p><p>subcommand是子命令；options是可选的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">常用子命令：</span><br><span class="line">startproject:创建一个项目（*）</span><br><span class="line">startapp:创建一个app（*）</span><br><span class="line">runserver：运行开发服务器（*）</span><br><span class="line">shell：进入django shell（*）</span><br><span class="line">dbshell：进入django dbshell</span><br><span class="line">check：检查django项目完整性</span><br><span class="line">flush：清空数据库</span><br><span class="line">compilemessages：编译语言文件</span><br><span class="line">makemessages：创建语言文件</span><br><span class="line">makemigrations：生成数据库同步脚本（*）</span><br><span class="line">migrate：同步数据库（*）</span><br><span class="line">showmigrations：查看生成的数据库同步脚本（*）</span><br><span class="line">sqlflush：查看生成清空数据库的脚本（*）</span><br><span class="line">sqlmigrate：查看数据库同步的sql语句（*）</span><br><span class="line">dumpdata:导出数据</span><br><span class="line">loaddata:导入数据</span><br><span class="line">diffsettings:查看你的配置和django默认配置的不同之处</span><br><span class="line">manage.py特有的一些子命令：</span><br><span class="line">createsuperuser:创建超级管理员（*）</span><br><span class="line">changepassword:修改密码（*）</span><br><span class="line">clearsessions：清除session</span><br></pre></td></tr></table></figure><p><strong>startproject</strong></p><p>作用：创建Django工程</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject name [项目想要存放的路径]</span><br></pre></td></tr></table></figure><p><strong>startapp</strong></p><p>作用：创建Django应用程序</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django-admin startapp name [应用想要存放的路径]</span><br><span class="line">python manage.py startapp name</span><br></pre></td></tr></table></figure><p><strong>runserver</strong></p><p>作用：在当前机器启动一个Web服务器，运行Django项目</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#默认是8000端口</span><br><span class="line">python manage.py runserver</span><br><span class="line">#指定IP和端口</span><br><span class="line">python manage.py runserver 127.0.0.1:8000</span><br><span class="line">#指定端口</span><br><span class="line">python manage.py runserver 8000</span><br></pre></td></tr></table></figure><p><strong>migrations</strong></p><p>Django通过migrations命令将Models中的任何修改写入到数库中，比如：新增加的模型或修改已有的字段等。</p><p><strong>makemigrations</strong></p><p>作用：根据models的变化生成对应的Python代码，该代码用于更新数据库</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py makemigrations [appname]</span><br></pre></td></tr></table></figure><p><strong>migrate</strong></p><p>作用：将model里的修改应用到数据库</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate #默认是所有的APP的修改应用到数据库</span><br><span class="line">python manage.py migrate [appname] #指定APP的修改应用到数据库</span><br><span class="line">python manage.py migrate [appname] [migrations_name] #将操作恢复到指定版本</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>如果执行migrate的命令同时给了应用程序的名字和migtrations名字，系统会把数据库恢复到之前指定的一个版本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate myblog 0001_initial #指定blog应用恢复到0001_initial 这个版本</span><br></pre></td></tr></table></figure><hr><h3 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h3><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h4><p>在代码目录下运行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ django-admin startproject projectname</span><br><span class="line"># $ django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>等效命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m django startproject tempsite</span><br></pre></td></tr></table></figure><p>将会在当前目录下创建一个 <code>projectname</code> 目录</p><p>startproject创建文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tempsite/</span><br><span class="line">    manage.py</span><br><span class="line">    tempsite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><h4 id="2-简易服务期（开发用）"><a href="#2-简易服务期（开发用）" class="headerlink" title="2.简易服务期（开发用）"></a>2.简易服务期（开发用）</h4><p>运行服务期</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver</span><br></pre></td></tr></table></figure><p>更换服务器的监听端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver 8080</span><br></pre></td></tr></table></figure><p>修改服务器监听的IP</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py runserver 0:8000</span><br></pre></td></tr></table></figure><p><font color="green"><strong>自动重新加载的服务器：</strong></font></p><p>每一次的访问请求重新载入一遍 Python 代码，不需要为了让修改的代码生效而频繁的重新启动服务器。</p><p>添加新文件，将不会触发自动重新加载，需要手动重启服务器。</p><h4 id="3-创建应用"><a href="#3-创建应用" class="headerlink" title="3.创建应用"></a>3.创建应用</h4><p><code>manage.py</code> 所在的目录下，运行命令来创建一个应用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py startapp appname</span><br><span class="line"></span><br><span class="line"># $ python manage.py startapp polls</span><br></pre></td></tr></table></figure><p>上述命令将会创建一个 <code>polls</code> 目录，它的目录结构大致如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><h4 id="4-编写视图"><a href="#4-编写视图" class="headerlink" title="4.编写视图"></a>4.编写视图</h4><p>打开 <code>polls/views.py</code>，输入代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="5-URL映射到视图"><a href="#5-URL映射到视图" class="headerlink" title="5.URL映射到视图"></a>5.URL映射到视图</h4><p>如果想看见效果，需要将一个 URL 映射到此视图——这就是需要 URLconf 的原因。</p><p>为了创建 URLconf，在 polls 目录里新建一个 <code>urls.py</code> 文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    urls.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><p>在 <code>polls/urls.py</code> 中，输入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;&#x27;, views.index, name=&#x27;index&#x27;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下一步在根 URLconf 文件中指定创建的 <code>polls.urls</code> 模块。</p><p>在 <code>mysite/urls.py</code> 文件的 <code>urlpatterns</code> 列表里插入一个 <code>include()</code>， 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># mysite/urls.py</span><br><span class="line"></span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;polls/&#x27;, include(&#x27;polls.urls&#x27;)),</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>函数 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/urls/#django.urls.include"><code>include()</code></a> 允许引用其它 URLconfs。</p><p>每当 Django 遇到 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/urls/#django.urls.include"><code>include()</code></a> 时，它会截断与此项匹配的 URL 的部分，并将剩余的字符串发送到 URLconf 以供进一步处理。</p><p><font color="blue"><strong>何时使用 [<code>include()</code>]</strong></font></p><p>当包括其它 URL 模式时应该总是使用 <code>include()</code> ， <code>admin.site.urls</code> 是唯一例外。</p><p>此时已经把 <code>index</code> 视图添加进了 URLconf。</p><p>访问 <a href="http://localhost:8000/polls/%EF%BC%8C%E5%BA%94%E8%AF%A5%E8%83%BD%E5%A4%9F%E7%9C%8B%E8%A7%81">http://localhost:8000/polls/，应该能够看见</a> “<em>Hello, world. You’re at the polls index.</em>“ ，这是在 <code>index</code> 视图中定义的。</p><p>path()函数四参数：</p><p>两个必须参数：<code>route</code> 和 <code>view</code>，两个可选参数：<code>kwargs</code> 和 <code>name</code>。</p><p><code>route</code>： </p><p><code>route</code> 是一个匹配 URL 的准则（类似正则表达式）。当 Django 响应一个请求时，会从 <code>urlpatterns</code> 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。</p><p>这些准则不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 <code>https://www.example.com/myapp/</code> 时，它会尝试匹配 <code>myapp/</code> 。处理请求 <code>https://www.example.com/myapp/?page=3</code> 时，也只会尝试匹配 <code>myapp/</code>。</p><p><code>view</code>：</p><p>当 Django 找到了一个匹配的准则，就会调用这个特定的视图函数，并传入一个 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/request-response/#django.http.HttpRequest"><code>HttpRequest</code></a> 对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。</p><p><code>kwargs</code>：</p><p>任意个关键字参数可以作为一个字典传递给目标视图函数。</p><p><code>name</code>：</p><p>为你的 URL 取名能使你在 Django 的任意地方唯一地引用它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个 URL 模式。</p><h4 id="6-数据库"><a href="#6-数据库" class="headerlink" title="6.数据库"></a>6.数据库</h4><p><font color="blue"><strong>使用SQLite数据库不需在使用前做任何事</strong></font></p><p>如果使用 SQLite，那么不需要在使用前做任何事——数据库会在需要的时候自动创建。</p><p>如果使用其它数据库（需要确保在使用前已经创建了数据库），配置如下。</p><h5 id="6-1数据库配置"><a href="#6-1数据库配置" class="headerlink" title="6.1数据库配置"></a>6.1数据库配置</h5><p><strong>mysite/settings.py</strong>是包含 Django 项目设置的 Python 模块。</p><p>需要安装合适的 <a href="https://docs.djangoproject.com/zh-hans/3.1/topics/install/#database-installation">database bindings</a> ，改变设置文件中 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-DATABASES"><code>DATABASES</code></a> <code>&#39;default&#39;</code> 项目中的一些键值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENGINE -- 可选值有 &#x27;django.db.backends.sqlite3&#x27;，&#x27;django.db.backends.postgresql&#x27;，&#x27;django.db.backends.mysql&#x27;，或 &#x27;django.db.backends.oracle&#x27;。</span><br><span class="line"></span><br><span class="line">NAME -- 数据库的名称。如果使用 SQLite，数据库将是一个文件，在这种情况下，NAME 应该是此文件完整的绝对路径，包括文件名。默认值 BASE_DIR / &#x27;db.sqlite3&#x27; 将把数据库文件储存在项目的根目录。</span><br><span class="line">如果不使用 SQLite，则必须添加一些额外设置，比如 USER 、 PASSWORD 、 HOST 等。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure><p> <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> 命令检查 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> 设置，为其中的每个应用创建需要的数据表。</p><h5 id="6-2创建模型"><a href="#6-2创建模型" class="headerlink" title="6.2创建模型"></a>6.2创建模型</h5><p>定义模型-数据库结构设计和附加的其它元数据。</p><p>编辑 <code>polls/models.py</code> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个类为一个模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="comment"># 一个类变量为一个数据库字段</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&#x27;date published&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>每个模型被表示为 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/models/instances/#django.db.models.Model"><code>django.db.models.Model</code></a> 类的子类。每个模型有许多类变量，都表示模型里的一个数据库字段。</p><h5 id="6-3激活模型"><a href="#6-3激活模型" class="headerlink" title="6.3激活模型"></a>6.3激活模型</h5><p>首先得把 <code>polls</code> 应用安装到项目里。</p><p>为了在工程中包含这个应用，需要在配置类 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> 中添加设置。因为 <code>PollsConfig</code> 类写在文件 <code>polls/apps.py</code> 中，所以它的点式路径是 <code>&#39;polls.apps.PollsConfig&#39;</code>。</p><p>在文件 <code>mysite/settings.py</code> 中 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> 子项添加点式路径后，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite/settings.py</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;polls.apps.PollsConfig&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在 Django 项目会包含 <code>polls</code> 应用。</p><p>接着运行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations polls</span><br></pre></td></tr></table></figure><p>你将会看到类似于下面这样的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Migrations for &#39;polls&#39;:</span><br><span class="line">  polls&#x2F;migrations&#x2F;0001_initial.py</span><br><span class="line">    - Create model Question</span><br><span class="line">    - Create model Choice</span><br></pre></td></tr></table></figure><p>再次运行 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> 命令，在数据库里创建新定义的模型的数据表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Rendering model states... DONE</span><br><span class="line">  Applying polls.0001_initial... OK</span><br></pre></td></tr></table></figure><p>这个 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> 命令选中所有还没有执行过的迁移（Django 通过在数据库中创建一个特殊的表 <code>django_migrations</code> 来跟踪执行过哪些迁移）并应用在数据库上 - 也就是将对模型的更改同步到数据库结构上。</p><p><font color="blue"><strong>改变模型三步走</strong></font></p><ul><li>编辑 <code>models.py</code> 文件，改变模型。</li><li>运行 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/django-admin/#django-admin-makemigrations"><code>python manage.py makemigrations</code></a> 为模型的改变生成迁移文件。</li><li>运行 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/django-admin/#django-admin-migrate"><code>python manage.py migrate</code></a> 来应用数据库迁移。</li></ul><h4 id="7-管理页面"><a href="#7-管理页面" class="headerlink" title="7.管理页面"></a>7.管理页面</h4><h5 id="7-1创建一个管理员账号"><a href="#7-1创建一个管理员账号" class="headerlink" title="7.1创建一个管理员账号"></a>7.1创建一个管理员账号</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>键入你想要使用的用户名，然后按下回车键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username: admin</span><br></pre></td></tr></table></figure><p>然后提示你输入想要使用的邮件地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Email address: admin@example.com</span><br></pre></td></tr></table></figure><p>最后一步是输入密码。你会被要求输入两次密码，第二次的目的是为了确认第一次输入的确实是你想要的密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Password: **********</span><br><span class="line">Password (again): *********</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><h5 id="7-2后端管理界面"><a href="#7-2后端管理界面" class="headerlink" title="7.2后端管理界面"></a>7.2后端管理界面</h5><p><a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a></p><h5 id="7-3向管理页面加入应用"><a href="#7-3向管理页面加入应用" class="headerlink" title="7.3向管理页面加入应用"></a>7.3向管理页面加入应用</h5><p>投票应用在哪呢？没在索引页面里显示。</p><p>只需要：得告诉管理，问题 <code>Question</code> 对象需要一个后台接口。</p><p><code>polls/admin.py</code> 编辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><h4 id="8-编写更多接收参数的视图"><a href="#8-编写更多接收参数的视图" class="headerlink" title="8.编写更多接收参数的视图"></a>8.编写更多接收参数的视图</h4><p>Django 中的视图的概念是「一类具有相同功能和模板的网页的集合」。</p><p>在 Django 中，网页和其他内容都是从视图派生而来。每一个视图表现为一个 Python 函数（或者说方法，如果是在基于类的视图里的话）。Django 将会根据用户请求的 URL 来选择使用哪个视图（更准确的说，是根据 URL 中域名之后的部分）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re looking at question %s.&quot;</span> % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    response = <span class="string">&quot;You&#x27;re looking at the results of question %s.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re voting on question %s.&quot;</span> % question_id)</span><br></pre></td></tr></table></figure><p>新视图添加进 <code>polls.urls</code> 模块里，只要添加几个 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/urls/#django.conf.urls.url"><code>url()</code></a> 函数调用就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/&#x27;</span>, views.detail, name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/results/&#x27;</span>, views.results, name=<span class="string">&#x27;results&#x27;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="string">&#x27;vote&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>浏览器转到”/polls/34/“ ，Django 将会运行 <code>detail()</code> 方法并且展示在 URL 里提供的问题 ID。</p><p>当请求网站的某一页面时——比如 “/polls/34/“ ，Django 将会载入 <code>mysite.urls</code> 模块，因为这在配置项 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-ROOT_URLCONF"><code>ROOT_URLCONF</code></a> 中设置了。然后 Django 寻找名为 <code>urlpatterns</code> 变量并且按序匹配正则表达式。在找到匹配项 <code>&#39;polls/&#39;</code>，它切掉了匹配的文本（<code>&quot;polls/&quot;</code>），将剩余文本——<code>&quot;34/&quot;</code>，发送至 ‘polls.urls’ URLconf 做进一步处理。在这里剩余文本匹配了 <code>&#39;&lt;int:question_id&gt;/&#39;</code>，使得 Django 以如下形式调用 <code>detail()</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">detail(request&#x3D;&lt;HttpRequest object&gt;, question_id&#x3D;34)</span><br></pre></td></tr></table></figure><p><code>question_id=34</code> 由 <code>&lt;int:question_id&gt;</code> 匹配生成。使用尖括号“捕获”这部分 URL，且以关键字参数的形式发送给视图函数。上述字符串的 <code>:question_id&gt;</code> 部分定义了将被用于区分匹配模式的变量名，而 <code>int:</code> 则是一个转换器决定了应该以什么变量类型匹配这部分的 URL 路径。</p><h4 id="9-真正的视图"><a href="#9-真正的视图" class="headerlink" title="9.真正的视图"></a>9.真正的视图</h4><p>每个视图必须要做的只有两件事：返回一个包含被请求页面内容的 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a> 对象，或者抛出一个异常，比如 <a href="https://docs.djangoproject.com/zh-hans/3.1/topics/http/views/#django.http.Http404"><code>Http404</code></a> 。其它可自由实现。</p><p>视图可以从数据库里读取记录，可以使用一个模板引擎（比如 Django 自带的，或者其他第三方的），可以生成一个 PDF 文件，可以输出一个 XML，创建一个 ZIP 文件，你可以做任何你想做的事，使用任何你想用的 Python 库。</p><p>Django 只要求返回的是一个 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a> ，或者抛出一个异常。</p><p>页面设计最好不要写死在视图函数中，使用Django模板系统，只需创建一个视图，就可将页面的设计从代码中分离。</p><p>默认的设置文件设置了 <code>DjangoTemplates</code> 后端，并将 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-TEMPLATES-APP_DIRS"><code>APP_DIRS</code></a> 设置成了 True。这一选项将会让 <code>DjangoTemplates</code> 在每个 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/settings/#std:setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> 文件夹中寻找 “templates” 子目录。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">模板命名空间：</span><br><span class="line">模板文件应放在app1/templates/app1中</span><br></pre></td></tr></table></figure><p>例如模板文件：</p><p>polls/templates/polls/index.html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> latest_question_list %&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> question <span class="keyword">in</span> latest_question_list %&#125;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;No polls are available.&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>使用polls/views.py中的index视图来使用模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line">    <span class="comment"># 载入 polls/index.html 模板文件</span></span><br><span class="line">    template = loader.get_template(<span class="string">&#x27;polls/index.html&#x27;</span>)</span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&#x27;latest_question_list&#x27;</span>: latest_question_list,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request)) </span><br></pre></td></tr></table></figure><h5 id="快捷函数render"><a href="#快捷函数render" class="headerlink" title="快捷函数render()"></a>快捷函数render()</h5><p>作用：</p><p>「载入模板，填充上下文，再返回由它生成的 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a> 对象」</p><p>用Django中render()函数改写polls/views.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&#x27;latest_question_list&#x27;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/index.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure><h4 id="10-处理404"><a href="#10-处理404" class="headerlink" title="10.处理404"></a>10.处理404</h4><p>使用快捷函数 get_object_or_404（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">request, question_id</span>):</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br></pre></td></tr></table></figure><h4 id="11-使用模板系统"><a href="#11-使用模板系统" class="headerlink" title="11.使用模板系统"></a>11.使用模板系统</h4><p> <code>detail()</code> 视图向模板传递了上下文变量 <code>question</code> 。</p><p> <code>polls/templates/polls/detail.html</code> 模板里正式的代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> choice <span class="keyword">in</span> question.choice_set.<span class="built_in">all</span> %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>在 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/templates/builtins/#std:templatetag-for"><code>&#123;% for %&#125;</code></a> 循环中发生的函数调用：<code>question.choice_set.all</code> 被解释为 Python 代码 <code>question.choice_set.all()</code> ，将会返回一个可迭代的 <code>Choice</code> 对象，这一对象可以在 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/templates/builtins/#std:templatetag-for"><code>&#123;% for %&#125;</code></a> 标签内部使用。</p><h4 id="12-去除模板中的硬编码URL"><a href="#12-去除模板中的硬编码URL" class="headerlink" title="12.去除模板中的硬编码URL"></a>12.去除模板中的硬编码URL</h4><p>如下链接是硬编码的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;polls&#x2F;&#123;&#123; question.id &#125;&#125;&#x2F;&quot;&gt;&#123;&#123; question.question_text &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure><p>因为在 <code>polls.urls</code> 的 <a href="https://docs.djangoproject.com/zh-hans/3.1/ref/urls/#django.conf.urls.url"><code>url()</code></a> 函数中通过 name 参数为 URL 定义了名字，你可以使用 <code>&#123;% url %&#125;</code> 标签代替它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href&#x3D;&quot;&#123;% url &#39;detail&#39; question.id %&#125;&quot;&gt;&#123;&#123; question.question_text &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure><p>具有名字 ‘detail’ 的 URL 是在如下语句中定义的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"># the &#39;name&#39; value as called by the &#123;% url %&#125; template tag</span><br><span class="line">path(&#39;&lt;int:question_id&gt;&#x2F;&#39;, views.detail, name&#x3D;&#39;detail&#39;),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="13-为URL名称添加命名空间"><a href="#13-为URL名称添加命名空间" class="headerlink" title="13.为URL名称添加命名空间"></a>13.为URL名称添加命名空间</h4><p>真实的 Django 项目中肯能有多个应用，Django 如何分辨重名的 URL 呢？（例如多个detail视图）</p><p>在根 URLconf 中添加命名空间，在 <code>polls/urls.py</code> 文件中加上 <code>app_name</code> 设置命名空间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/urls.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/&#x27;</span>, views.detail, name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/results/&#x27;</span>, views.results, name=<span class="string">&#x27;results&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="string">&#x27;vote&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在，编辑 <code>polls/index.html</code> 文件，从：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- polls/templates/polls/index.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改为指向具有命名空间的详细视图：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- polls/templates/polls/index.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h3 id="redis的安装与使用"><a href="#redis的安装与使用" class="headerlink" title="redis的安装与使用"></a>redis的安装与使用</h3><ol><li>安装、卸载命令</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis-server              #安装</span><br><span class="line">sudo apt-get purge --auto-remove redis-server  #卸载</span><br></pre></td></tr></table></figure><ol start="2"><li>启动redis</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis                  #查看redis状态</span><br><span class="line">sudo service redis-server start    #启动redis</span><br><span class="line">sudo service redis-server stop      #停止redis</span><br></pre></td></tr></table></figure><h3 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h3><p>redis默认配置文件为/etc/redis/redis.conf</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Redis监听端口，默认端口为6379</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">绑定主机IP地址</span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">设置数据库的数量</span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line">指定本地数据库文件名，默认值为dump.rdb</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">指定本地数据库存放目录</span><br><span class="line">dir /var/lib/redis  #默认存放目录</span><br><span class="line"></span><br><span class="line">设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <span class="tag">&lt;<span class="name">password</span>&gt;</span>命令提供密码，默认关闭</span><br><span class="line">requirepass foobared   #foobared 为密码</span><br></pre></td></tr></table></figure><h3 id="redis常用操作"><a href="#redis常用操作" class="headerlink" title="redis常用操作"></a>redis常用操作</h3><h4 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h [ip] -p [端口]</span><br><span class="line">#例</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure><p>如果已设置密码，就输入密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth 445813  #445813为密码，输入密码前要密码前面加 auth和空格</span><br></pre></td></tr></table></figure><h4 id="redis键操作命令"><a href="#redis键操作命令" class="headerlink" title="redis键操作命令"></a>redis键操作命令</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#添加</span><br><span class="line">set key value</span><br><span class="line">#例</span><br><span class="line">set webname django.cn</span><br><span class="line">set usrname &quot;My namne is XXX&quot; #中间有空格的要用引号</span><br><span class="line"></span><br><span class="line">#通过KEY查询</span><br><span class="line">127.0.0.1:6379&gt; get webname</span><br><span class="line">&quot;django.cn&quot;</span><br><span class="line"></span><br><span class="line">#删除key</span><br><span class="line">del webname</span><br><span class="line"></span><br><span class="line">#设置过期时间(单位为秒)</span><br><span class="line">expire key timeout</span><br><span class="line">#也可以在设置值的时候，一同指定过期时间</span><br><span class="line">set key value EX timeout</span><br><span class="line">#例子</span><br><span class="line">set name django.cn EX 20  #设置20秒过期</span><br><span class="line"></span><br><span class="line">#查看过期时间</span><br><span class="line">ttl key</span><br><span class="line">#如</span><br><span class="line">ttl name</span><br><span class="line"></span><br><span class="line">#查看当前redis中所有Key</span><br><span class="line">keys *</span><br></pre></td></tr></table></figure><h3 id="Python操作redis"><a href="#Python操作redis" class="headerlink" title="Python操作redis"></a>Python操作redis</h3><p>安装 python-redis</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure><h3 id="Django操作redis"><a href="#Django操作redis" class="headerlink" title="Django操作redis"></a>Django操作redis</h3><ol><li>Django想要使用redis，需要先安装django-redis</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django-redis</span><br></pre></td></tr></table></figure><ol start="2"><li><p>settings.py里配置redia</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    &quot;default&quot;: &#123;</span><br><span class="line">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span><br><span class="line">        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379&quot;, #服务器地址</span><br><span class="line">        &quot;OPTIONS&quot;: &#123;</span><br><span class="line">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span><br><span class="line">            &quot;CONNECTION_POOL_KWARGS&quot;: &#123;&quot;max_connections&quot;: 100&#125;#最大连接数</span><br><span class="line">            # &quot;PASSWORD&quot;: &quot;密码&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;　　</span><br></pre></td></tr></table></figure></li><li><p>常规redis使用方法</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import redis</span><br><span class="line">from django.shortcuts import render,HttpResponse</span><br><span class="line">from utils.redis_pool import POOL</span><br><span class="line"> </span><br><span class="line">def index(request):</span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hset(&#x27;kkk&#x27;,&#x27;age&#x27;,18)</span><br><span class="line">     </span><br><span class="line">    return HttpResponse(&#x27;设置成功&#x27;)</span><br><span class="line"> </span><br><span class="line">def order(request):</span><br><span class="line">    conn = redis.Redis(connection_pool=POOL)</span><br><span class="line">    conn.hget(&#x27;kkk&#x27;,&#x27;age&#x27;)</span><br><span class="line"> </span><br><span class="line">    return HttpResponse(&#x27;获取成功&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ubuntu系统常用开发命令&lt;/p&gt;</summary>
    
    
    
    
    <category term="tricks" scheme="https://juoyo.github.io/tags/tricks/"/>
    
    <category term="Ubuntu" scheme="https://juoyo.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>WL 好书 临终前最后悔的五件事</title>
    <link href="https://juoyo.github.io/posts/30cf2e58.html"/>
    <id>https://juoyo.github.io/posts/30cf2e58.html</id>
    <published>2021-01-16T10:53:23.000Z</published>
    <updated>2021-01-16T11:35:37.087Z</updated>
    
    <content type="html"><![CDATA[<p>在新生的时候，去领悟一下终点，感受一下结束，可能会让我们的希望，朝着实现的那个方向前进。种一棵树，最好的时间是十年前，其次是现在。</p><a id="more"></a><p>澳大利亚作家、词曲创作者兼歌手邦妮·韦尔女士著作《临终前最后悔的五件事》。</p><p><font color="green">可能很多人想不到的五件事</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 希望我有勇气过自己真正想要的生活，而不是过别人所期望的生活</span><br><span class="line"></span><br><span class="line">2. 希望我以前没有那么拼命的工作</span><br><span class="line"></span><br><span class="line">3. 希望我有足够的勇气表达自己的感受</span><br><span class="line"></span><br><span class="line">4. 希望我能够和自己的朋友们一直保持联系</span><br><span class="line"></span><br><span class="line">5. 希望我已经让自己成为快乐的人</span><br></pre></td></tr></table></figure><p>我在那些临终之人的床边亲眼所见 ，没有任何人在回顾自己的人生时，希望自己以前买得更多或者拥有更多，真的是一个人都没有。临终的人都明白这个道理。</p><p>在生命快要结束之际，没有任何东西是属于他们的。无论别人以往怎样地评价他们，无论曾经取得了什么样的成就，在这样的时刻，所有的一切甚至都不会引起他们的注意。</p><p>人将至死，人们最在乎的还是给自己所爱的人曾经带去了多少快乐和幸福，曾经拥有多少时间做某些事来善待和爱护自己。以及他们是否可以给他们的后人带来积极正面的影响，那些后人可以是家人、社区朋友或者任何一个人。</p><hr><p>我正在吸收着大量的人生体验，每个家庭都像一个课堂，我在里面可以学到一些新的或者从不同视角来看的教训，并在生活中借鉴。我的生活得到了改变，我不必等到临终之时，跟他们一样后悔人生的那些事。我这样的年纪，就获得了他们的全部人生追忆和各种经历，一生探索所得来的见解和洞察力，简直是难以置信的礼物。</p><hr><p>我们刚出生的时候是洁白无瑕光芒四射的婴孩，给我们周围的所有人带来光明和幸福。随着时间的推移，我们的朋友、学校、同事、社会人士，甚至家人，开始往我们的身上扔淤泥，我们的光芒被掩盖，长此以往，我们也加入了这个行列，朝别人甚至自己的身上扔淤泥，于是我们看到，一群浑身淤泥的人们在艰难的前行。回想起别人带给自己的伤害，这些人无论是父母、兄弟姐妹，甚至陌生人，他们曾经都是漂亮的小宝贝，有着婴儿对世界的信任和天真，领悟到了这一点，应该学会宽恕，与别人和解，也与自己和解。如果生活没有按照我的期望进行，我的悲伤和失望是否也会变成扔向别人身上的淤泥，连我自己都忘了，我只记得那一个个朝自己投掷的双手。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在新生的时候，去领悟一下终点，感受一下结束，可能会让我们的希望，朝着实现的那个方向前进。种一棵树，最好的时间是十年前，其次是现在。&lt;/p&gt;</summary>
    
    
    
    <category term="看见未来" scheme="https://juoyo.github.io/categories/%E7%9C%8B%E8%A7%81%E6%9C%AA%E6%9D%A5/"/>
    
    <category term="好书" scheme="https://juoyo.github.io/categories/%E7%9C%8B%E8%A7%81%E6%9C%AA%E6%9D%A5/%E5%A5%BD%E4%B9%A6/"/>
    
    
    <category term="好书" scheme="https://juoyo.github.io/tags/%E5%A5%BD%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>juoyoGK-SL</title>
    <link href="https://juoyo.github.io/posts/1aa6fdf4.html"/>
    <id>https://juoyo.github.io/posts/1aa6fdf4.html</id>
    <published>2021-01-03T06:58:04.000Z</published>
    <updated>2021-10-05T02:37:57.256Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a0c09d0a1bd25d8a377a16def954d9c045d99b9f83d39ffa007120aaa2c9b144"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="juoyoGK" scheme="https://juoyo.github.io/categories/juoyoGK/"/>
    
    
    <category term="juoyoSL" scheme="https://juoyo.github.io/tags/juoyoSL/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="https://juoyo.github.io/posts/a1751c09.html"/>
    <id>https://juoyo.github.io/posts/a1751c09.html</id>
    <published>2021-01-02T03:06:31.984Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://juoyo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="hexo" scheme="https://juoyo.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>juoyoGK-MS</title>
    <link href="https://juoyo.github.io/posts/1604a3d7.html"/>
    <id>https://juoyo.github.io/posts/1604a3d7.html</id>
    <published>2020-11-29T06:25:15.000Z</published>
    <updated>2021-10-05T02:38:18.641Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="57ed5e3699a629870841df5efe20711a31e5bf25195449b07582b7eb8067770f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="juoyoGK" scheme="https://juoyo.github.io/categories/juoyoGK/"/>
    
    
    <category term="juoyoMS" scheme="https://juoyo.github.io/tags/juoyoMS/"/>
    
  </entry>
  
  <entry>
    <title>juoyoGK-XC</title>
    <link href="https://juoyo.github.io/posts/b9d8174a.html"/>
    <id>https://juoyo.github.io/posts/b9d8174a.html</id>
    <published>2020-11-23T07:42:03.000Z</published>
    <updated>2021-10-05T02:37:26.243Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f4f69bb34b2bf879dc8924c7d4cf85a39f2562610e322593e6ab0a008c19db84"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="juoyoGK" scheme="https://juoyo.github.io/categories/juoyoGK/"/>
    
    
    <category term="juoyoXC" scheme="https://juoyo.github.io/tags/juoyoXC/"/>
    
  </entry>
  
  <entry>
    <title>Recommendation System: Introducing the Recommender</title>
    <link href="https://juoyo.github.io/posts/37dfcc90.html"/>
    <id>https://juoyo.github.io/posts/37dfcc90.html</id>
    <published>2020-10-07T06:55:58.000Z</published>
    <updated>2020-10-07T09:26:18.014Z</updated>
    
    <content type="html"><![CDATA[<p>建立推荐系统，第一步，推荐系统简介。</p><a id="more"></a><h2 id="Introduction-and-Motivation"><a href="#Introduction-and-Motivation" class="headerlink" title="Introduction and Motivation"></a>Introduction and Motivation</h2><p>Well, now that we’re done producing all those Coursera videos, it’s time for some fun and relaxation. &gt;&gt; Let’s watch something cool on Netflix. &gt;&gt; Hey, I made cookies last night, help yourselves. &gt;&gt; So, what should we watch? &gt;&gt; I don’t know. It’s been so long since I had any free time to watch anything. &gt;&gt; Well, Netflix has some suggestions, maybe one of those could be good &gt;&gt; How do you think they come up with these recommendations? I mean it seems like it would be a pretty complicated algorithm, requiring lots of data. &gt;&gt; Yes, Netflix has something complex and proprietary. But the basic concepts aren’t that hard. I bet any of the learners that completed our Coursera courses could implement one. &gt;&gt; Speaking of your Coursera courses, you all aren’t quite done yet. You still have to make the Capstone. &gt;&gt; The Capstone, so much for movie night. &gt;&gt; Hey, I bet a recommender system would make a great capstone. &gt;&gt; Yeah, the algorithm has real world uses for our learners. &gt;&gt; And they can make a webpage to go with it and let everyone see what they can do. &gt;&gt; Let’s get to it. &gt;&gt; I’m excited to provide a bit of background for our capstone project, a DIY or do it yourself recommendation engine. For finding recommendations and information about current movies. When you first visit the Coursera.com website, you’ll see recommendations like the ones you see here. Recommendations for every learner that include data science, Python, machine learning, and more. How does Coursera make these recommendations? Do they show you popular courses? That might increase the number of learners who participate well and completely. Perhaps they show you different recommendations based on what your browsing history is or what websites you visited. They might be able to do that if they partner with a business that knows information about you. In this capstone, we’ll write code to recommend movies based on different criteria, criteria based on user ratings of those movies. You might want to learn about programming from Coursera. You would ask the website for recommendations by searching for programming, thus filtering all the recommendations available to roughly 375 recommendations, based on the query programming. How does the engine behind the creation of this webpage decide what courses to show? Is it based on ratings, some other criteria? Note the third recommendation is for the first course in the specialization for this capstone. You can also get restaurant recommendations rather than programming recommendations. Suppose you’re going to be in San Francisco and you’re looking for Asian food near the financial district. You could use Yelp, an app and website for getting recommendation from users, that is diners. You could filter by location as I’ve shown here finding Asian food near San Francisco. These restaurants all have four stars. I filtered to find restaurants near the financial district, but you could filter based on price or other criteria. You can use Yelp in cities around the world. Diners from many countries can contribute ratings through Yelp so that other users can use these ratings to find information about restaurants in cities ranging from San Francisco to the Hague in the Netherlands. You may want to sort the data so that good recommendations appear near the top of the results. Sometimes these ratings are sorted by criteria other than how many stars they have. In this example you can see the first restaurant has fewer stars than the third restaurant. You can search by whether a restaurant is nearby or by recent ratings instead of total ratings. All this talk about restaurant ratings is making me hungry. Instead of restaurants you can also get recommendations about movies, and this is what you’ll write for this capstone project. The website twitflicks.com mines Twitter for tweets that include comments about current movies. These comments are turned into ratings that are made part of the input to your program. To use these ratings, you’d have to get them, parse them, and write a program to determine which movies someone should watch. Rather than using Twitflicks, we´ll use another Twitter based source of data that´s easier to parse. And you´ll be able to use these collected tweets, to explore recommendations. Instead of relying on your peers, you might decide to rely on movie critics, who have more experience rating movies. Instead of using your friends or regular viewers to decide whether to see a movie, you could rely on so called experts. These are critics who see movies and then rate them. The website Rotten Tomatoes aggregates these professional review and ratings and makes them available to everyone. This site uses average ratings as the basis by which to make recommendations to a user. You’ll be able to replicate some of this functionality in this Capstone experience. You’ll also be able to make recommendations by filtering based on genre, or co-stars, or by any other criteria. Those were recommendations based on critics rather than on viewers you know or your own ratings of movies. You might want to know what viewers like you watched, since the like you means that these people likely share some of your tastes in the kinds of movies that they’d watch. Netflix makes this easy, for example, by showing you recommendations based on what viewers, like you, are watching. You’ll be designing and writing classes to implement a recommendation engine that makes recommendations along the lines we’ve just discussed. Your program could make recommendations from many sources. Food, movies, books, or more. It just depends on the data that you read in. As we’ve told you, you’ll be making recommendations based on crowdsourced movie comments and ratings from Twitter posts. Your recommendations will take several forms. This is the URL for the webservice that provides live data that we’re using. But you’ll also be able to obtain all the ratings from our specialization website, dukelearntoprogram.com. You’ll write code to parse the recommendation ratings and movie data so that your program can make recommendations. Your recommendations could be like those found on Twitter or Yelp, based on ratings and averages of those ratings. This is a useful and straight forward coding exercise. Alternately, ratings and recommendations could be based on what Netflix or Amazon do. Find viewers or buyers similar to you and provide recommendations based on what these buyers purchase. In this case, you’ll be able to find users, like you, or like another viewer, as part of the code you’ll design and implement. Let’s get to it.</p><h2 id="Reading-and-Storing-Data"><a href="#Reading-and-Storing-Data" class="headerlink" title="Reading and Storing Data"></a>Reading and Storing Data</h2><p>Let’s discuss how the rating dating for creating recommendations about movies, is stored and accessed in the programs that you’ll be writing. You’ll be creating a sequence of recommendation programs as part of this capstone. The first step in creating programming recommendations is to get data about the items that can form the basis of the recommendations your program will generate. You will need to write programs to read the data into structures, your program can access and process to make recommendations. Although you won’t be using Yelp or Netflix data to generate your recommendations, you will be using Twitter data about movie recommendations, to write your own recommender program. You’ll do this as part of a sequence of exercises we’ve designed for this capstone. You’ll be using programming and design concepts from all of the courses you’ve taken, as part of this specialization to create these capstone Java programs. You’ll have access to a large number of ratings for thousands of movies. You’ll be using recommendations for movies that have come from Twitter posts, via a project called MovieTweetings. We’ve curated the data to provide a good learning experience for this capstone. You can get access to all of the data from the website associated with this URL. All the data will be updated frequently, based on new Tweets. The data you’ll use is stored in CSV files. So you’ll be using the packages from the edu.dukelibraries, an Apache CSV project to access this data. You’ll read the data and store the rating movie data in collections your program will access to create recommendations. You’ll start with simple storage techniques, and as you create more sophisticated recommendations, you’ll use more efficient data structures, using the software design principles you’ve learned in this specialization. You’ll use Plain Old Java Object, or POJO, to store the movie data. The movie.java class mirrors the CSV file storing the movie data. That CSV file contains one line of comma separated value data for each movie. The text shown here is a single line in the CSV file. Each line of the CSV file stores eight items of information about each movie. The first item is an IMDB or internet movie data base ID number, for the movie. The title of the movie is the next one on the line, followed by the year in which the movie was made, a country in which the movie was made, though sometimes there is more than one country. Then the genre of the movie, such as comedy, action, adventure, horror or more. There can also be more than one genre listed with the movie. Then there are the movie’s directors, followed by the length of the movie in minutes. This movie lasts about 126 minutes. And then finally, a URL for a poster image of the movie, such as the one you see here for the drama Good Will Hunting, created in 1997. You’ll read the CSV file and use the POJO class we’ve created, to store data for each movie. The Movie.java class has a constructor and several getter methods for accessing data about the movie. Once a movie object is created it doesn’t change. The get methods include, get title, get I.D., get year and more to access information about each movie. You will read this data using the edu.duke file resource class and the Apache CSV parser you’ve had practice with using. In addition to movie data, you’ll need data rating each movie. Another CSV file will store ratings for many movies. These ratings have been curated from the Twitter posts. Each line in the CSV file stores data for one rating, that is one rater on Twitter writing about a specific movie. Each line stores an ID for the person creating a rating, the IMDB Movie ID for the movie being rated, and the rating given to the movie on a scale of one to ten. The CSV file also stores information about the date and time, but we won’t use that number in the recommendations you’ll be creating. The Movie ID is key in obtaining information about the movie being rated. It can be used in the data structure you’ll create, when reading the movie CSV file we’ve already discussed. The Rater class supports several operations, so it’s more complex than a POJO, which would support only simple get operations. You’ll be able to determine if the rater has provided a rating for a specific movie, that’s a parameter to a boolean method, has rating. You’ll be able to obtain the rating for a movie specified by a movie I.D., using the method get rating, that returns a double. You’ll be able to add a rating, which you might do when reading the rating data CSV file, for example. And you’ll be able to get all the Movie IDs rated, so you can write code to iterate over all movies with ratings, see the Rater.java class file for details. Let’s summarize the three classes you’ll be using to read and store data to create recommendations. You’ll use Movie.java, Rater.java and Rating.java in creating programmatic recommendations, by reading CSV files and storing data in ArrayLists in this first part of the capstone project. The Rater.java class stores movie ratings for one rater. This might be ratings from several movies. Each of these rating objects stores the movie ID and the rating for that movie in an instance of the rating.java class. This makes both movie.java and rating.java POJO classes. Each has a constructor to create an object and get methods to access information about the movie or the rating. The Rater.java class supports queries about ratings made by one rater, like what movies have been rated, and what the rating for a specific movie is. That’s an overview of the first part of the capstone project.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;建立推荐系统，第一步，推荐系统简介。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java重学 第一咔</title>
    <link href="https://juoyo.github.io/posts/c00a178c.html"/>
    <id>https://juoyo.github.io/posts/c00a178c.html</id>
    <published>2020-09-21T06:35:21.000Z</published>
    <updated>2020-10-05T17:03:51.074Z</updated>
    
    <content type="html"><![CDATA[<p>Java重学</p><a id="more"></a><h2 id="1-面向对象思想"><a href="#1-面向对象思想" class="headerlink" title="1.面向对象思想"></a>1.面向对象思想</h2><p>面向对象–组织者</p><p>面向过程–执行者</p><p>三特性</p><p>封装-</p><p>继承-为复用，抽取公用东西作为父类，子类只需扩展特殊特性</p><p>多态-父类引用指向子类对象。首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</p><h2 id="2-基本数据类型"><a href="#2-基本数据类型" class="headerlink" title="2.基本数据类型"></a>2.基本数据类型</h2><p>boolean,char,byte,short,int,long,float,double</p><p><strong>注意：String是引用类型</strong></p><h2 id="3-和-equals的区别"><a href="#3-和-equals的区别" class="headerlink" title="3.== 和 equals的区别"></a>3.== 和 equals的区别</h2><p>== </p><p>比较基本类型时，比较的是值</p><p>比较引用类型时，比较的是引用指向的值（地址）</p><p>equals</p><p>默认比较地址</p><p>对应自定义类，若需要比较值，则重写equals</p><h2 id="4-final"><a href="#4-final" class="headerlink" title="4.final"></a>4.final</h2><p>修饰类，则类不可继承</p><p>修饰方法，则方法不可重写</p><p>修饰变量，则变量成为常量</p><p><font color="blue">注意:</font></p><p>修饰基本数据类型，则值本身不可修改。</p><p>修饰引用类型，则引用的指向不可修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Student student = <span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;Name&quot;</span>);</span><br><span class="line">student.setAge(<span class="number">18</span>);  <span class="comment">// 可</span></span><br><span class="line">student = <span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">&quot;N&quot;</span>);  <span class="comment">// 不可，student指向不可变</span></span><br></pre></td></tr></table></figure><h2 id="5-String、StringBuffer、StringBuilder"><a href="#5-String、StringBuffer、StringBuilder" class="headerlink" title="5.String、StringBuffer、StringBuilder"></a>5.String、StringBuffer、StringBuilder</h2><p>String不可变，因是final类型，每次操作产生新的String对象，然后将指针指向新对象。StringBuffer、StringBuilder可变，操作均在原对象上进行。</p><p>StringBuffer线程安全；StringBuilder线程不安全，性能高，实际开发中优先选择StringBuilder。</p><p>StringBuffer中所有方法都默认加了synchronized修饰，因此线程安全。</p><p>开发中使用StringBuilder解决什么问题？</p><p>一般用于字符串拼接，开发中每个线程访问一个StringBuilder，可使用。（HashMap同理）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder s = <span class="keyword">new</span> StringBuilder():</span><br><span class="line">s.append(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="6-接口和抽象类"><a href="#6-接口和抽象类" class="headerlink" title="6.接口和抽象类"></a>6.接口和抽象类</h2><p>分JDK讨论</p><p>JDK1.8之前：</p><ul><li><p>语法上</p><p>抽象类：有构造器，方法可有抽象的，也可有非抽象的</p><p>接口：方法都是抽象的，属性都是常量，默认public static final修饰</p></li><li><p>设计上</p><p>抽象类：同一类事物的抽取</p><p>接口：标准制定，定制对接标准</p></li></ul><p>JDK1.8之后：</p><p>​                接口里可有实现的方法，通过在方法声明上加default或者static（一般为空实现）</p><h2 id="7-转型"><a href="#7-转型" class="headerlink" title="7.转型"></a>7.转型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">向上转型</span><br><span class="line">Person person = <span class="keyword">new</span> Student();  安全的</span><br><span class="line"></span><br><span class="line">向下转型</span><br><span class="line">Teacher teacher = (Teacher)person;</span><br></pre></td></tr></table></figure><h2 id="8-缓存、装箱和拆箱"><a href="#8-缓存、装箱和拆箱" class="headerlink" title="8.缓存、装箱和拆箱"></a>8.缓存、装箱和拆箱</h2><ul><li><p>Integer和int的比较</p><p>比较的是数值，Integer自动拆箱，和其他无关。</p></li></ul><ul><li>Integer和Integer的比较<ul><li>使用new，就是开辟一块新内存，是新对象</li><li>不使用new，通过赋值，需要看范围。Integer做了缓存，-128至127范围内的数采用缓存的对象；不在范围内的，内部创建新对象。</li></ul></li></ul><h2 id="9-重载、重写"><a href="#9-重载、重写" class="headerlink" title="9.重载、重写"></a>9.重载、重写</h2><p>重载：发生在一个类中，方法名相同，<strong>参数列表不同</strong>。（和返回类型无关）</p><p>重写：发生在父子类之间，方法名相同，<strong>参数列表相同</strong>。</p><h2 id="10-ArrayList和LinkedList"><a href="#10-ArrayList和LinkedList" class="headerlink" title="10.ArrayList和LinkedList"></a>10.ArrayList和LinkedList</h2><ul><li><p>底层数据结构差异</p><p>ArrayList：数组实现，连续内存</p><p>LinkedList：双向链表，不连续内存</p></li><li><p>基础结论</p><p>ArrayList，查找快，插入、删除慢</p><p>LinkedList，查找慢，插入、删除快</p></li><li><p>ArrayList实现</p><ul><li><p>1.增加</p><p>正常直接添加到末尾，数组空间不足，需要扩容。数组初始化容量为10，建议直接设置初始化大小。</p></li></ul></li></ul><p>​                                    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩容：容量不足进行扩容，按原有容量1.5倍进行扩容。</span></span><br><span class="line"><span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再将原先数组的元素复制到新数组</span></span><br><span class="line">elementData = Arrays.copyOf(elementData, newCapacity);</span><br></pre></td></tr></table></figure><ul><li>LinkedList实现</li></ul><h2 id="11-HashSet存储原理"><a href="#11-HashSet存储原理" class="headerlink" title="11.HashSet存储原理"></a>11.HashSet存储原理</h2><p>HashSet底层使用HashMap实现，HashSet的值作为HashMap的key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Hash算法</li></ul><p>hash算法计算存储对象的hashcode，再跟array.length-1做位运算，得到数组下标。若对应下标处无其他元素，直接存储。若有，则不同对象计算的hash值相等，需要用equals方法进行比较。equals相等则不插入，不等则插入。</p><p><strong>equals用来比较的是两个对象的内容是否相等</strong>，基类Object中进行定义的equals方法源码（此时equals方法返回的是==的判断）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义类不重写equals，调用的仍是基类Object的equals。</p><ul><li>哈希表</li></ul><p>本质是一个数组，数组元素是链表。<strong>数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的</strong></p><p>JDK1.8优化，链表长度超过8，变红黑树。</p><h2 id="12-ArrayList和Vector"><a href="#12-ArrayList和Vector" class="headerlink" title="12.ArrayList和Vector"></a>12.ArrayList和Vector</h2><p>ArrayList：线程不安全，效率高，常用</p><p>Vector：Vector 继承AbstractList，实现了List，线程安全(使用synchronized修饰)，效率低，不常用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确定Vector的容量，synchronized上锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 将Vector的改变统计数+1</span></span><br><span class="line">         modCount++;</span><br><span class="line">         ensureCapacityHelper(minCapacity);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="13-Hash-Table、HashMap、ConcurrentHashMap"><a href="#13-Hash-Table、HashMap、ConcurrentHashMap" class="headerlink" title="13.Hash Table、HashMap、ConcurrentHashMap"></a>13.Hash Table、HashMap、ConcurrentHashMap</h2><p>HashTable线程安全对象，内部有上锁控制synchronized，效率低。</p><p>HashMap线程不安全对象，效率高。</p><p>了解：Collections.synchronizedMap()工具类提供同步包装器方法，返回具有线程安全的集合对象，内部单纯加锁。</p><p>ConcurrentHashMap(重点)</p><p>兼顾线程安全和效率，引入分段锁（锁粒度变小）。</p><p>分析：HashTable锁住整段数据，ConcurrentHashMap分段锁数据。</p><ul><li><p>实现</p><ol><li><p>数据结构</p><p>JDK1.7采用链表方式，JDK1.8采用链表+红黑树</p></li><li><p>hash碰撞后处理方式</p><p>1.7中，碰撞之后，用拉链法解决</p><p>1.8中，碰撞之后，默认使用拉链法；链表长度超过8，且数组容量超过64，将拉链表转换为红黑树存储。</p></li><li><p>保证并发安全的手段</p><p>1.7采用分段锁synchronized，1.8使用CAS和synchronized的组合</p></li><li><p>查询复杂度</p><p>1.7使用链表时时间复杂度为O(n)，1.8使用红黑树时O(long(n))</p></li></ol></li></ul><p>开发中选择：1.局部变量优先选择HashMap</p><p>​                        2.全局变量选择ConcurrentHashMap</p><h2 id="14-HashMap、LinkedHashMap（重点）"><a href="#14-HashMap、LinkedHashMap（重点）" class="headerlink" title="14.HashMap、LinkedHashMap（重点）"></a>14.HashMap、LinkedHashMap（重点）</h2><p> HashMap 采用一种“Hash 算法”来决定每个元素的存储位置。当程序执行 map.put(String,Obect)方法 时，系统将调用String的 hashCode() 方法得到其 hashCode 值，系统会根据该 hashCode 值来决定该元素的存储位置。</p><p>HashMap中key和value都允许为null。key为null的键值对永远都放在以table[0]为头结点的链表中。可以有一个或多个键所对应的值为null。</p><p><em>每个 Java 对象都有 hashCode() 方法，都可通过该方法获得它的 hashCode 值。</em></p><p>源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (key == <span class="keyword">null</span>)  </span><br><span class="line">          <span class="keyword">return</span> putForNullKey(value);  </span><br><span class="line">      <span class="keyword">int</span> hash = hash(key.hashCode());  </span><br><span class="line">      <span class="keyword">int</span> i = indexFor(hash, table.length);  </span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;  </span><br><span class="line">          Object k;  </span><br><span class="line">          <span class="comment">//判断当前确定的索引位置是否存在相同hashcode和相同key的元素，如果存在相同的hashcode和相同的key的元素，那么新值覆盖原来的旧值，并返回旧值。  </span></span><br><span class="line">          <span class="comment">//如果存在相同的hashcode，那么他们确定的索引位置就相同，这时判断他们的key是否相同，如果不相同，这时就是产生了hash冲突。  </span></span><br><span class="line">          <span class="comment">//Hash冲突后，那么HashMap的单个bucket里存储的不是一个 Entry，而是一个 Entry 链。  </span></span><br><span class="line">          <span class="comment">//系统只能必须按顺序遍历每个 Entry，直到找到想搜索的 Entry 为止——如果恰好要搜索的 Entry 位于该 Entry 链的最末端（该 Entry 是最早放入该 bucket 中），  </span></span><br><span class="line">          <span class="comment">//那系统必须循环到最后才能找到该元素。  </span></span><br><span class="line">          <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;  </span><br><span class="line">              V oldValue = e.value;  </span><br><span class="line">              e.value = value;  </span><br><span class="line">              <span class="keyword">return</span> oldValue;  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      modCount++;  </span><br><span class="line">      addEntry(hash, key, value, i);  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">  &#125;  </span><br></pre></td></tr></table></figure><p>HashMap内部维护了一个存储数据的Entry数组，HashMap采用链表解决冲突，每一个Entry本质上是一个单向链表。当准备添加一个key-value对时，首先通过hash(key)方法计算hash值，然后通过indexFor(hash,length)求该key-value对的存储位置，计算方法是先用hash&amp;0x7FFFFFFF后，再对length取模，这就保证每一个key-value对都能存入HashMap中，当计算出的位置相同时，由于存入位置是一个链表，则把这个key-value对插入链表头。</p><ul><li><p>HashMap</p><ol><li><p>初始化大小为16</p></li><li><p>最大装填因此为0.75，HashMap中元素个数达到容量的0.75，则扩容，扩容后容量变成之前的2倍。</p></li><li><p>HashMap底层采用链表法（拉链法）解决冲突。</p></li><li><p>JDK1.8引入红黑树，链表长度&gt;8，且数组容量&gt;64，链表转换为红黑树。</p><p>红黑树中节点数&lt;6，红黑树转换为链表。</p></li></ol></li></ul><ul><li><p>HashTable</p><p>Hashtable中，key和value都不允许出现null值。</p></li></ul><h2 id="15-IO流"><a href="#15-IO流" class="headerlink" title="15.IO流"></a>15.IO流</h2><h2 id="16-serialVersionUID的作用"><a href="#16-serialVersionUID的作用" class="headerlink" title="16.serialVersionUID的作用"></a>16.serialVersionUID的作用</h2><p>执行序列化时，写对象到磁盘会根据类结构生成一个版本号ID。</p><p>反序列化，程序会比较根据当前类结构生成的版本号ID和磁盘中ID是否一致，一致则反序列化成功，否则反序列化失败。</p><h2 id="17-Java异常"><a href="#17-Java异常" class="headerlink" title="17.Java异常"></a>17.Java异常</h2><p>Error是虚拟机内部错误</p><ul><li>栈内存溢出错误：StackOverflowError(递归，递归层次太多或递归没有结束)</li><li>堆内存溢出错误：OutOfMemoryError(堆创建了很多对象)</li></ul><p>Exception是程序错误</p><ul><li><p>RuntimeException，也称LogicException</p><p>通过完善我们的代码编程逻辑，来解决问题</p></li><li><p>非RuntimeException</p><p>通过使用try catch或者throws处理</p></li></ul><p>5个运行时异常</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">算数异常，</span><br><span class="line">空指针，</span><br><span class="line">类型转换异常，</span><br><span class="line">数组越界，</span><br><span class="line">NumberFormateException（数字格式异常，转换失败，比如“a12”就会转换失败）</span><br></pre></td></tr></table></figure><p>5个非运行时异常</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IOException，</span><br><span class="line">SQLException，</span><br><span class="line">FileNotFoundException,</span><br><span class="line">NoSuchFileException，</span><br><span class="line">NoSuchMethodException</span><br></pre></td></tr></table></figure><h2 id="18-throw和throws的区别"><a href="#18-throw和throws的区别" class="headerlink" title="18.throw和throws的区别"></a>18.throw和throws的区别</h2><p>throws作用于方法声明</p><p>throw作用于方法内</p><h2 id="19-创建线程的三种方式"><a href="#19-创建线程的三种方式" class="headerlink" title="19.创建线程的三种方式"></a>19.创建线程的三种方式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">继承Thread</span><br><span class="line">实现Runable接口</span><br><span class="line">实现Callable接口（可获得线程执行后的结果）</span><br></pre></td></tr></table></figure><p>案例：继承Thread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">    <span class="comment">// thread.run();  // 只调用当前线程的方法，没有开启新进程</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正确启动线程</span></span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例：实现runnable接口只是创建一个可执行任务，并没有新建线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.apache.examples;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: is running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread_Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyTask task = <span class="keyword">new</span> MyTask();</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();  <span class="comment">//task表达的是一个任务，需要启动新线程来执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例：实现Callable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.apache.examples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask2</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread_Callable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MyTask2 task2 = <span class="keyword">new</span> MyTask2();</span><br><span class="line">        task2.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20-线程的生命周期"><a href="#20-线程的生命周期" class="headerlink" title="20.线程的生命周期"></a>20.线程的生命周期</h2><h2 id="21-Sleep和wait的区别"><a href="#21-Sleep和wait的区别" class="headerlink" title="21.Sleep和wait的区别"></a>21.Sleep和wait的区别</h2><ul><li><p>所属类不同</p><p>sleep()定义在Thread类</p><p>wait()定义在Object类</p></li><li><p>对于锁资源处理方式不同</p><p>sleep()不释放锁</p><p>wait()释放锁</p></li></ul><h2 id="22-线程安全的理解"><a href="#22-线程安全的理解" class="headerlink" title="22.线程安全的理解"></a>22.线程安全的理解</h2><ul><li>理解</li></ul><p>多线程访问同一个对象，如果不用进行额外的同步控制，调用对象的方法都可以获得正确结果，则该对象是线程安全的。</p><ul><li>如何保证线程安全</li></ul><p>在源码中最常见的方式是，使用synchronized关键字给代码块或方法加锁。</p><p>比如StringBuffer源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="23-ThreadLocal理解"><a href="#23-ThreadLocal理解" class="headerlink" title="23.ThreadLocal理解"></a>23.ThreadLocal理解</h2><ul><li><p>作用</p><p>为每个线程创建一个副本，实现在线程上下文传递同一个对象，如connection</p></li><li><p>实验一：证明ThreadLocal为每个线程创建一个变量副本</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">作者：风清扬</span><br><span class="line">链接：https:<span class="comment">//zhuanlan.zhihu.com/p/59073114</span></span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//开启多个线程来执行任务</span></span><br><span class="line">        Task task = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Long result = threadLocal.get();</span><br><span class="line">            <span class="keyword">if</span>(result == <span class="keyword">null</span>)&#123;</span><br><span class="line">                threadLocal.set(System.currentTimeMillis());</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-&gt;&quot;</span>+threadLocal.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="green" size="4">输出结果不同，证实是两个线程</font></p><ul><li>底层如何实现为每个线程保存一个副本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Long result = threadLocal.get();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取当前线程</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//2，获取到当前线程对应的map</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//3.以threadLocal为key，获取到entry</span></span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="comment">//4.获取对应entry的value，就是我们存放到里面的变量的副本</span></span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threadLocal.set(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取到当前线程</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//2.获取当前线程对应的map</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//3.往map存放一个键值对</span></span><br><span class="line">            <span class="comment">//this ThreadLocal</span></span><br><span class="line">            <span class="comment">//value 保存的副本</span></span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用ThreadLocal.get方法时，实际上是从当前线程中获取ThreadLocalMap&lt;**ThreadLocal**, **Object**&gt;，然后根据当前ThreadLocal获取当前线程共享变量<strong>Object。</strong></p><h2 id="24-ThreadLocal使用场景"><a href="#24-ThreadLocal使用场景" class="headerlink" title="24.ThreadLocal使用场景"></a>24.ThreadLocal使用场景</h2><p><strong>前置知识：不管是什么框架，最本质的操作都是基于JDBC，当我们需要跟数据库打交道的时候，都需要有一个connection。</strong></p><p>mybatis管理sqlsession，其内部都是采用ThreadLocal来实现的。</p><p>两个dao操作不同的connection不能保证service的事务控制。</p><p>所以，我们保证是同个connection即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事务的边界放在业务层</span></span><br><span class="line"><span class="comment">//JDBC的封装，connection</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">new</span> Connection();</span><br><span class="line">    userDao.add(connection);</span><br><span class="line">    logDao.add(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更优雅的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span>(connection == <span class="keyword">null</span>)&#123;</span><br><span class="line">            connection = <span class="keyword">new</span> Connection();</span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao add。。。&quot;</span>);</span><br><span class="line">        <span class="comment">//创建connection对象</span></span><br><span class="line">        <span class="comment">//connection.commit();</span></span><br><span class="line">        <span class="comment">//connection.rollback();</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao-&gt;&quot;</span>+connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="25-类加载机制"><a href="#25-类加载机制" class="headerlink" title="25.类加载机制"></a>25.类加载机制</h2><h3 id="25-1-什么是类的加载机制？"><a href="#25-1-什么是类的加载机制？" class="headerlink" title="25.1  什么是类的加载机制？"></a>25.1  什么是类的加载机制？</h3><p>Java源文件-&gt;编译-&gt;.class文件</p><p>类加载器ClassLoader读取.class文件，并将其转化为java.lang.Class的实例。</p><p>类加载器ClassLoader如何加载class？–类加载机制</p><h3 id="25-2-class文件有哪些来源"><a href="#25-2-class文件有哪些来源" class="headerlink" title="25.2  class文件有哪些来源"></a>25.2  class文件有哪些来源</h3><ol><li>Java内部的核心类，位于$JAVA_HOME/jre/lib</li><li>Java的扩展类，位于$JAVA_HOME/jre/lib/ext目录下</li><li>编写的类或第三方jar包</li></ol><h3 id="25-3-JDK分工加载三种class"><a href="#25-3-JDK分工加载三种class" class="headerlink" title="25.3  JDK分工加载三种class"></a>25.3  JDK分工加载三种class</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Java核心类  --  BootstrapClassLoader加载器（根加载器或引导加载器）</span><br><span class="line"></span><br><span class="line">Java扩展类  --  ExtClassLoader加载器（扩展类加载器）</span><br><span class="line"></span><br><span class="line">编写的类  --  AppClassLoader加载器（系统类加载器”）</span><br></pre></td></tr></table></figure><p>所谓双亲委托机制，就是加载一个类，会先获取到一个系统类加载器AppClassLoader的实例，然后往上层层请求，先由BootstarpClassLoader去加载，如果BootStrapClassLoader发现没有，再下发给ExtClassLoader去加载，还是没有，才由AppClassLoader去加载。如果还是没有，则报错。</p><h2 id="26-Servlet"><a href="#26-Servlet" class="headerlink" title="26.Servlet"></a>26.Servlet</h2><h2 id="27-Session和Cookie"><a href="#27-Session和Cookie" class="headerlink" title="27.Session和Cookie"></a>27.Session和Cookie</h2><ol><li>存储位置不同</li></ol><p>Session存储在服务器；Cookie存储在客户端</p><ol start="2"><li>存储的数据格式不同</li></ol><p>Session：value为对象</p><p>Cookie：value为字符串</p><ol start="3"><li>存储数据的大小限制不同</li></ol><p>Session：受服务器内存影响</p><p>Cookie：受浏览器影响，最大为4k</p><ol start="4"><li>生命周期不同</li></ol><p>Session：默认为30分钟</p><p>Cookie：由客户端控制，实际为客户端的一个文件，分两种情况：</p><ol><li>默认是会话级cookie，随浏览器关闭而消失，比如保存session的cookie</li><li>非会话级cookie，可设置有效期，setMaxAge</li></ol><p>联系：http协议是一种无状态协议，Session机制背后的原理是，服务器会自动生成会话级的cookie来保存session的标识（sessionId）。</p><h2 id="28-业务分层"><a href="#28-业务分层" class="headerlink" title="28.业务分层"></a>28.业务分层</h2><p>Web交互层</p><p>业务逻辑层</p><p>数据存储层</p><h2 id="29-MVC理解"><a href="#29-MVC理解" class="headerlink" title="29.MVC理解"></a>29.MVC理解</h2><p>M-模型，代表一个存储数据的对象</p><p>V-视图，代表模型包含数据的可视化，如HTML</p><p>C-控制器，作用于模型和视图上，控制数据流向模型对象，并在数据变化时更新视图，代表技术是Controller</p><p>DispatchServlet前端控制器，接受客户端请求，根据客户端请求的URL，分发到对应的业务控制器（如UserController）</p><h2 id="30-序列化"><a href="#30-序列化" class="headerlink" title="30.序列化"></a>30.序列化</h2><p>保持对象在内存中的状态，并可把保存的对象状态进行恢复。</p><p>java序列化场景：</p><ol><li>需将内存中的对象保存到文件</li><li>通过socket通信传输对象</li><li>系统拆分为多个服务后，服务之间传输对象，需要序列化</li></ol><h2 id="31-数据库设计的三大范式、反范式"><a href="#31-数据库设计的三大范式、反范式" class="headerlink" title="31.数据库设计的三大范式、反范式"></a>31.数据库设计的三大范式、反范式</h2><p>1.数据库的三大范式</p><ul><li><p>第一范式</p><p>列不可分</p></li><li><p>第二范式</p><p>有主键</p></li><li><p>第三范式</p><p>不存在传递依赖</p></li></ul><p>2.反范式</p><p> 反范式优点：</p><ol><li><p>提高查询效率</p><p>为提高查询效率，通过冗余一个商品名称字段，可将表关联查询转换为单表查询。</p></li><li><p>保存历史快照信息</p><p>比如订单表，收货人各种信息都属于历史快照，需要冗余保存。不能只通过用户地址ID去关联查询，因为收货人信息可能在后期变更。</p></li></ol><h2 id="32-常用聚合函数"><a href="#32-常用聚合函数" class="headerlink" title="32.常用聚合函数"></a>32.常用聚合函数</h2><p>count(* | 列)</p><p>sum(列)</p><p>avg(列)</p><p>max(列)</p><p>min(列)</p><h2 id="33-左连接、右连接、内连接"><a href="#33-左连接、右连接、内连接" class="headerlink" title="33.左连接、右连接、内连接"></a>33.左连接、右连接、内连接</h2><p><strong>左连接：以左表为主</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.*,b.* from a left join b on a.id &#x3D; b.id</span><br></pre></td></tr></table></figure><p><strong>右连接：以右表为主</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.*,b.* from a right join b on a.id &#x3D; b.id;</span><br></pre></td></tr></table></figure><p><strong>内连接：只列出两张表关联查询符合条件的记录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.*, b.* from a inner join b on a.id&#x3D;b.id;</span><br></pre></td></tr></table></figure><h2 id="34-JDBC如何实现事务控制"><a href="#34-JDBC如何实现事务控制" class="headerlink" title="34.JDBC如何实现事务控制"></a>34.JDBC如何实现事务控制</h2><p>JDBC对事务的操作是基于Connection来控制的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 事务操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    connection.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection.rollback();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">        e1.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事务边界在业务层进行控制，因为业务层通常包含多个dao操作。</p><h2 id="35-事务的特点"><a href="#35-事务的特点" class="headerlink" title="35.事务的特点"></a>35.事务的特点</h2><p>ACID</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原子性（ Atomicity ）、一致性（ Consistency ）、隔离性（ Isolation ）和持久性（ Durability ）</span><br></pre></td></tr></table></figure><p>日志包括回滚日志（undo）和重做日志(redo)。</p><p>重做日志：当我们通过事务修改数据时，首先会将数据库变化的信息记录到重做日志中，然后再对数据库中的数据进行修改。这样即使数据库系统发生奔溃，我们还可以通过重做日志进行数据恢复。</p><p>回滚日志：保存事务发生之前的数据版本</p><h2 id="36-事务的隔离级别"><a href="#36-事务的隔离级别" class="headerlink" title="36.事务的隔离级别"></a>36.事务的隔离级别</h2><p>4级别</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. READ UNCOMMITTED 读未提交，脏读、不可重复读、幻读有可能发生。</span><br><span class="line">2. READ COMMITTED 读已提交，可避免脏读的发生，但不可重复读、幻读有可能发生。</span><br><span class="line">3. REPEATABLE READ 可重复读，可避免脏读、不可重复读的发生，但幻读有可能发生。</span><br><span class="line">4. SERIALIZABLE 串行化，可避免脏读、不可重复读、幻读的发生，但性能会影响比较大。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="37-synchronized和volatile的区别"><a href="#37-synchronized和volatile的区别" class="headerlink" title="37.synchronized和volatile的区别"></a>37.synchronized和volatile的区别</h2><ol><li><p>作用位置不同</p><p>synchronized修饰方法、代码块</p><p>volatile修饰变量</p></li><li><p>作用不同</p><p>synchronized变量修改可见，原子性，可能造成线程阻塞</p><p>volatile仅变量修改可见，无原子性，不造成线程阻塞</p></li></ol><h2 id="38-synchronized和lock的区别"><a href="#38-synchronized和lock的区别" class="headerlink" title="38.synchronized和lock的区别"></a>38.synchronized和lock的区别</h2><ol><li><p>作用位置不同</p><p>synchronized可给方法、代码块加锁</p><p>lock只能给代码块加锁</p></li><li><p>锁机制不同</p><p>synchronized无需手动获取、释放锁，发生异常自动解锁，不出现死锁</p><p>lock需程序员获取和释放锁，如lock.lock()、lock.unlock()，未手动释放锁可能出现死锁。</p><p><code>**提示：unlock()可放在finally中**</code></p></li></ol><table><thead><tr><th>名称</th><th>修饰对象</th><th>效果</th></tr></thead><tbody><tr><td>synchronized</td><td>成员方法</td><td>默认锁当前对象</td></tr><tr><td>synchronized</td><td>静态方法</td><td>默认锁当前类的class对象，如User.class</td></tr><tr><td>synchronized</td><td>代码块</td><td>可手动设置锁对象，如synchronized(this)</td></tr></tbody></table><h2 id="39-深拷贝、浅拷贝"><a href="#39-深拷贝、浅拷贝" class="headerlink" title="39.深拷贝、浅拷贝"></a>39.深拷贝、浅拷贝</h2><p>浅拷贝：只拷贝值类型的成员变量，不复制引用类型成员。</p><p>深拷贝：除了复制对象本身之外，也会复制对象包含的所有成员变量，包括引用类型成员对象。</p><h2 id="40-什么是死锁，怎么防止死锁"><a href="#40-什么是死锁，怎么防止死锁" class="headerlink" title="40.什么是死锁，怎么防止死锁"></a>40.什么是死锁，怎么防止死锁</h2><ol><li>死锁定义</li></ol><p>线程A和线程B相互持有对方需要的锁，从而发生阻塞，最终变为死锁。</p><p>死锁示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object a = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object b = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Task task1 = new Task(true);</span></span><br><span class="line">        <span class="comment">// Task task2 = new Task(false);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Task(<span class="keyword">true</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Task(<span class="keyword">false</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt; 获取到a资源&quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt; 获取到b资源&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt; 获取到b资源&quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt;获取到a资源&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread-0-&gt; 获取到a资源</span><br><span class="line">Thread-1-&gt; 获取到b资源</span><br><span class="line"></span><br><span class="line">Process finished with exit code -1</span><br></pre></td></tr></table></figure><ol start="2"><li>防止死锁</li></ol><ul><li>减少同步代码嵌套</li><li>降低锁的使用粒度</li><li>采用tryLock方法，可设置超市时间，超时后自动释放锁，可防止死锁。</li></ul><h2 id="41-反射"><a href="#41-反射" class="headerlink" title="41.反射"></a>41.反射</h2><p>反射是一种能力，指在程序运行时动态获取当前类的所有属性和方法，可动态执行方法，给属性赋值等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.apache.examples.reflact;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflaction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.以class对象为基础</span></span><br><span class="line">        Class&lt;?&gt; cl = Class.forName(<span class="string">&quot;com.apache.examples.reflact.Student&quot;</span>);</span><br><span class="line">        System.out.println(cl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.类中每一部分都有对应的类与之对应</span></span><br><span class="line">        <span class="comment">// 表示属性类</span></span><br><span class="line">        Field nameField = cl.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表示方法类</span></span><br><span class="line">        Method hellMethod = cl.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表示构造方法类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = cl.getConstructors();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="42-Spring认识"><a href="#42-Spring认识" class="headerlink" title="42.Spring认识"></a>42.Spring认识</h2><p>IOC，重点是解耦</p><p>AOP，非核心业务抽离</p><p>方便融合主流框架</p><h2 id="43-Spring的bean的作用域"><a href="#43-Spring的bean的作用域" class="headerlink" title="43.Spring的bean的作用域"></a>43.Spring的bean的作用域</h2><ol><li>默认singleton，即单例模式</li><li>prototype，每次调用bean时都创建一个新对象</li><li>request，一个http请求创建一个对象</li><li>session</li><li>global-session</li></ol><h2 id="44-Spring的bean是线程安全的吗"><a href="#44-Spring的bean是线程安全的吗" class="headerlink" title="44.Spring的bean是线程安全的吗"></a>44.Spring的bean是线程安全的吗</h2><p>是线程安全。</p><p>回顾，造成线程不安全的三个必备要素：</p><ol><li>多线程环境</li><li>访问同一个资源</li><li>资源具有状态性</li></ol><p>bean满足1、2条件，bean是无状态的，因此线程安全</p><p>无状态指的是，没有存储数据，即没有通过数据的状态来作为下一步操作的条件</p><h2 id="45-悲观锁、乐观锁"><a href="#45-悲观锁、乐观锁" class="headerlink" title="45.悲观锁、乐观锁"></a>45.悲观锁、乐观锁</h2><h2 id="46-MyBatis缓存机制"><a href="#46-MyBatis缓存机制" class="headerlink" title="46.MyBatis缓存机制"></a>46.MyBatis缓存机制</h2><p>缓存，作用提高查询</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java重学&lt;/p&gt;</summary>
    
    
    
    <category term="Java求生" scheme="https://juoyo.github.io/categories/Java%E6%B1%82%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>生产力工具 Git使用入门</title>
    <link href="https://juoyo.github.io/posts/74486071.html"/>
    <id>https://juoyo.github.io/posts/74486071.html</id>
    <published>2020-07-27T13:02:50.000Z</published>
    <updated>2021-06-01T10:52:53.901Z</updated>
    
    <content type="html"><![CDATA[<p>Git同步本地文件到GitHub。</p><a id="more"></a><h3 id="从命令行推送新建项目到远程"><a href="#从命令行推送新建项目到远程" class="headerlink" title="从命令行推送新建项目到远程"></a>从命令行推送新建项目到远程</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.从github复制仓库地址</span><br><span class="line"></span><br><span class="line">2.在本地文件夹目录执行初始化命令</span><br><span class="line">git init </span><br><span class="line"></span><br><span class="line">3.添加项目文件</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">4.提交，并附带说明</span><br><span class="line">git commit -m &quot;提交说明&quot;</span><br><span class="line"></span><br><span class="line">5.连接远程地址</span><br><span class="line">git remote add origin https://github.com/juoyo/Test.git</span><br><span class="line"></span><br><span class="line">6.推送到远程</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送到远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改。</p><p><font color="green">注意：本地文件夹内容和远程内容不同时，合并产生冲突，”第6步推送到远程”操作可能失败。在第6步前执行git pull origin master –allow-unrelated-histories</font></p><h3 id="从命令行推送现有项目到远程"><a href="#从命令行推送现有项目到远程" class="headerlink" title="从命令行推送现有项目到远程"></a>从命令行推送现有项目到远程</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/juoyo/Test.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="删除-git文件（为重新初始化）"><a href="#删除-git文件（为重新初始化）" class="headerlink" title="删除.git文件（为重新初始化）"></a>删除.git文件（为重新初始化）</h3><p>rm -rf .git</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>查看历史记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>根据版本号回滚</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Git同步本地文件到GitHub。&lt;/p&gt;</summary>
    
    
    
    <category term="生产力工具" scheme="https://juoyo.github.io/categories/%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Git" scheme="https://juoyo.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java Tricks</title>
    <link href="https://juoyo.github.io/posts/66b71a7b.html"/>
    <id>https://juoyo.github.io/posts/66b71a7b.html</id>
    <published>2020-07-16T16:40:37.000Z</published>
    <updated>2021-03-16T14:27:00.809Z</updated>
    
    <content type="html"><![CDATA[<p>Java Tricks!</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java Tricks!&lt;/p&gt;</summary>
    
    
    
    <category term="Java求生" scheme="https://juoyo.github.io/categories/Java%E6%B1%82%E7%94%9F/"/>
    
    
    <category term="tricks" scheme="https://juoyo.github.io/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>Python Tricks</title>
    <link href="https://juoyo.github.io/posts/ed67cc57.html"/>
    <id>https://juoyo.github.io/posts/ed67cc57.html</id>
    <published>2020-07-16T16:40:17.000Z</published>
    <updated>2021-03-16T14:26:10.903Z</updated>
    
    <content type="html"><![CDATA[<p>Python备忘</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python备忘&lt;/p&gt;</summary>
    
    
    
    <category term="Python求生" scheme="https://juoyo.github.io/categories/Python%E6%B1%82%E7%94%9F/"/>
    
    
    <category term="tricks" scheme="https://juoyo.github.io/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>Java后端 redis数据结构和应用</title>
    <link href="https://juoyo.github.io/posts/ba1487a3.html"/>
    <id>https://juoyo.github.io/posts/ba1487a3.html</id>
    <published>2020-07-08T03:25:23.000Z</published>
    <updated>2020-07-08T13:47:19.068Z</updated>
    
    <content type="html"><![CDATA[<p>redis基本数据结构包括：string、hash、list、set、zset。</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;redis基本数据结构包括：string、hash、list、set、zset。&lt;/p&gt;</summary>
    
    
    
    <category term="Java求生" scheme="https://juoyo.github.io/categories/Java%E6%B1%82%E7%94%9F/"/>
    
    
    <category term="Java" scheme="https://juoyo.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://juoyo.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="redis" scheme="https://juoyo.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>基础算法 切题姿势</title>
    <link href="https://juoyo.github.io/posts/f81d45b4.html"/>
    <id>https://juoyo.github.io/posts/f81d45b4.html</id>
    <published>2020-05-28T14:11:40.000Z</published>
    <updated>2020-09-10T05:05:59.297Z</updated>
    
    <content type="html"><![CDATA[<p>切题模板，强记！</p><a id="more"></a><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="1-递归"><a href="#1-递归" class="headerlink" title="1. 递归"></a>1. 递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursion</span>(<span class="params">level, param1, param2. ...</span>)</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    # <span class="title">recursion</span> <span class="title">terminator</span> 递归终止条件</span></span><br><span class="line"><span class="function"> <span class="title">if</span> <span class="title">level</span> &gt; <span class="title">MAX_LEVEL</span>:</span></span><br><span class="line">    print_result</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># process logic in current level</span></span><br><span class="line">    process_data(level, data...)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># drill down</span></span><br><span class="line">    self.recursion(level + <span class="number">1</span>, p1, p2, ...)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># reverse the current level status if needed</span></span><br><span class="line">    reverse_state(level)</span><br></pre></td></tr></table></figure><hr><h3 id="2-DFS代码"><a href="#2-DFS代码" class="headerlink" title="2. DFS代码"></a>2. DFS代码</h3><p>递归写法（推荐）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">visited = <span class="built_in">set</span>()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">node, visited</span>):</span></span><br><span class="line">    visited.add(node)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># process(node).</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> next_node <span class="keyword">in</span> node.children():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> next_node <span class="keyword">in</span> visited:</span><br><span class="line">            dfs(next_node, visited)</span><br></pre></td></tr></table></figure><p>非递归写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS</span>(<span class="params">self, tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> tree.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    stack = [tree.root]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        visited.add(node)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># process(node)</span></span><br><span class="line">        </span><br><span class="line">        nodes = generate_related_unvisited_nodes(node)</span><br><span class="line">        stack.push(nodes)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># other processing work</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-BFS代码"><a href="#3-BFS代码" class="headerlink" title="3. BFS代码"></a>3. BFS代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span>(<span class="params">graph, start, end</span>):</span></span><br><span class="line">    queue = []</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    queue.append([start])</span><br><span class="line">    visited.add(start)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        node = queue.pop()</span><br><span class="line">        visited.add(node)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># process(node)</span></span><br><span class="line">        </span><br><span class="line">        nodes = generate_related_unvisited_nodes(node)</span><br><span class="line">        queue.push(nodes)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># other processing work</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><hr><h3 id="4-二分查找"><a href="#4-二分查找" class="headerlink" title="4. 二分查找"></a>4. 二分查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">left, right = <span class="number">0</span>, <span class="built_in">len</span>(array) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> left &lt;= right:</span><br><span class="line">    mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> array[mid] == target:</span><br><span class="line">        <span class="keyword">break</span> <span class="keyword">or</span> <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">elif</span> array[mid] &lt; target:</span><br><span class="line">        left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        right = mid - <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="5-DP"><a href="#5-DP" class="headerlink" title="5. DP"></a>5. DP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 状态定义</span></span><br><span class="line">dp = [m + <span class="number">1</span>][n + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始状态</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = x</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>] = y</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># DP状态的推导</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, m + <span class="number">1</span>):</span><br><span class="line">        dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>], etc.)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">return</span> dp[m][n] <span class="comment"># 最优解</span></span><br></pre></td></tr></table></figure><hr><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="1-回溯算法"><a href="#1-回溯算法" class="headerlink" title="1.回溯算法"></a>1.回溯算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">路径， 选择列表</span>):</span></span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">        <span class="comment"># 做选择</span></span><br><span class="line">        将该选择从选择列表中移除</span><br><span class="line">        路径.add(选择)</span><br><span class="line">        </span><br><span class="line">        backtrack(路径， 选择列表)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 撤销选择</span></span><br><span class="line">        路径.remove(选择)</span><br><span class="line">        将该选择再加入到选择列表中</span><br></pre></td></tr></table></figure><hr><h3 id="2-计算图中最短距离-BFS"><a href="#2-计算图中最短距离-BFS" class="headerlink" title="2.计算图中最短距离(BFS)"></a>2.计算图中最短距离(BFS)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算从起点start到终点target的最短距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span>(<span class="params">graph, start, target</span>):</span></span><br><span class="line">queue = []</span><br><span class="line">visited = <span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    queue.append(start)  <span class="comment"># 将起点加入到队列中</span></span><br><span class="line">    visited.add(start)</span><br><span class="line">    step = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(queue)):</span><br><span class="line">            cur_node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> cur_node <span class="keyword">is</span> target:</span><br><span class="line">                <span class="keyword">return</span> step</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 将cur_node相邻节点中未被访问的加入队列</span></span><br><span class="line">            <span class="keyword">for</span> (node <span class="keyword">in</span> graph[cur_node]):</span><br><span class="line">                <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    queue.append(node)</span><br><span class="line">                    visited.add(x)</span><br><span class="line">        <span class="comment"># 更新步长 </span></span><br><span class="line">        step = step + <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;切题模板，强记！&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="切题" scheme="https://juoyo.github.io/tags/%E5%88%87%E9%A2%98/"/>
    
    <category term="模版" scheme="https://juoyo.github.io/tags/%E6%A8%A1%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>力扣经典清单1 初级算法</title>
    <link href="https://juoyo.github.io/posts/c985b81e.html"/>
    <id>https://juoyo.github.io/posts/c985b81e.html</id>
    <published>2020-05-02T13:37:46.000Z</published>
    <updated>2020-05-11T15:04:03.459Z</updated>
    
    <content type="html"><![CDATA[<p>编程能力就像任何其他技能一样，也是一个可以通过<code>刻意练习</code>大大提高的。</p><p>初级算法 - 帮助入门</p><a id="more"></a><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h3><p>给定一个排序数组，你需要在**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95"> 原地</a>** 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地 </a>修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># i记录最后一个不同数的下标</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != nums[i]:  <span class="comment"># 遍历直到找到一个和当前最后不同数不一样的新数，新数作为当前最后的不同数的下标</span></span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><hr><h3 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h3><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p><p>注意：你不能在买入股票前卖出股票。</p><p>Python动态规划</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> prices == []:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># res[i]表示截止到第i天的最大利润</span></span><br><span class="line">        res = [<span class="number">0</span>] * <span class="built_in">len</span>(prices)</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(prices)):</span><br><span class="line">            res[i] = <span class="built_in">max</span>(res[i - <span class="number">1</span>], prices[i] - <span class="built_in">min</span>(prices[<span class="number">0</span> : i]))</span><br><span class="line">        <span class="keyword">return</span> res[<span class="built_in">len</span>(prices) - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>Python贪心</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> prices == []:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">import</span> math</span><br><span class="line">        temp_min = math.inf</span><br><span class="line">        temp_max = -math.inf</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(prices)):</span><br><span class="line">            temp_min = <span class="built_in">min</span>(temp_min, prices[i])</span><br><span class="line">            temp_max = <span class="built_in">max</span>(temp_max, prices[i] - temp_min)</span><br><span class="line">        <span class="keyword">return</span> temp_max</span><br></pre></td></tr></table></figure><hr><h3 id="买卖股票的最佳时机-II"><a href="#买卖股票的最佳时机-II" class="headerlink" title="买卖股票的最佳时机 II"></a>买卖股票的最佳时机 II</h3><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>Python贪心</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(prices) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> prices[i] &lt; prices[i + <span class="number">1</span>]:</span><br><span class="line">                res = res + (prices[i + <span class="number">1</span>] - prices[i])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><hr><h3 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h3><p>给定一个数组，将数组中的元素向右移动 <em>k</em> 个位置，其中 <em>k</em> 是非负数。</p><p><strong>示例 1:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5,6,7] 和 k = 3</span><br><span class="line">输出: [5,6,7,1,2,3,4]</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: [7,1,2,3,4,5,6]</span><br><span class="line">向右旋转 2 步: [6,7,1,2,3,4,5]</span><br><span class="line">向右旋转 3 步: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure><p>Python暴力（超时）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span>(<span class="params">self, nums, k</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, k):</span><br><span class="line">            temp = nums[-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">                nums[j] = nums[j - <span class="number">1</span>]</span><br><span class="line">            nums[<span class="number">0</span>] = temp</span><br></pre></td></tr></table></figure><p>Java暴力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[nums.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = nums.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            nums[<span class="number">0</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="存在重复元素"><a href="#存在重复元素" class="headerlink" title="存在重复元素"></a>存在重复元素</h3><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果任意一值在数组中出现至少两次，函数返回 <code>true</code> 。如果数组中每个元素都不相同，则返回 <code>false</code> 。</p><p>java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    <span class="function">def <span class="title">containsDuplicate</span><span class="params">(self, nums: List[<span class="keyword">int</span>])</span> -&gt; bool:</span></span><br><span class="line"><span class="function">        <span class="keyword">if</span> <span class="title">len</span><span class="params">(nums)</span> &lt;</span>= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> False</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(<span class="number">0</span>, len(nums)</span> - 1):</span></span><br><span class="line"><span class="function">            <span class="keyword">if</span> nums[i] </span>== nums[i + <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> True</span><br><span class="line">        <span class="keyword">return</span> False</span><br></pre></td></tr></table></figure><hr><h3 id="只出现一次的数字"><a href="#只出现一次的数字" class="headerlink" title="只出现一次的数字"></a>只出现一次的数字</h3><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p><strong>说明：</strong></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p>Python异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            nums[<span class="number">0</span>] = nums[<span class="number">0</span>] ^ nums[i]</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="两个数组的交集-II"><a href="#两个数组的交集-II" class="headerlink" title="两个数组的交集 II"></a>两个数组的交集 II</h3><p>给定两个数组，编写一个函数来计算它们的交集。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">输出: [2,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">输出: [4,9]</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li><li>我们可以不考虑输出结果的顺序。</li></ul><p><strong><em>\</em>进阶:**</strong></p><ul><li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li><li>如果 <em>nums1</em> 的大小比 <em>nums2</em> 小很多，哪种方法更优？</li><li>如果 <em>nums2</em> 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li></ul><p>Python哈希映射</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersect</span>(<span class="params">self, nums1: List[<span class="built_in">int</span>], nums2: List[<span class="built_in">int</span>]</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums1) &gt; <span class="built_in">len</span>(nums2):</span><br><span class="line">            temp = nums1</span><br><span class="line">            nums1 = nums2</span><br><span class="line">            nums2 = temp</span><br><span class="line">        nums1_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums1:</span><br><span class="line">            nums1_dict[i] = nums1_dict.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> nums2:</span><br><span class="line">            <span class="keyword">if</span> nums1_dict.get(j, <span class="number">0</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                res.append(j)</span><br><span class="line">                nums1_dict[j] = nums1_dict[j] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><hr><h3 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h3><p>给定一个由<strong>整数</strong>组成的<strong>非空</strong>数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><strong>示例 1:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">解释: 输入数组表示数字 <span class="number">123</span>。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出: [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">解释: 输入数组表示数字 <span class="number">4321</span>。</span><br></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span>(<span class="params">self, digits: List[<span class="built_in">int</span>]</span>) -&gt; List[int]:</span></span><br><span class="line">        d = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(digits)):</span><br><span class="line">            d = <span class="number">10</span> * d + digits[i]</span><br><span class="line">        d = d + <span class="number">1</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">str</span>(d):</span><br><span class="line">            res.append(<span class="built_in">int</span>(j))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><hr><h3 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>说明</strong>:</p><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">                    <span class="keyword">if</span> nums[j] != <span class="number">0</span>:</span><br><span class="line">                        nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure><hr><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>Python哈希</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="built_in">dict</span> = &#123;&#125;  <span class="comment"># 元素 ： 序号</span></span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            another_num = target - num</span><br><span class="line">            <span class="keyword">if</span> another_num <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">                <span class="keyword">return</span> [<span class="built_in">dict</span>[another_num], i]</span><br><span class="line">            <span class="built_in">dict</span>[num] = i</span><br></pre></td></tr></table></figure><hr><h3 id="有效的数独"><a href="#有效的数独" class="headerlink" title="有效的数独"></a>有效的数独</h3><p>判断一个 9x9 的数独是否有效。只需要<strong>根据以下规则</strong>，验证已经填入的数字是否有效即可。</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。</li></ol><p>数独部分空格内已填入了数字，空白格用 <code>&#39;.&#39;</code> 表示。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">输出: false</span><br><span class="line">解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。</span><br><span class="line">     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>一个有效的数独（部分已被填充）不一定是可解的。</li><li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li><li>给定数独序列只包含数字 <code>1-9</code> 和字符 <code>&#39;.&#39;</code> 。</li><li>给定数独永远是 <code>9x9</code> 形式的。</li></ul><hr><h3 id="旋转图像"><a href="#旋转图像" class="headerlink" title="旋转图像"></a>旋转图像</h3><p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵表示一个图像。</p><p>将图像顺时针旋转 90 度。</p><p><strong>说明：</strong></p><p>你必须在**<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a><strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。</strong>请不要**使用另一个矩阵来旋转图像。</p><p><strong>示例 1:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">给定 matrix = </span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [4,5,6],</span><br><span class="line">  [7,8,9]</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">原地旋转输入矩阵，使其变为:</span><br><span class="line">[</span><br><span class="line">  [7,4,1],</span><br><span class="line">  [8,5,2],</span><br><span class="line">  [9,6,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">给定 matrix =</span><br><span class="line">[</span><br><span class="line">  [ 5, 1, 9,11],</span><br><span class="line">  [ 2, 4, 8,10],</span><br><span class="line">  [13, 3, 6, 7],</span><br><span class="line">  [15,14,12,16]</span><br><span class="line">], </span><br><span class="line"></span><br><span class="line">原地旋转输入矩阵，使其变为:</span><br><span class="line">[</span><br><span class="line">  [15,13, 2, 5],</span><br><span class="line">  [14, 3, 4, 1],</span><br><span class="line">  [12, 6, 8, 9],</span><br><span class="line">  [16, 7,10,11]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Python先转置再逆序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotate</span>(<span class="params">self, matrix: List[List[<span class="built_in">int</span>]]</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> j &gt; i:</span><br><span class="line">                    matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">            matrix[i] = matrix[i][::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix</span><br></pre></td></tr></table></figure><hr><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><hr><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><hr><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><hr><h2 id="排序和搜索"><a href="#排序和搜索" class="headerlink" title="排序和搜索"></a>排序和搜索</h2><hr><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><hr><h2 id="设计问题"><a href="#设计问题" class="headerlink" title="设计问题"></a>设计问题</h2><hr><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;编程能力就像任何其他技能一样，也是一个可以通过&lt;code&gt;刻意练习&lt;/code&gt;大大提高的。&lt;/p&gt;
&lt;p&gt;初级算法 - 帮助入门&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://juoyo.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch21 Spring</title>
    <link href="https://juoyo.github.io/posts/464a2ba4.html"/>
    <id>https://juoyo.github.io/posts/464a2ba4.html</id>
    <published>2020-05-01T15:02:35.000Z</published>
    <updated>2020-05-02T06:46:56.493Z</updated>
    
    <content type="html"><![CDATA[<p>Spring是一个支持快速开发Java EE应用程序的框架。</p><a id="more"></a><p>Spring Framework主要包括几个模块：</p><ul><li>支持IoC和AOP的容器；</li><li>支持JDBC和ORM的数据访问模块；</li><li>支持声明式事务的模块；</li><li>支持基于Servlet的MVC开发；</li><li>支持基于Reactive的Web开发；</li><li>以及集成JMS、JavaMail、JMX、缓存等其他模块。</li></ul><hr><h2 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h2><p>容器是一种为某种特定组件的运行提供必要支持的一个软件环境。例如，Tomcat就是一个Servlet容器，它可以为Servlet的运行提供运行环境。类似Docker这样的软件也是一个容器，它提供了必要的Linux环境以便运行一个特定的Linux进程。</p><p>Spring的核心就是提供了一个IoC容器，它可以管理所有轻量级的JavaBean组件，提供的底层服务包括组件的生命周期管理、配置和组装服务、AOP支持，以及建立在AOP基础上的声明式事务服务等。</p><h3 id="IoC原理"><a href="#IoC原理" class="headerlink" title="IoC原理"></a>IoC原理</h3><p>IoC全称Inversion of Control，直译为控制反转。</p><p>在IoC模式下，控制权发生了反转，即从应用程序转移到了IoC容器，所有组件不再由应用程序自己创建和配置，而是由IoC容器负责，应用程序只需要直接使用已经创建好并且配置好的组件。</p><p>为了能让组件在IoC容器中被“装配”出来，需要某种“注入”机制。</p><p>IoC又称为依赖注入（DI：Dependency Injection），它解决了一个最主要的问题：将组件的创建+配置与组件的使用相分离，并且，由IoC容器负责管理组件的生命周期。</p><p>因为IoC容器要负责实例化所有的组件，因此，有必要告诉容器如何创建组件，以及各组件的依赖关系。一种最简单的配置是通过XML文件来实现，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;HikariDataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;BookService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述XML配置文件指示IoC容器创建3个JavaBean组件，并把id为<code>dataSource</code>的组件通过属性<code>dataSource</code>（即调用<code>setDataSource()</code>方法）注入到另外两个组件中。</p><p>在Spring的IoC容器中，我们把所有组件统称为JavaBean，即配置一个组件就是配置一个Bean。</p><h3 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h3><p>Spring的IoC容器同时支持属性注入和构造方法注入，并允许混合使用。</p><hr><h2 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h2><p>一个具体的用户注册登录的例子。整个工程的结构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring-ioc-appcontext</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── itranswarp</span><br><span class="line">        │           └── learnjava</span><br><span class="line">        │               ├── Main.java</span><br><span class="line">        │               └── service</span><br><span class="line">        │                   ├── MailService.java</span><br><span class="line">        │                   ├── User.java</span><br><span class="line">        │                   └── UserService.java</span><br><span class="line">        └── resources</span><br><span class="line">            └── application.xml</span><br></pre></td></tr></table></figure><p>第一，用Maven创建工程并引入<code>spring-context</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ioc-appcontext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.3.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二，先编写一个<code>MailService</code>，用于在用户登录和注册成功后发送邮件通知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class MailService &#123;</span><br><span class="line">    private ZoneId zoneId &#x3D; ZoneId.systemDefault();</span><br><span class="line"></span><br><span class="line">    public void setZoneId(ZoneId zoneId) &#123;</span><br><span class="line">        this.zoneId &#x3D; zoneId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTime() &#123;</span><br><span class="line">        return ZonedDateTime.now(this.zoneId).format(DateTimeFormatter.ISO_ZONED_DATE_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sendLoginMail(User user) &#123;</span><br><span class="line">        System.err.println(String.format(&quot;Hi, %s! You are logged in at %s&quot;, user.getName(), getTime()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sendRegistrationMail(User user) &#123;</span><br><span class="line">        System.err.println(String.format(&quot;Welcome, %s!&quot;, user.getName()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三，再编写一个<code>UserService</code>，实现用户注册和登录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MailService mailService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMailService</span><span class="params">(MailService mailService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mailService = mailService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;(List.of( <span class="comment">// users:</span></span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;bob@example.com&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;Bob&quot;</span>), <span class="comment">// bob</span></span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;alice@example.com&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;Alice&quot;</span>), <span class="comment">// alice</span></span><br><span class="line">            <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;tom@example.com&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;Tom&quot;</span>))); <span class="comment">// tom</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String email, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getEmail().equalsIgnoreCase(email) &amp;&amp; user.getPassword().equals(password)) &#123;</span><br><span class="line">                mailService.sendLoginMail(user);</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;login failed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.users.stream().filter(user -&gt; user.getId() == id).findFirst().orElseThrow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">register</span><span class="params">(String email, String password, String name)</span> </span>&#123;</span><br><span class="line">        users.forEach((user) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.getEmail().equalsIgnoreCase(email)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;email exist.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        User user = <span class="keyword">new</span> User(users.stream().mapToLong(u -&gt; u.getId()).max().getAsLong(), email, password, name);</span><br><span class="line">        users.add(user);</span><br><span class="line">        mailService.sendRegistrationMail(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserService</code>通过<code>setMailService()</code>注入了一个<code>MailService</code>。</p><p>第四，需要编写一个特定的<code>application.xml</code>配置文件，告诉Spring的IoC容器应该如何创建并组装Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itranswarp.learnjava.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mailService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mailService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mailService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itranswarp.learnjava.service.MailService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring容器是通过读取XML文件后使用反射完成的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Spring是一个支持快速开发Java EE应用程序的框架。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="Spring" scheme="https://juoyo.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>百面机器学习ch5 非监督学习</title>
    <link href="https://juoyo.github.io/posts/eac8cc84.html"/>
    <id>https://juoyo.github.io/posts/eac8cc84.html</id>
    <published>2020-04-17T08:22:29.000Z</published>
    <updated>2020-04-17T08:32:13.960Z</updated>
    
    <content type="html"><![CDATA[<p>非监督学习，输入没有标签信息，通过算法挖掘数据内在结构和模式。</p><a id="more"></a><p>非监督学习主要包括两大类学习方法：数据聚类和特征变量关联。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;非监督学习，输入没有标签信息，通过算法挖掘数据内在结构和模式。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://juoyo.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>百面机器学习ch4 降维</title>
    <link href="https://juoyo.github.io/posts/e6696a60.html"/>
    <id>https://juoyo.github.io/posts/e6696a60.html</id>
    <published>2020-04-17T08:22:00.000Z</published>
    <updated>2020-05-02T11:51:48.349Z</updated>
    
    <content type="html"><![CDATA[<p>降维，用一个低纬度的向量表示原始高纬度的特征。</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;降维，用一个低纬度的向量表示原始高纬度的特征。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://juoyo.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>百面机器学习ch3 经典算法</title>
    <link href="https://juoyo.github.io/posts/a83eacb4.html"/>
    <id>https://juoyo.github.io/posts/a83eacb4.html</id>
    <published>2020-04-14T08:46:33.000Z</published>
    <updated>2020-05-02T11:51:57.362Z</updated>
    
    <content type="html"><![CDATA[<p>深度学习由数据驱动，失去数据，精密的深度学习网络将是画饼充饥。很多实际问题，难以得到海量且带有准确标注的数据，深度学习失去大显身手的余地，反而传统机器学习可以巧妙处理。</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;深度学习由数据驱动，失去数据，精密的深度学习网络将是画饼充饥。很多实际问题，难以得到海量且带有准确标注的数据，深度学习失去大显身手的余地，反而传统机器学习可以巧妙处理。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://juoyo.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="支持向量机" scheme="https://juoyo.github.io/tags/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
    
    <category term="逻辑回归" scheme="https://juoyo.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
    <category term="决策树" scheme="https://juoyo.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>百面机器学习ch2 模型评估</title>
    <link href="https://juoyo.github.io/posts/31cc7d44.html"/>
    <id>https://juoyo.github.io/posts/31cc7d44.html</id>
    <published>2020-04-14T08:43:49.000Z</published>
    <updated>2020-04-14T08:55:35.060Z</updated>
    
    <content type="html"><![CDATA[<p>模型评估。</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;模型评估。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://juoyo.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="模型评估" scheme="https://juoyo.github.io/tags/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0/"/>
    
  </entry>
  
  <entry>
    <title>百面机器学习ch1 特征工程</title>
    <link href="https://juoyo.github.io/posts/91063f0d.html"/>
    <id>https://juoyo.github.io/posts/91063f0d.html</id>
    <published>2020-04-14T08:43:22.000Z</published>
    <updated>2020-04-14T08:53:30.340Z</updated>
    
    <content type="html"><![CDATA[<p>对应机器学习，数据和特征往往决定结果的上限，而模型、算法的选择及优化则是逐步接近这个上限。</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;对应机器学习，数据和特征往往决定结果的上限，而模型、算法的选择及优化则是逐步接近这个上限。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://juoyo.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="特征工程" scheme="https://juoyo.github.io/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Volume III Lesson 2 Thirteen equals one</title>
    <link href="https://juoyo.github.io/posts/9faae043.html"/>
    <id>https://juoyo.github.io/posts/9faae043.html</id>
    <published>2020-04-11T01:29:42.000Z</published>
    <updated>2020-04-11T04:25:07.721Z</updated>
    
    <content type="html"><![CDATA[<p>第二篇 Thirteen equals one</p><a id="more"></a><p><font color="green">Thirteen equals one</font></p><p>Our vicar is always raising money for one cause or another, but he has never managed to get enough money to have the church clock repaired. The big clock which used to strike the hours day and night was damaged many years ago and has been silent ever since.</p><p>我们教区的牧师总是为各种各样的事筹集资金。但始终未能筹足资金把教堂的钟修好。教堂的钟很大，以前不分昼夜打点报时，但很多年前遭到毁坏，从此便无声无息了。  </p><hr><p>One night, however, our vicar work up with a start: the clock was striking the hours! Looking at his watch, he saw that it was one o’clock, but the bell struck thirteen times before it stopped. Armed with a torch, the vicar went up into the clock tower to see what was going on. In the torchlight, he caught sight of a figure whom he immediately recognized as Bill Wilkins, our local grocer.</p><p>一天夜里，我们的牧师突然被惊醒了，大钟又在“打点”报时了！他一看表，才 1 点钟，可是那钟一边敲了 13 下才停。牧师拿着一支电筒走上钟楼想去看看究竟发生了什么事情。借着电筒光。他看见一个人，马上认出那是本地杂货店主经比尔.威尔金斯。  </p><hr><p>“Whatever are you doing up here Bill?” asked the vicar in surprise.</p><p>“I’m trying to repair the bell,” answered Bill. “I’ve been coming up here night after night for weeks now. You see, I was hoping to give you a surprise.”</p><p>“You certainly did give me a surprise!” said the vicar. “You’ve probably woken up everyone in the village as well. Still, I’m glad the bell is working again.”</p><p>“That’s the trouble, vicar,” answered Bill. “It’s working all right, but I’m afraid that at one o’clock it will strike thirteen times and there’s nothing I can do about it.”</p><p>“We’ll get used to that, Bill,” said the vicar. “Thirteen is not as good as one, but it’s better than nothing. Now let’s go downstairs and have a cup of tea.”</p><p>“你究竟在这上面干什么，比尔？”牧师惊讶地问。</p><p>“我想把这口钟修好，”比尔回答说。“好几个星期了，我天天夜里到钟楼上来。嗯，我是想让你大吃一惊。”</p><p>“你确实使我大吃了一惊！”牧师说，“也许同时你把村里所有的人都吵醒了。不过，钟又能报时了，我还是很高兴的。”</p><p>“问题就在这里，牧师，”比尔回答说。“不错，钟能报时了，但是，恐怕每到 1 点钟，它总要敲 13 下，对此我已无能为力了。”</p><p>“大家慢慢就习惯了，比尔，”牧师说。“13 下是不如 1 下好，但总比 1 下也不敲强。来，咱们下楼去喝杯茶吧。”  </p><hr><p><font color="green">New words and expressions 生词和短语</font></p><p>equal<br>v. 等于<br>vicar<br>n. 牧师<br>raise<br>v. 募集，筹（款）<br>torchlight<br>n. 电筒光  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;第二篇 Thirteen equals one&lt;/p&gt;</summary>
    
    
    
    <category term="English" scheme="https://juoyo.github.io/categories/English/"/>
    
    
    <category term="New Concept English" scheme="https://juoyo.github.io/tags/New-Concept-English/"/>
    
    <category term="Lesson 2" scheme="https://juoyo.github.io/tags/Lesson-2/"/>
    
  </entry>
  
  <entry>
    <title>机器学习 xgboost原理</title>
    <link href="https://juoyo.github.io/posts/b264dde5.html"/>
    <id>https://juoyo.github.io/posts/b264dde5.html</id>
    <published>2020-04-10T00:34:38.000Z</published>
    <updated>2020-04-11T04:39:01.098Z</updated>
    
    <content type="html"><![CDATA[<p>XGBoost高效实现了GBDT算法，并且在算法和工程上做了很多改进，本文有助于轻松理解XGBoost原理。</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;XGBoost高效实现了GBDT算法，并且在算法和工程上做了很多改进，本文有助于轻松理解XGBoost原理。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://juoyo.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="xgboost" scheme="https://juoyo.github.io/tags/xgboost/"/>
    
  </entry>
  
  <entry>
    <title>面试题合集  机器学习、深度学习</title>
    <link href="https://juoyo.github.io/posts/f02ee159.html"/>
    <id>https://juoyo.github.io/posts/f02ee159.html</id>
    <published>2020-03-28T01:08:15.000Z</published>
    <updated>2020-03-28T14:34:31.951Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习、深度学习面试题合集。</p><a id="more"></a><h2 id="1-介绍SVM"><a href="#1-介绍SVM" class="headerlink" title="1.介绍SVM"></a>1.介绍SVM</h2><hr><h2 id="2-介绍Tensorflow的计算图"><a href="#2-介绍Tensorflow的计算图" class="headerlink" title="2. 介绍Tensorflow的计算图"></a>2. 介绍Tensorflow的计算图</h2><hr><h2 id="3-GBDT、XGBoost的区别"><a href="#3-GBDT、XGBoost的区别" class="headerlink" title="3. GBDT、XGBoost的区别"></a>3. GBDT、XGBoost的区别</h2><p>XGBoost的优点：</p><ol><li>损失函数用泰勒二项逼近，而GBDT用一阶导数</li><li>对树结构进行正则化约束，防止模型过度复杂，降低过拟合</li><li>节点分裂方式不同，GBDT用的基尼系数</li></ol><hr><h2 id="4-k-means或KNN计算与最近邻居的距离用欧氏距离，为什么不用曼哈顿距离？"><a href="#4-k-means或KNN计算与最近邻居的距离用欧氏距离，为什么不用曼哈顿距离？" class="headerlink" title="4.k-means或KNN计算与最近邻居的距离用欧氏距离，为什么不用曼哈顿距离？"></a>4.k-means或KNN计算与最近邻居的距离用欧氏距离，为什么不用曼哈顿距离？</h2><p>曼哈顿距离只计算水平或垂直距离，有维数限制。欧氏距离可计算任何空间的距离计算问题。</p><hr><h2 id="5-特征工程"><a href="#5-特征工程" class="headerlink" title="5. 特征工程"></a>5. 特征工程</h2><hr><h2 id="6-LR"><a href="#6-LR" class="headerlink" title="6. LR"></a>6. LR</h2><p>建模、数据推导</p><p>正则化</p><p>LR和maxent模型关系</p><p>LR为什么比线性回归好</p><p>并行化怎么做，几种并行化方式</p><hr><h2 id="7-overfitting怎么解决"><a href="#7-overfitting怎么解决" class="headerlink" title="7. overfitting怎么解决"></a>7. overfitting怎么解决</h2><p>dropout、regularization、batch normalization</p><hr><h2 id="8-LR和SVM的联系与区别？"><a href="#8-LR和SVM的联系与区别？" class="headerlink" title="8.LR和SVM的联系与区别？"></a>8.LR和SVM的联系与区别？</h2><p>联系：</p><ol><li>LR和SVM都可处理分类问题，且一般都处理线性二分类 。</li><li>都增加不同的正则化项，如L1、L2，实验中二者效果接近。</li></ol><p>区别：</p><ol><li>LR参数模型，SVM非参数模型</li><li>从目标函数看，LR逻辑回归采用Logistical Loss，SVM采用hinge loss。</li><li>SVM处理方法只考虑Support Vectors，即和分类最相关的少数点去学习分类器。LR通过非线性映射，大大减少离分类平面较远的点的权重，提升与分类最相关的数据点的权重。</li><li>LR适用于大规模线性分类，SVM转为对偶问题后，分类只需计算与少数几个支持向量的距离，进行复杂核函数计算时优势明显。</li></ol><hr><h2 id="9-LR与线性回归的区别与联系？"><a href="#9-LR与线性回归的区别与联系？" class="headerlink" title="9. LR与线性回归的区别与联系？"></a>9. LR与线性回归的区别与联系？</h2><ol><li>逻辑回归、线性回归均是广义线性回归</li><li>经典线性模型优化目标函数是最小二乘，而逻辑回归是似然函数</li><li>线性回归预测值在R内，分类范围[0, 1]。逻辑回归是减少预测范围，将预测值限定为[0, 1]之间的回归模型。LR鲁棒性更好。</li></ol><hr><h2 id="10-XGBoost用泰勒展开原因"><a href="#10-XGBoost用泰勒展开原因" class="headerlink" title="10.XGBoost用泰勒展开原因"></a>10.XGBoost用泰勒展开原因</h2><p>XGBoost使用一阶和二阶偏导，二阶导数有利于梯度下降更快更准。泰勒展开到二阶导数形式，可以在不选定损失函数具体形式的情况下用于算法优化分析。本质上把损失函数的选取和模型算法优化/参数选取分开，去耦合增加XGBoost的适用性。</p><hr><h2 id="11-XGBoost如何寻找最优特征？"><a href="#11-XGBoost如何寻找最优特征？" class="headerlink" title="11.XGBoost如何寻找最优特征？"></a>11.XGBoost如何寻找最优特征？</h2><p>XGBoost训练过程中给出每个特征的评分，表示每个特征对模型训练的重要性。</p><p>利用梯度优化模型，样本不放回，但XGBoost支持子采样，即每轮计算可以不使用全部样本。</p><hr><h2 id="12-判别模型、生成模型"><a href="#12-判别模型、生成模型" class="headerlink" title="12. 判别模型、生成模型"></a>12. 判别模型、生成模型</h2><p>判别方法：直接学习决策函数 Y = f(X)， 或者由条件分布概率P(Y|X)作为预测模型，即判别模型。</p><p>生成方法：学习联合概率密度分布函数P(X, Y)，然后求出P(Y|X)作为预测模型，即生成模型。</p><p>生成可得判别，判别不可得生成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常见判别模型：</span><br><span class="line">K近邻、SVM、决策树、感知机、线性判别分析（LDA）、线性回归、传统的神经网络、逻辑回归、boosting、条件随机场</span><br><span class="line"></span><br><span class="line">常见生成模型：</span><br><span class="line">朴素贝叶斯、隐马尔科夫模型、高斯混合模型、文档主题生成模型（LDA）、限制波尔兹曼机</span><br></pre></td></tr></table></figure><hr><h2 id="13-L1和L2-的区别"><a href="#13-L1和L2-的区别" class="headerlink" title="13. L1和L2 的区别"></a>13. L1和L2 的区别</h2><p>L1范数(L1 norm)是指向量中各个元素绝对值之和,即”稀疏规则算子”</p><p>L1范数:  |x1| + |x2| + … + |xn|<br>L2范数:   (x1<sup>2</sup> + x2<sup>2</sup> + … + xn<sup>2</sup>)<sup>1/2</sup></p><p>Lp范数:  (x1<sup>p</sup> + x2<sup>p</sup> + …. + xn<sup>p</sup> )<sup>1/p</sup> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在SVM学习过程中,L1范数是一种对成本函数求解最优的过程,L1范数正则化通过向成本函数中添加L1范数,使得学习的结果满足稀疏化,从而方便提取特征.</span><br><span class="line">L1范数使得权值稀疏,方便特征提取.</span><br><span class="line">L2范数可以防止过拟合,提高模型的泛化能力.</span><br></pre></td></tr></table></figure><hr><h2 id="14-L1和L2正则先验分别服从什么分布"><a href="#14-L1和L2正则先验分别服从什么分布" class="headerlink" title="14. L1和L2正则先验分别服从什么分布?"></a>14. L1和L2正则先验分别服从什么分布?</h2><p>L1是拉普拉斯分布,L2是高斯分布.</p><hr><h2 id="15-CNN最成功应用在CV，为什么NLP和Speech的很多问题也可以用CNN解决"><a href="#15-CNN最成功应用在CV，为什么NLP和Speech的很多问题也可以用CNN解决" class="headerlink" title="15.CNN最成功应用在CV，为什么NLP和Speech的很多问题也可以用CNN解决?"></a>15.CNN最成功应用在CV，为什么NLP和Speech的很多问题也可以用CNN解决?</h2><p>存在局部与整体的关系,由低层次的特征经过组合,组成高层次的特征，并且得到不同特征之间的空间相关性。</p><p>CNN获取此共性的四方法：</p><p>局部连接：使网络可以提取数据的局部特征</p><p>权值共享：降低网络的训练难度，一个Filter只提取一个特征，在整个图片/文本中进行卷积。</p><p>池化操作和多层次结构：实现了数据降维，将低维特征组合成高维特征，从而对整个图片/文本进行表示。</p><p>如果每个点的处理使用相同的Filter，则为全卷积，否则为Local-Conv。</p><hr><h2 id="16-LSTM结构为什么比RNN好？"><a href="#16-LSTM结构为什么比RNN好？" class="headerlink" title="16. LSTM结构为什么比RNN好？"></a>16. LSTM结构为什么比RNN好？</h2><p>推导 forget gate， input gate， cell state， hidden information 等的变化；  </p><p>当前的 cell informaton 是通过 input gate 控制之后叠加的， RNN 是叠乘，因此 LSTM 可以防止梯度消失或者爆炸。  </p><hr><h2 id="17-朴素贝叶斯为什么“朴素”"><a href="#17-朴素贝叶斯为什么“朴素”" class="headerlink" title="17.朴素贝叶斯为什么“朴素”"></a>17.朴素贝叶斯为什么“朴素”</h2><p>假定所有特征作用相同，且独立。</p><hr><h2 id="18-机器学习为何对数据进行归一化？"><a href="#18-机器学习为何对数据进行归一化？" class="headerlink" title="18. 机器学习为何对数据进行归一化？"></a>18. 机器学习为何对数据进行归一化？</h2><ol><li><p>归一化加快了梯度下降求最优解的速度</p></li><li><p>归一化可能提高精度</p></li><li><p>归一化类型</p><ul><li><p>线性归一化</p><p>x<sup>‘</sup> = ( x - min(x) ) / ( max(x) - min(x) )</p></li><li><p>标准差标准化</p><p>经过处理的数据符合标准正态分布，转换函数为：</p><p>x<sup>*</sup> = (x - μ ) / σ  </p></li><li><p>非线性归一化</p><p>用于数据分化比较大的场景，通过数学函数将原始值进行映射，包括log、正切、指数等。</p></li></ul></li></ol><hr><h2 id="19-完整机器学习项目流程"><a href="#19-完整机器学习项目流程" class="headerlink" title="19. 完整机器学习项目流程"></a>19. 完整机器学习项目流程</h2><ol><li><p>抽象为数学问题</p></li><li><p>获取数据</p><p>数据觉得机器学习结果的上限，而算法只是尽可能逼近这个上限。</p></li><li><p>数据预处理与特征选择</p><p>归一化、离散化、因子化、缺失值处理、去除共线性</p><p>特征有效性分析：相关系数、卡方检验、平均互信息、条件熵、后验概率、逻辑回归权重等方法  </p></li><li><p>训练模型与调优</p><p>真正考验水平的是调整这些算法的（超）参数，需要对算法的原理有深入的理解。  </p></li><li><p>模型诊断</p><p>确定模型调优的方向与思路，需要对模型进行诊断。</p><p>过拟合、欠拟合判断</p><p>误差分析</p></li><li><p>模型融合</p><p>工程上，提升算法准确度方法是分别在模型的前端（特征清洗和预处理，不同的采样模式）与后端（模型融合）上下功夫。  </p></li><li><p>上线运行</p></li></ol><hr><h2 id="20-hash冲突及解决"><a href="#20-hash冲突及解决" class="headerlink" title="20.hash冲突及解决"></a>20.hash冲突及解决</h2><hr><h2 id="21-解决梯度消失和梯度膨胀？"><a href="#21-解决梯度消失和梯度膨胀？" class="headerlink" title="21.解决梯度消失和梯度膨胀？"></a>21.解决梯度消失和梯度膨胀？</h2><ol><li><p>梯度消失</p><p>根据链式法则，如果每一层神经元对上一层的输出的偏导乘上权重结果都小于1 的话，那么即使这个结果是 0.99，在经过足够多层传播之后，误差对输入层的偏导会趋于 0。<br>可以采用 ReLU 激活函数有效的解决梯度消失的情况。  </p></li><li><p>梯度膨胀</p><p>根据链式法则，如果每一层神经元对上一层的输出的偏导乘上权重结果都大于1 的话，在经过足够多层传播之后，误差对输入层的偏导会趋于无穷大。<br>可以通过激活函数来解决。  </p></li></ol><hr><h2 id="22-CRF相比HMM和MEMM模型的优势"><a href="#22-CRF相比HMM和MEMM模型的优势" class="headerlink" title="22.CRF相比HMM和MEMM模型的优势"></a>22.CRF相比HMM和MEMM模型的优势</h2><p>CRF， HMM(隐马模型)， MEMM(最大熵隐马模型)都常用来做序列标注的建模  。</p><p>HMM最大缺点在于输出独立性假设，导致不考虑上下文特征，限制了特征选择。</p><p>MEMM解决HMM问题，可任意选择特征。但每个节点都要归一化，所以只能找到局部最优值，同时也带来了标记偏见的问题，即凡是训练语料中未出现的情况全都忽略掉。  </p><p>CRF对所有特征进行全局归一化，可求得全局最优值。</p><hr><h2 id="23-有监督-无监督"><a href="#23-有监督-无监督" class="headerlink" title="23.有监督/无监督"></a>23.有监督/无监督</h2><p>有监督：LR、SVM、BP、RF、GBDT</p><p>无监督：KMeans、DL</p><hr><h2 id="24-正则化"><a href="#24-正则化" class="headerlink" title="24.正则化"></a>24.正则化</h2><p>针对过拟合提出，求解模型最优的一般是优化最小的经验风险，现在在该经验风险上加入模型复杂度这一项（正则化项是模型参数向量的范数），并使用一个 rate 比率来权衡模型复杂度与以往经验风险的权重。  </p><hr><h2 id="25-协方差和相关性的区别"><a href="#25-协方差和相关性的区别" class="headerlink" title="25.协方差和相关性的区别"></a>25.协方差和相关性的区别</h2><p>相关性是协方差的标准化格式。</p><hr><h2 id="26-线性分类器与非线性分类器的区别以及优劣"><a href="#26-线性分类器与非线性分类器的区别以及优劣" class="headerlink" title="26.线性分类器与非线性分类器的区别以及优劣"></a>26.线性分类器与非线性分类器的区别以及优劣</h2><p>如果模型是参数的线性函数，并且存在线性分类面，那么就是线性分类器，否则不是。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常见的线性分类器有： LR,贝叶斯分类，单层感知机、线性回归。</span><br><span class="line"></span><br><span class="line">常见的非线性分类器：决策树、 RF、 GBDT、多层感知机。 </span><br><span class="line"></span><br><span class="line">SVM 两种都有(取决于线性核还是高斯核)。 </span><br></pre></td></tr></table></figure><hr><h2 id="27-各种存储结构从运行速度、存储效率和适用场合"><a href="#27-各种存储结构从运行速度、存储效率和适用场合" class="headerlink" title="27.各种存储结构从运行速度、存储效率和适用场合"></a>27.各种存储结构从运行速度、存储效率和适用场合</h2><p>等方面进行简要地分析。  </p><hr><h2 id="28-分布式数据库"><a href="#28-分布式数据库" class="headerlink" title="28.分布式数据库"></a>28.分布式数据库</h2><hr><h2 id="29-贝叶斯定理"><a href="#29-贝叶斯定理" class="headerlink" title="29.贝叶斯定理"></a>29.贝叶斯定理</h2><hr><h2 id="30-关联规则发现"><a href="#30-关联规则发现" class="headerlink" title="30.关联规则发现"></a>30.关联规则发现</h2><hr><h2 id="31-将原始数据进行集成、变换、维度规约、数值规约是在以下哪个步骤的任务？-数据预处理"><a href="#31-将原始数据进行集成、变换、维度规约、数值规约是在以下哪个步骤的任务？-数据预处理" class="headerlink" title="31. 将原始数据进行集成、变换、维度规约、数值规约是在以下哪个步骤的任务？ (数据预处理)"></a>31. 将原始数据进行集成、变换、维度规约、数值规约是在以下哪个步骤的任务？ (数据预处理)</h2><hr><h2 id="32-数据预处理方法包括A-变量代换-B-离散化-C-聚集"><a href="#32-数据预处理方法包括A-变量代换-B-离散化-C-聚集" class="headerlink" title="32.数据预处理方法包括A 变量代换 B 离散化 C 聚集"></a>32.数据预处理方法包括A 变量代换 B 离散化 C 聚集</h2><hr><h2 id="33-KDD"><a href="#33-KDD" class="headerlink" title="33.KDD"></a>33.KDD</h2><p>数据挖掘与知识发现  </p><hr><h2 id="34-当不知道数据所带标签时，可以使用哪种技术促使带同类标签的数据与带其他标签的数据相分离？-聚类"><a href="#34-当不知道数据所带标签时，可以使用哪种技术促使带同类标签的数据与带其他标签的数据相分离？-聚类" class="headerlink" title="34.当不知道数据所带标签时，可以使用哪种技术促使带同类标签的数据与带其他标签的数据相分离？ (聚类)"></a>34.当不知道数据所带标签时，可以使用哪种技术促使带同类标签的数据与带其他标签的数据相分离？ (聚类)</h2><hr><h2 id="35-预测建模"><a href="#35-预测建模" class="headerlink" title="35.预测建模"></a>35.预测建模</h2><hr><h2 id="36-特征选择的标准方法A-嵌入-B-过滤-C-包装-D-抽样"><a href="#36-特征选择的标准方法A-嵌入-B-过滤-C-包装-D-抽样" class="headerlink" title="36. 特征选择的标准方法A 嵌入 B 过滤 C 包装 D 抽样"></a>36. 特征选择的标准方法A 嵌入 B 过滤 C 包装 D 抽样</h2><hr><h2 id="37-sigmoid-激活函数"><a href="#37-sigmoid-激活函数" class="headerlink" title="37.sigmoid 激活函数"></a>37.sigmoid 激活函数</h2><p>常用的非线性激活函数有 sigmoid、 tanh、 relu 等等，前两者 sigmoid/tanh比较常见于全连接层，后者 relu 常见于卷积层。  </p><hr><h2 id="38-卷积"><a href="#38-卷积" class="headerlink" title="38.卷积"></a>38.卷积</h2><hr><h2 id="39-CNN的池化pool层"><a href="#39-CNN的池化pool层" class="headerlink" title="39.CNN的池化pool层"></a>39.CNN的池化pool层</h2><p>池化，即取区域平均或最大。</p><hr><h2 id="40-生成对抗网络GAN"><a href="#40-生成对抗网络GAN" class="headerlink" title="40. 生成对抗网络GAN"></a>40. 生成对抗网络GAN</h2><p>GAN 之所以是对抗的，是因为 GAN 的内部是竞争关系，</p><p>一方叫 generator，它的主要工作是生成图片，并且尽量使得其看上去是来自于训练样本的。另一<br>方是 discriminator，其目标是判断输入图片是否属于真实训练样本。<br>更直白的讲，将 generator 想象成假币制造商，而 discriminator 是警察。generator 目的是尽可能把假币造的跟真的一样，从而能够骗过discriminator，即生成样本并使它看上去好像来自于真实训练样本一样。  </p><hr><h2 id="41-哪些机器学习算法不需要归一化"><a href="#41-哪些机器学习算法不需要归一化" class="headerlink" title="41.哪些机器学习算法不需要归一化"></a>41.哪些机器学习算法不需要归一化</h2><p>概率模型不需要归一化， 因为它们不关心变量的值，而是关心变量的分布和变量之间的条件概率，如决策树、 RF。</p><p>而像 Adaboost、 GBDT、 XGBoost、SVM、 LR、 KNN、 KMeans 之类的最优化问题就需要归一化。  </p><hr><h2 id="42-梯度下降"><a href="#42-梯度下降" class="headerlink" title="42.梯度下降"></a>42.梯度下降</h2><p>回归在数学上来说是给定一个点集，能够用一条曲线去拟合之，如果这个曲线是一条直线，那就被称为线性回归，如果曲线是一条二次曲线，就被称为二次回归，回归还有很多的变种，如 locally weighted 回归， logistic 回归。</p><hr><h2 id="43-梯度下降法并不是下降最快的方向"><a href="#43-梯度下降法并不是下降最快的方向" class="headerlink" title="43.梯度下降法并不是下降最快的方向"></a>43.梯度下降法并不是下降最快的方向</h2><p>只是目标函数在当前的点的切平面（当然高维问题不能叫平面）上下降最快的方向。  </p><hr><h2 id="44-随机梯度下降法的问题和挑战？"><a href="#44-随机梯度下降法的问题和挑战？" class="headerlink" title="44.随机梯度下降法的问题和挑战？"></a>44.随机梯度下降法的问题和挑战？</h2><p>困难：</p><ol><li><p>梯度计算</p><p>目标函数经常是求和形式，样本量极大时，计算耗时。</p></li><li><p>学习率的选择</p></li></ol><hr><h2 id="45-最小二乘法"><a href="#45-最小二乘法" class="headerlink" title="45.最小二乘法"></a>45.最小二乘法</h2><p>最小二乘法（又称最小平方法）是一种数学优化技术。它通过最小化误差的平方和寻找数据的最佳函数匹配。利用最小二乘法可以简便地求得未知的数据，并使得这些求得的数据与实际数据之间误差的平方和为最小。  </p><hr><h2 id="46-Python生成随机数"><a href="#46-Python生成随机数" class="headerlink" title="46.Python生成随机数"></a>46.Python生成随机数</h2><p>random</p><hr><h2 id="47-常见的损失函数"><a href="#47-常见的损失函数" class="headerlink" title="47.常见的损失函数"></a>47.常见的损失函数</h2><p>L(Y, f(x))</p><p>(1)0-1损失函数</p><p>(2)平方损失函数</p><p>(3)绝对损失函数</p><p>(4)对数损失函数</p><hr><h2 id="48-Logistics回归"><a href="#48-Logistics回归" class="headerlink" title="48.Logistics回归"></a>48.Logistics回归</h2><p>逻辑回归目的是从特征学习出一个 0/1 分类模型，而这个模型是将特性的线性组合作为自变量，由于自变量的取值范围是负无穷到正无穷。因此，使用logistic 函数（或称作 sigmoid 函数）将自变量映射到(0,1)上，映射后的值被认为是属于 y=1 的概率。  </p><hr><h2 id="49-HashMap与HashTable区别"><a href="#49-HashMap与HashTable区别" class="headerlink" title="49. HashMap与HashTable区别"></a>49. HashMap与HashTable区别</h2><p>HashTable 的应用非常广泛， HashMap 是新框架中用来代替 HashTable 的类，也就是说建议使用 HashMap，不要使用 HashTable。  </p><hr><h2 id="50-正负样本数据量不等"><a href="#50-正负样本数据量不等" class="headerlink" title="50.正负样本数据量不等"></a>50.正负样本数据量不等</h2><hr><h2 id="51-稠密矩阵乘法效率"><a href="#51-稠密矩阵乘法效率" class="headerlink" title="51.稠密矩阵乘法效率"></a>51.稠密矩阵乘法效率</h2><hr><h2 id="52-Nave-Bayes-是一种特殊的-Bayes-分类器-特征变量是-X-类别标签是-C-它的一个假定是-特征变量-X-的各个维度是类别条件独立随机变量"><a href="#52-Nave-Bayes-是一种特殊的-Bayes-分类器-特征变量是-X-类别标签是-C-它的一个假定是-特征变量-X-的各个维度是类别条件独立随机变量" class="headerlink" title="52.Nave Bayes 是一种特殊的 Bayes 分类器,特征变量是 X,类别标签是 C,它的一个假定是:( 特征变量 X 的各个维度是类别条件独立随机变量 )"></a>52.Nave Bayes 是一种特殊的 Bayes 分类器,特征变量是 X,类别标签是 C,它的一个假定是:( 特征变量 X 的各个维度是类别条件独立随机变量 )</h2><hr><h2 id="53-SVM分类间隔"><a href="#53-SVM分类间隔" class="headerlink" title="53. SVM分类间隔"></a>53. SVM分类间隔</h2><hr><h2 id="54-在HMM中，如果已知观察序列和产生观察序列的状态序列-那么可用以下哪种方法直接进行参数估计-D极大似然估计"><a href="#54-在HMM中，如果已知观察序列和产生观察序列的状态序列-那么可用以下哪种方法直接进行参数估计-D极大似然估计" class="headerlink" title="54.在HMM中，如果已知观察序列和产生观察序列的状态序列,那么可用以下哪种方法直接进行参数估计( D极大似然估计   )"></a>54.在HMM中，如果已知观察序列和产生观察序列的状态序列,那么可用以下哪种方法直接进行参数估计( D极大似然估计   )</h2><p>EM 算法： 只有观测序列，无状态序列时来学习模型参数，即 Baum-Welch算法<br>维特比算法： 用动态规划解决 HMM 的预测问题，不是参数估计<br>前向后向算法：用来算概率<br>极大似然估计：即观测序列和相应的状态序列都存在时的监督学习算法，用来估计参数  </p><p>注意的是在给定观测序列和对应的状态序列估计模型参数，可以利用极大似然估计。如果给定观测序列，没有对应的状态序列，才用 EM，将状态序列看作不可测的隐数据。  </p><hr><h2 id="55-Naive-Bayesian（-NB）分类模型时，将训练数据"><a href="#55-Naive-Bayesian（-NB）分类模型时，将训练数据" class="headerlink" title="55.Naive Bayesian（ NB）分类模型时，将训练数据"></a>55.Naive Bayesian（ NB）分类模型时，将训练数据</h2><p>的两个维度重复</p><p>模型效果相比无重复特征的情况下精确度会降低。</p><p>当两列特征高度相关时，无法用两列特征相同时所得到的结论来分析问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NB 的核心在于它假设向量的所有分量之间是独立的。</span><br><span class="line">在贝叶斯理论系统中，都有一个重要的条件独立性假设：假设所有特征之间相互独立，这样才能将联合概率拆分。</span><br></pre></td></tr></table></figure><hr><h2 id="56-文本分类"><a href="#56-文本分类" class="headerlink" title="56.文本分类"></a>56.文本分类</h2><p>分类：决策树、SVM、KNN</p><p>聚类：Kmeans</p><hr><h2 id="57-一组数据的协方差矩阵P"><a href="#57-一组数据的协方差矩阵P" class="headerlink" title="57.一组数据的协方差矩阵P"></a>57.一组数据的协方差矩阵P</h2><hr><h2 id="58-Kmeans的复杂度"><a href="#58-Kmeans的复杂度" class="headerlink" title="58. Kmeans的复杂度"></a>58. Kmeans的复杂度</h2><p>时间复杂度： O(tKmn)，其中， t 为迭代次数， K 为簇的数目， m 为记录数， n为维数</p><p>空间复杂度： O((m+K)n)，其中， K 为簇的数目， m 为记录数， n 为维数。  </p><hr><h2 id="59-逻辑回归、SVM"><a href="#59-逻辑回归、SVM" class="headerlink" title="59.逻辑回归、SVM"></a>59.逻辑回归、SVM</h2><p>Logit 回归目标函数是最小化后验概率， Logit 回归可以用于预测事件发生概率的大小</p><p>SVM 目标是结构风险最小化， SVM 可以有效避免模型过拟合。  </p><h2 id="60-输出特征大小"><a href="#60-输出特征大小" class="headerlink" title="60.输出特征大小"></a>60.输出特征大小</h2><p>输入图片大小为 200×200，依次经过一层卷积（ kernel size 5×5，padding 1， stride 2）， pooling（ kernel size 3×3， padding 0，stride 1），又一层卷积（ kernel size 3×3， padding 1， stride 1）之后，输出特征图大小为：（）  </p><p>计算尺寸不被整除只在 GoogLeNet 中遇到过。卷积向下取整，池化向上取整。<br>本题 （ 200-5+2<em>1） /2+1 为 99.5，取 99<br>（ 99-3） /1+1 为 97<br>（ 97-3+2</em>1） /1+1 为 97  </p><hr><hr><h2 id="67-标准化与归一化的区别"><a href="#67-标准化与归一化的区别" class="headerlink" title="67.标准化与归一化的区别"></a>67.标准化与归一化的区别</h2><p>标准化是依照特征矩阵的列处理数据，其通过求 z-score 的方法，将样本的特征值转换到同一量纲下。</p><p>归一化是依照特征矩阵的行处理数据，其目的在于样本向量在点乘运算或其他核函数计算相似性时，拥有统一的标准，也就是说都转化为“单位向量”。  </p><p>特征向量的缺失值处理：<br>1.缺失值较多.直接将该特征舍弃掉，否则可能反倒会带入较大的 noise，对结果造成不良影响。<br>2.缺失值较少,其余的特征缺失值都在 10%以内，我们可以采取很多的方式来处理:</p><ol><li>把 NaN 直接作为一个特征，假设用 0 表示；</li><li>用均值填充；</li><li>用随机森林等算法预测填充  </li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;机器学习、深度学习面试题合集。&lt;/p&gt;</summary>
    
    
    
    <category term="AI指北" scheme="https://juoyo.github.io/categories/AI%E6%8C%87%E5%8C%97/"/>
    
    <category term="题合集" scheme="https://juoyo.github.io/categories/AI%E6%8C%87%E5%8C%97/%E9%A2%98%E5%90%88%E9%9B%86/"/>
    
    
    <category term="ML" scheme="https://juoyo.github.io/tags/ML/"/>
    
    <category term="DL" scheme="https://juoyo.github.io/tags/DL/"/>
    
  </entry>
  
  <entry>
    <title>机器学习系列三  线性回归</title>
    <link href="https://juoyo.github.io/posts/ca4a0ef4.html"/>
    <id>https://juoyo.github.io/posts/ca4a0ef4.html</id>
    <published>2020-03-20T14:52:02.000Z</published>
    <updated>2020-04-11T04:38:35.096Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习系列三  线性回归。</p><a id="more"></a><p>线性回归部分包括，最小二乘法及集合意义、最小二乘法-概率视角-高斯噪声-MLE、正则化-岭回归-频率角度、正则化-岭回归-贝叶斯角度。</p><p><img src="/posts/ca4a0ef4.htm/ca4a0ef4/1.png" alt="线性回归1"></p><p><img src="/posts/ca4a0ef4.htm/ca4a0ef4/2.jpg" alt="线性回归2"></p><p><img src="/posts/ca4a0ef4.htm/ca4a0ef4/3.jpg" alt="线性回归3"></p><p><img src="/posts/ca4a0ef4.htm/ca4a0ef4/4.jpg" alt="线性回归4"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;机器学习系列三  线性回归。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://juoyo.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="线性回归" scheme="https://juoyo.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch20 Web开发</title>
    <link href="https://juoyo.github.io/posts/4b7be044.html"/>
    <id>https://juoyo.github.io/posts/4b7be044.html</id>
    <published>2020-03-13T02:08:19.000Z</published>
    <updated>2020-05-01T14:19:30.815Z</updated>
    
    <content type="html"><![CDATA[<p>JavaSE，即Java Platform Standard Edition。JavaEE是Java Platform Enterprise Edition的缩写。</p><a id="more"></a><p>JavaEE最核心的组件就是基于Servlet标准的Web服务器，开发者编写的应用程序是基于Servlet API并运行在Web服务器内部的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌─────────────┐</span><br><span class="line">│┌───────────┐│</span><br><span class="line">││ User App  ││</span><br><span class="line">│├───────────┤│</span><br><span class="line">││Servlet API││</span><br><span class="line">│└───────────┘│</span><br><span class="line">│ Web Server  │</span><br><span class="line">├─────────────┤</span><br><span class="line">│   JavaSE    │</span><br><span class="line">└─────────────┘</span><br></pre></td></tr></table></figure><hr><h2 id="Web基础"><a href="#Web基础" class="headerlink" title="Web基础"></a>Web基础</h2><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>对于Browser来说，请求页面的流程如下：</p><ol><li>与服务器建立TCP连接；</li><li>发送HTTP请求；</li><li>收取HTTP响应，然后把网页在浏览器中显示出来。</li></ol><p>浏览器发送的HTTP请求如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: www.sina.com.cn</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 xxx</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en-US;q&#x3D;0.8</span><br></pre></td></tr></table></figure><p>其中，第一行表示使用<code>GET</code>请求获取路径为<code>/</code>的资源，并使用<code>HTTP/1.1</code>协议，从第二行开始，每行都是以<code>Header: Value</code>形式表示的HTTP头，比较常用的HTTP Header包括：</p><ul><li>Host: 表示请求的主机名，因为一个服务器上可能运行着多个网站，因此，Host表示浏览器正在请求的域名；</li><li>User-Agent: 标识客户端本身，例如Chrome浏览器的标识类似<code>Mozilla/5.0 ... Chrome/79</code>，IE浏览器的标识类似<code>Mozilla/5.0 (Windows NT ...) like Gecko</code>；</li><li>Accept：表示浏览器能接收的资源类型，如<code>text/*</code>，<code>image/*</code>或者<code>*/*</code>表示所有；</li><li>Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</li><li>Accept-Encoding：表示浏览器可以支持的压缩类型，例如<code>gzip, deflate, br</code>。</li></ul><p>服务器的响应如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 21932</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Cache-Control: max-age&#x3D;300</span><br><span class="line"></span><br><span class="line">&lt;html&gt;...网页数据...</span><br></pre></td></tr></table></figure><p>服务器响应的第一行总是版本号+空格+数字+空格+文本，数字表示响应代码，其中<code>2xx</code>表示成功，<code>3xx</code>表示重定向，<code>4xx</code>表示客户端引发的错误，<code>5xx</code>表示服务器端引发的错误。数字是给程序识别，文本则是给开发者调试使用的。常见的响应代码有：</p><ul><li>200 OK：表示成功；</li><li>301 Moved Permanently：表示该URL已经永久重定向；</li><li>302 Found：表示该URL需要临时重定向；</li><li>304 Not Modified：表示该资源没有修改，客户端可以使用本地缓存的版本；</li><li>400 Bad Request：表示客户端发送了一个错误的请求，例如参数无效；</li><li>401 Unauthorized：表示客户端因为身份未验证而不允许访问该URL；</li><li>403 Forbidden：表示服务器因为权限问题拒绝了客户端的请求；</li><li>404 Not Found：表示客户端请求了一个不存在的资源；</li><li>500 Internal Server Error：表示服务器处理时内部出错，例如因为无法连接数据库；</li><li>503 Service Unavailable：表示服务器此刻暂时无法处理请求。</li></ul><p>从第二行开始，服务器每一行均返回一个HTTP头。服务器经常返回的HTTP Header包括：</p><ul><li>Content-Type：表示该响应内容的类型，例如<code>text/html</code>，<code>image/jpeg</code>；</li><li>Content-Length：表示该响应内容的长度（字节数）；</li><li>Content-Encoding：表示该响应压缩算法，例如<code>gzip</code>；</li><li>Cache-Control：指示客户端应如何缓存，例如<code>max-age=300</code>表示可以最多缓存300秒。</li></ul><p>HTTP请求和响应都由HTTP Header和HTTP Body构成，其中HTTP Header每行都以<code>\r\n</code>结束。如果遇到两个连续的<code>\r\n</code>，那么后面就是HTTP Body。浏览器读取HTTP Body，并根据Header信息中指示的<code>Content-Type</code>、<code>Content-Encoding</code>等解压后显示网页、图像或其他内容。</p><p>通常浏览器获取的第一个资源是HTML网页，在网页中，如果嵌入了JavaScript、CSS、图片、视频等其他资源，浏览器会根据资源的URL再次向服务器请求对应的资源。</p><p><font color="green">HTTP编程</font>是以客户端的身份去请求服务器资源。</p><p>以服务器的身份响应客户端请求，编写服务器程序来处理客户端请求通常就称之为<font color="green">Web开发</font>。</p><h3 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h3><p>一个HTTP Server本质上是一个TCP服务器，我们先用TCP编程的多线程实现的服务器端框架：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>); <span class="comment">// 监听指定端口</span></span><br><span class="line">        System.out.println(<span class="string">&quot;server is running...&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Socket sock = ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;connected from &quot;</span> + sock.getRemoteSocketAddress());</span><br><span class="line">            Thread t = <span class="keyword">new</span> Handler(sock);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    Socket sock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Socket sock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sock = sock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = <span class="keyword">this</span>.sock.getInputStream()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (OutputStream output = <span class="keyword">this</span>.sock.getOutputStream()) &#123;</span><br><span class="line">                handle(input, output);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sock.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;client disconnected.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(input, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">var</span> writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(output, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 处理HTTP请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要在<code>handle()</code>方法中，用Reader读取HTTP请求，用Writer发送HTTP响应，即可实现一个最简单的HTTP服务器。编写代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">private void handle(InputStream input, OutputStream output) throws IOException &#123;</span><br><span class="line">    System.out.println(&quot;Process new http request...&quot;);</span><br><span class="line">    var reader &#x3D; new BufferedReader(new InputStreamReader(input, StandardCharsets.UTF_8));</span><br><span class="line">    var writer &#x3D; new BufferedWriter(new OutputStreamWriter(output, StandardCharsets.UTF_8));</span><br><span class="line">    &#x2F;&#x2F; 读取HTTP请求:</span><br><span class="line">    boolean requestOk &#x3D; false;</span><br><span class="line">    String first &#x3D; reader.readLine();</span><br><span class="line">    if (first.startsWith(&quot;GET &#x2F; HTTP&#x2F;1.&quot;)) &#123;</span><br><span class="line">        requestOk &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        String header &#x3D; reader.readLine();</span><br><span class="line">        if (header.isEmpty()) &#123; &#x2F;&#x2F; 读取到空行时, HTTP Header读取完毕</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(header);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(requestOk ? &quot;Response OK&quot; : &quot;Response Error&quot;);</span><br><span class="line">    if (!requestOk) &#123;</span><br><span class="line">        &#x2F;&#x2F; 发送错误响应:</span><br><span class="line">        writer.write(&quot;404 Not Found\r\n&quot;);</span><br><span class="line">        writer.write(&quot;Content-Length: 0\r\n&quot;);</span><br><span class="line">        writer.write(&quot;\r\n&quot;);</span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 发送成功响应:</span><br><span class="line">        String data &#x3D; &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&quot;;</span><br><span class="line">        int length &#x3D; data.getBytes(StandardCharsets.UTF_8).length;</span><br><span class="line">        writer.write(&quot;HTTP&#x2F;1.0 200 OK\r\n&quot;);</span><br><span class="line">        writer.write(&quot;Connection: close\r\n&quot;);</span><br><span class="line">        writer.write(&quot;Content-Type: text&#x2F;html\r\n&quot;);</span><br><span class="line">        writer.write(&quot;Content-Length: &quot; + length + &quot;\r\n&quot;);</span><br><span class="line">        writer.write(&quot;\r\n&quot;); &#x2F;&#x2F; 空行标识Header和Body的分隔</span><br><span class="line">        writer.write(data);</span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码是，先读取HTTP请求，上述代码只处理<code>GET /</code>的请求。当读取到空行时，表示已读到连续两个<code>\r\n</code>，说明请求结束，可以发送响应。</p><p>发送响应的时候，首先发送响应代码<code>HTTP/1.0 200 OK</code>表示一个成功的200响应，使用<code>HTTP/1.0</code>协议，然后，依次发送Header，发送完Header后，再发送一个空行标识Header结束，紧接着发送HTTP Body，在浏览器输入网址就可以看到响应页面。</p><hr><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><hr><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><hr><h2 id="MVC开发"><a href="#MVC开发" class="headerlink" title="MVC开发"></a>MVC开发</h2><ul><li>Servlet适合编写Java代码，实现各种复杂的业务逻辑，但不适合输出复杂的HTML；</li><li>JSP适合编写HTML，并在其中插入动态内容，但不适合编写复杂的Java代码。</li></ul><p>假设我们已经编写了几个JavaBean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> School school;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>UserServlet</code>中，我们可以从数据库读取<code>User</code>、<code>School</code>等信息，然后，把读取到的JavaBean先放到HttpServletRequest中，再通过<code>forward()</code>传给<code>user.jsp</code>处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 假装从数据库读取:</span></span><br><span class="line">        School school = <span class="keyword">new</span> School(<span class="string">&quot;No.1 Middle School&quot;</span>, <span class="string">&quot;101 South Street&quot;</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">123</span>, <span class="string">&quot;Bob&quot;</span>, school);</span><br><span class="line">        <span class="comment">// 放入Request中:</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="comment">// forward给user.jsp:</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/user.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>user.jsp</code>中，我们只负责展示相关JavaBean的信息，不需要编写访问数据库等复杂逻辑：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.itranswarp.learnjava.bean.*&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    User user = (User) request.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello World - JSP&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello &lt;%= user.name %&gt;!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;School Name:</span><br><span class="line">    &lt;span style=<span class="string">&quot;color:red&quot;</span>&gt;</span><br><span class="line">        &lt;%= user.school.name %&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;School Address:</span><br><span class="line">    &lt;span style=<span class="string">&quot;color:red&quot;</span>&gt;</span><br><span class="line">        &lt;%= user.school.address %&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>注意几点：</p><ul><li>需要展示的<code>User</code>被放入<code>HttpServletRequest</code>中以便传递给JSP，因为一个请求对应一个<code>HttpServletRequest</code>，我们也无需清理它，处理完该请求后<code>HttpServletRequest</code>实例将被丢弃；</li><li>把<code>user.jsp</code>放到<code>/WEB-INF/</code>目录下，是因为<code>WEB-INF</code>是一个特殊目录，Web Server会阻止浏览器对<code>WEB-INF</code>目录下任何资源的访问，这样就防止用户通过<code>/user.jsp</code>路径直接访问到JSP页面；</li><li>JSP页面首先从<code>request</code>变量获取<code>User</code>实例，然后在页面中直接输出，此处未考虑HTML的转义问题，有潜在安全风险。</li></ul><p>在浏览器访问<code>http://localhost:8080/user</code>，请求首先由<code>UserServlet</code>处理，然后交给<code>user.jsp</code>渲染：</p><p><img src="/posts/4b7be044.htm/1.png"></p><p>把<code>UserServlet</code>看作业务逻辑处理，把<code>User</code>看作模型，把<code>user.jsp</code>看作渲染，这种设计模式通常被称为MVC：Model-View-Controller，即<code>UserServlet</code>作为控制器（Controller），<code>User</code>作为模型（Model），<code>user.jsp</code>作为视图（View），整个MVC架构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">                   ┌───────────────────────┐</span><br><span class="line">             ┌────&gt;│Controller: UserServlet│</span><br><span class="line">             │     └───────────────────────┘</span><br><span class="line">             │                 │</span><br><span class="line">┌───────┐    │           ┌─────┴─────┐</span><br><span class="line">│Browser│────┘           │Model: User│</span><br><span class="line">│       │&lt;───┐           └─────┬─────┘</span><br><span class="line">└───────┘    │                 │</span><br><span class="line">             │                 ▼</span><br><span class="line">             │     ┌───────────────────────┐</span><br><span class="line">             └─────│    View: user.jsp     │</span><br><span class="line">                   └───────────────────────┘</span><br></pre></td></tr></table></figure><p>使用MVC模式的好处是，Controller专注于业务处理，它的处理结果就是Model。Model可以是一个JavaBean，也可以是一个包含多个对象的Map，Controller只负责把Model传递给View，View只负责把Model给“渲染”出来，这样，三者职责明确，且开发更简单，因为开发Controller时无需关注页面，开发View时无需关心如何创建Model。</p><hr><h2 id="MVC高级开发"><a href="#MVC高级开发" class="headerlink" title="MVC高级开发"></a>MVC高级开发</h2><p>通过普通的Java类实现MVC的Controller？类似下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/signin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">signin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/signin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doSignin</span><span class="params">(SignInBean bean)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/signout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">signout</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的这个Java类每个方法都对应一个GET或POST请求，方法返回值是<code>ModelAndView</code>，它包含一个View的路径以及一个Model，这样，再由MVC框架处理后返回给浏览器。</p><p>如果是GET请求，我们希望MVC框架能直接把URL参数按方法参数对应起来然后传入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是POST请求，我们希望MVC框架能直接把Post参数变成一个JavaBean后通过方法参数传入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/signin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doSignin</span><span class="params">(SignInBean bean)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p>把一些公用逻辑从各个Servlet中抽离出来，在HTTP请求到达Servlet之前，可以被一个或多个Filter预处理，类似打印日志、登录检查等，可以放到Filter中。</p><p>最简单的EncodingFilter，强制把输入和输出的编码设置为UTF-8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &#x27;/*&#x27;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="title">implement</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;EncodingFilter:doFilter&quot;</span>);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写Filter时，必须实现<code>Filter</code>接口，在<code>doFilter()</code>方法内部，要继续处理请求，必须调用<code>chain.doFilter()</code>。最后，用<code>@WebFilter</code>注解标注该Filter需要过滤的URL。</p><p>添加了Filter之后，整个请求的处理架构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">            ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">                                   /             ┌──────────────┐</span><br><span class="line">            │                     ┌─────────────&gt;│ IndexServlet │ │</span><br><span class="line">                                  │              └──────────────┘</span><br><span class="line">            │                     │/signin       ┌──────────────┐ │</span><br><span class="line">                                  ├─────────────&gt;│SignInServlet │</span><br><span class="line">            │                     │              └──────────────┘ │</span><br><span class="line">                                  │/signout      ┌──────────────┐</span><br><span class="line">┌───────┐   │   ┌──────────────┐  ├─────────────&gt;│SignOutServlet│ │</span><br><span class="line">│Browser│──────&gt;│EncodingFilter├──┤              └──────────────┘</span><br><span class="line">└───────┘   │   └──────────────┘  │/user/profile ┌──────────────┐ │</span><br><span class="line">                                  ├─────────────&gt;│ProfileServlet│</span><br><span class="line">            │                     │              └──────────────┘ │</span><br><span class="line">                                  │/user/post    ┌──────────────┐</span><br><span class="line">            │                     ├─────────────&gt;│ PostServlet  │ │</span><br><span class="line">                                  │              └──────────────┘</span><br><span class="line">            │                     │/user/reply   ┌──────────────┐ │</span><br><span class="line">                                  └─────────────&gt;│ ReplyServlet │</span><br><span class="line">            │                                    └──────────────┘ │</span><br><span class="line">             ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─</span><br></pre></td></tr></table></figure><p>LogFilter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;LogFilter: process &quot;</span> + ((HttpServletRequest) request).getRequestURI());</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个Filter会组成一个链，每个请求都被链上的Filter依次处理：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                                        ┌────────┐</span><br><span class="line">                                     ┌─&gt;│ServletA│</span><br><span class="line">                                     │  └────────┘</span><br><span class="line">    ┌──────────────┐    ┌─────────┐  │  ┌────────┐</span><br><span class="line">───&gt;│EncodingFilter│───&gt;│LogFilter│──┼─&gt;│ServletB│</span><br><span class="line">    └──────────────┘    └─────────┘  │  └────────┘</span><br><span class="line">                                     │  ┌────────┐</span><br><span class="line">                                     └─&gt;│ServletC│</span><br><span class="line">                                        └────────┘</span><br></pre></td></tr></table></figure><p><font color="green">Filter的顺序确实对处理的结果有影响</font></p><p>只对特定路径进行过滤的Filter，例如<code>AuthFilter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/user/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AuthFilter: check authentication&quot;</span>);</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) response;</span><br><span class="line">        <span class="keyword">if</span> (req.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 未登录，自动跳转到登录页:</span></span><br><span class="line">            System.out.println(<span class="string">&quot;AuthFilter: not signin!&quot;</span>);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/signin&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 已登录，继续处理:</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户没有登录时，在<code>AuthFilter</code>内部，直接调用<code>resp.sendRedirect()</code>发送重定向，且没有调用<code>chain.doFilter()</code>，因此，当用户没有登录时，请求到达<code>AuthFilter</code>后，不再继续处理，即后续的Filter和任何Servlet都没有机会处理该请求了。</p><p><font color="green">如果Filter要使请求继续被处理，就一定要调用chain.doFilter()！</font></p><hr><h2 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h2><hr><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>一个具体的Web应用程序为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">webapp</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── itranswarp</span><br><span class="line">        │           └── learnjava</span><br><span class="line">        │               ├── Main.java</span><br><span class="line">        │               ├── filter</span><br><span class="line">        │               │   └── EncodingFilter.java</span><br><span class="line">        │               └── servlet</span><br><span class="line">        │                   ├── FileServlet.java</span><br><span class="line">        │                   └── HelloServlet.java</span><br><span class="line">        ├── resources</span><br><span class="line">        └── webapp</span><br><span class="line">            ├── WEB-INF</span><br><span class="line">            │   └── web.xml</span><br><span class="line">            ├── favicon.ico</span><br><span class="line">            └── static</span><br><span class="line">                └── bootstrap.css</span><br></pre></td></tr></table></figure><p>一个处理静态文件的<code>FileServlet</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/static/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext ctx = req.getServletContext();</span><br><span class="line">        <span class="comment">// RequestURI包含ContextPath,需要去掉:</span></span><br><span class="line">        String urlPath = req.getRequestURI().substring(ctx.getContextPath().length());</span><br><span class="line">        <span class="comment">// 获取真实文件路径:</span></span><br><span class="line">        String filepath = ctx.getRealPath(urlPath);</span><br><span class="line">        <span class="keyword">if</span> (filepath == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 无法获取到路径:</span></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Path path = Paths.get(filepath);</span><br><span class="line">        <span class="keyword">if</span> (!path.toFile().isFile()) &#123;</span><br><span class="line">            <span class="comment">// 文件不存在:</span></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据文件名猜测Content-Type:</span></span><br><span class="line">        String mime = Files.probeContentType(path);</span><br><span class="line">        <span class="keyword">if</span> (mime == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mime = <span class="string">&quot;application/octet-stream&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.setContentType(mime);</span><br><span class="line">        <span class="comment">// 读取文件并写入Response:</span></span><br><span class="line">        OutputStream output = resp.getOutputStream();</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(filepath))) &#123;</span><br><span class="line">            input.transferTo(output);</span><br><span class="line">        &#125;</span><br><span class="line">        output.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用类似Nginx这样的服务器充当反向代理和静态服务器，只有动态请求才会放行给应用服务器，所以，部署架构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">             ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line"></span><br><span class="line">             │  /static/*            │</span><br><span class="line">┌───────┐      ┌──────────&gt; file</span><br><span class="line">│Browser├────┼─┤                     │    ┌ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">└───────┘      │/          proxy_pass</span><br><span class="line">             │ └─────────────────────┼───&gt;│  Web Server │</span><br><span class="line">                       Nginx</span><br><span class="line">             └ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘    └ ─ ─ ─ ─ ─ ─ ┘</span><br></pre></td></tr></table></figure><p>实现上述功能的Nginx配置文件如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name www.local.liaoxuefeng.com</span><br><span class="line"></span><br><span class="line">    # 静态文件根目录:</span><br><span class="line">    root /path/to/src/main/webapp;</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/webapp_access_log;</span><br><span class="line">    error_log  /var/log/nginx/webapp_error_log;</span><br><span class="line"></span><br><span class="line">    # 处理静态文件请求:</span><br><span class="line">    location /static &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 处理静态文件请求:</span><br><span class="line">    location /favicon.ico &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 不允许请求/WEB-INF:</span><br><span class="line">    location /WEB-INF &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 其他请求转发给Tomcat:</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass       http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Nginx配合Tomcat服务器，可以充分发挥Nginx作为网关的优势，既可以高效处理静态文件，也可以把https、防火墙、限速、反爬虫等功能放到Nginx中，使得WebApp能专注于业务逻辑。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;JavaSE，即Java Platform Standard Edition。JavaEE是Java Platform Enterprise Edition的缩写。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="Web" scheme="https://juoyo.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch19 JDBC</title>
    <link href="https://juoyo.github.io/posts/fe6c277a.html"/>
    <id>https://juoyo.github.io/posts/fe6c277a.html</id>
    <published>2020-03-06T09:58:25.000Z</published>
    <updated>2020-03-06T12:39:25.450Z</updated>
    
    <content type="html"><![CDATA[<p>Java为关系数据库定义了一套标准的访问接口：JDBC（Java Database Connectivity）。</p><a id="more"></a><h2 id="JDBC简介"><a href="#JDBC简介" class="headerlink" title="JDBC简介"></a>JDBC简介</h2><p>把某个数据库实现了JDBC接口的jar包称为JDBC驱动。</p><p>添加一个Maven依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.47&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>注意：添加依赖的<code>scope</code>是<code>runtime</code>，因为编译Java程序并不需要MySQL的这个jar包，只有在运行期才需要使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库learjdbc:</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> learnjdbc;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE learnjdbc;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建登录用户learn/口令learnpassword</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> learn@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;learnpassword&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> learnjdbc.<span class="operator">*</span> <span class="keyword">TO</span> learn@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表students:</span></span><br><span class="line">USE learnjdbc;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">  id <span class="type">BIGINT</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  gender TINYINT(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  grade <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  score <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>(id)</span><br><span class="line">) Engine<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>UTF8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入初始数据:</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (name, gender, grade, score) <span class="keyword">VALUES</span> (<span class="string">&#x27;小明&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">88</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (name, gender, grade, score) <span class="keyword">VALUES</span> (<span class="string">&#x27;小红&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">95</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="JDBC连接"><a href="#JDBC连接" class="headerlink" title="JDBC连接"></a>JDBC连接</h2><p>要获取数据库连接，使用如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; JDBC连接的URL, 不同数据库有不同的格式:</span><br><span class="line">String JDBC_URL &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;;</span><br><span class="line">String JDBC_USER &#x3D; &quot;root&quot;;</span><br><span class="line">String JDBC_PASSWORD &#x3D; &quot;password&quot;;</span><br><span class="line">&#x2F;&#x2F; 获取连接:</span><br><span class="line">Connection conn &#x3D; DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);</span><br><span class="line">&#x2F;&#x2F; TODO: 访问数据库...</span><br><span class="line">&#x2F;&#x2F; 关闭连接:</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><p>核心代码是<code>DriverManager</code>提供的静态方法<code>getConnection()</code>。<code>DriverManager</code>会自动扫描classpath，找到所有的JDBC驱动，然后根据我们传入的URL自动挑选一个合适的驱动。</p><p>因为JDBC连接是一种昂贵的资源，所以使用后要及时释放。使用<code>try (resource)</code>来自动释放JDBC连接是一个好方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">try (Connection conn &#x3D; DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC查询"><a href="#JDBC查询" class="headerlink" title="JDBC查询"></a>JDBC查询</h2><p>获取到JDBC连接后，下一步我们就可以查询数据库了。查询数据库分以下几步：</p><p>第一步，通过<code>Connection</code>提供的<code>createStatement()</code>方法创建一个<code>Statement</code>对象，用于执行一个查询；</p><p>第二步，执行<code>Statement</code>对象提供的<code>executeQuery(&quot;SELECT * FROM students&quot;)</code>并传入SQL语句，执行查询并获得返回的结果集，使用<code>ResultSet</code>来引用这个结果集；</p><p>第三步，反复调用<code>ResultSet</code>的<code>next()</code>方法并读取每一行结果。</p><p>完整查询代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">try (Connection conn &#x3D; DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD) &#123;</span><br><span class="line">    try (Statement stmt &#x3D; conn.createStatement()) &#123;</span><br><span class="line">        try (ResultSet rs &#x3D; stmt.executeQuery(&quot;SELECT id, grade, name, gender FROM students WHERE gender&#x3D;\&#39;M\&#39;&quot;)) &#123;</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line">                long id &#x3D; rs.getLong(1); &#x2F;&#x2F; 注意：索引从1开始</span><br><span class="line">                long grade &#x3D; rs.getLong(2);</span><br><span class="line">                String name &#x3D; rs.getString(3);</span><br><span class="line">                String gender &#x3D; rs.getString(4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入INSERT"><a href="#插入INSERT" class="headerlink" title="插入INSERT"></a>插入INSERT</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD) &#123;</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement ps = conn.prepareStatement(</span><br><span class="line">            <span class="string">&quot;INSERT INTO students (id, grade, name, gender) VALUES (?,?,?,?)&quot;</span>)) &#123;</span><br><span class="line">        ps.setObject(<span class="number">1</span>, <span class="number">999</span>); <span class="comment">// 注意：索引从1开始</span></span><br><span class="line">        ps.setObject(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// grade</span></span><br><span class="line">        ps.setObject(<span class="number">3</span>, <span class="string">&quot;Bob&quot;</span>); <span class="comment">// name</span></span><br><span class="line">        ps.setObject(<span class="number">4</span>, <span class="string">&quot;M&quot;</span>); <span class="comment">// gender</span></span><br><span class="line">        <span class="keyword">int</span> n = ps.executeUpdate(); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新UPDATE"><a href="#更新UPDATE" class="headerlink" title="更新UPDATE"></a>更新UPDATE</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD) &#123;</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement ps = conn.prepareStatement(<span class="string">&quot;UPDATE students SET name=? WHERE id=?&quot;</span>)) &#123;</span><br><span class="line">        ps.setObject(<span class="number">1</span>, <span class="string">&quot;Bob&quot;</span>); <span class="comment">// 注意：索引从1开始</span></span><br><span class="line">        ps.setObject(<span class="number">2</span>, <span class="number">999</span>);</span><br><span class="line">        <span class="keyword">int</span> n = ps.executeUpdate(); <span class="comment">// 返回更新的行数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除DELETE"><a href="#删除DELETE" class="headerlink" title="删除DELETE"></a>删除DELETE</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD) &#123;</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement ps = conn.prepareStatement(<span class="string">&quot;DELETE FROM students WHERE id=?&quot;</span>)) &#123;</span><br><span class="line">        ps.setObject(<span class="number">1</span>, <span class="number">999</span>); <span class="comment">// 注意：索引从1开始</span></span><br><span class="line">        <span class="keyword">int</span> n = ps.executeUpdate(); <span class="comment">// 删除的行数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h2><p>数据库事务（Transaction）是由若干个SQL语句构成的一个操作序列，有点类似于Java的<code>synchronized</code>同步。数据库系统保证在一个事务中的所有SQL要么全部执行成功，要么全部不执行，即数据库事务具有ACID特性：</p><ul><li>Atomicity：原子性</li><li>Consistency：一致性</li><li>Isolation：隔离性</li><li>Durability：持久性</li></ul><hr><h2 id="JDBC-Batch"><a href="#JDBC-Batch" class="headerlink" title="JDBC Batch"></a>JDBC Batch</h2><hr><h2 id="JDBC连接池"><a href="#JDBC连接池" class="headerlink" title="JDBC连接池"></a>JDBC连接池</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java为关系数据库定义了一套标准的访问接口：JDBC（Java Database Connectivity）。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="JDBC" scheme="https://juoyo.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch18 XML和JSON</title>
    <link href="https://juoyo.github.io/posts/dbf2c8c0.html"/>
    <id>https://juoyo.github.io/posts/dbf2c8c0.html</id>
    <published>2020-03-06T08:45:06.000Z</published>
    <updated>2020-03-06T09:40:20.425Z</updated>
    
    <content type="html"><![CDATA[<p>Java读写XML和JSON。</p><a id="more"></a><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML是可扩展标记语言（eXtensible Markup Language）的缩写，常用于传输和存储数据。</p><p>例如，一个描述书籍的XML文档可能如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;book.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Java核心技术<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span>Cay S. Horstmann<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">isbn</span> <span class="attr">lang</span>=<span class="string">&quot;CN&quot;</span>&gt;</span>1234567<span class="tag">&lt;/<span class="name">isbn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tags</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>Network<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tags</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pubDate</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XML有几个特点：一是纯文本，默认使用UTF-8编码，二是可嵌套，适合表示结构化数据。</p><hr><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>XML的特点是功能全面，但标签繁琐，格式复杂。在Web上使用XML现在越来越少，取而代之的是JSON这种数据结构。</p><p>JSON是JavaScript Object Notation的缩写，它去除了所有JavaScript执行代码，只保留JavaScript的对象格式。一个典型的JSON如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;name&quot;: &quot;Java核心技术&quot;,</span><br><span class="line">    &quot;author&quot;: &#123;</span><br><span class="line">        &quot;firstName&quot;: &quot;Abc&quot;,</span><br><span class="line">        &quot;lastName&quot;: &quot;Xyz&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;isbn&quot;: &quot;1234567&quot;,</span><br><span class="line">    &quot;tags&quot;: [&quot;Java&quot;, &quot;Network&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON作为数据传输的格式，有几个显著的优点：</p><ul><li>JSON只允许使用UTF-8编码，不存在编码问题；</li><li>JSON只允许使用双引号作为key，特殊字符用<code>\</code>转义，格式简单；</li><li>浏览器内置JSON支持，如果把数据用JSON发送给浏览器，可以用JavaScript直接处理。</li></ul><p>因此，JSON适合表示层次结构，因为它格式简单，仅支持以下几种数据类型：</p><ul><li>键值对：<code>&#123;&quot;key&quot;: value&#125;</code></li><li>数组：<code>[1, 2, 3]</code></li><li>字符串：<code>&quot;abc&quot;</code></li><li>数值（整数和浮点数）：<code>12.34</code></li><li>布尔值：<code>true</code>或<code>false</code></li><li>空值：<code>null</code></li></ul><p>浏览器直接支持使用JavaScript对JSON进行读写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON string to JavaScript object:</span></span><br><span class="line">jsObj = <span class="built_in">JSON</span>.parse(jsonStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript object to JSON string:</span></span><br><span class="line">jsonStr = <span class="built_in">JSON</span>.stringify(jsObj);</span><br></pre></td></tr></table></figure><p>解析JSON使用Jackson。</p><p>引入以下Maven依赖：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.10.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>可以使用下面的代码解析一个JSON文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">InputStream input = Main.class.getResourceAsStream(<span class="string">&quot;/book.json&quot;</span>);</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="comment">// 反序列化时忽略不存在的JavaBean属性:</span></span><br><span class="line">mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">Book book = mapper.readValue(input, Book.class);</span><br></pre></td></tr></table></figure><p>把JSON解析为JavaBean的过程称为反序列化。如果把JavaBean变为JSON，那就是序列化。要实现JavaBean到JSON的序列化，只需要一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String json = mapper.writeValueAsString(book);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java读写XML和JSON。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="XML" scheme="https://juoyo.github.io/tags/XML/"/>
    
    <category term="JSON" scheme="https://juoyo.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch17 网络编程</title>
    <link href="https://juoyo.github.io/posts/5d082689.html"/>
    <id>https://juoyo.github.io/posts/5d082689.html</id>
    <published>2020-02-23T14:17:09.000Z</published>
    <updated>2020-02-24T14:31:40.276Z</updated>
    
    <content type="html"><![CDATA[<p>TCP/IP协议簇泛指互联网协议, 最重要的两个协议是TCP协议和IP协议.Java进行网络编程时,虚拟机实现了底层复杂的网络协议,Java程序只需要调用Java标准库提供的接口.</p><a id="more"></a><p>一个应用程序通过一个Socket来建立一个远程连接，而Socket内部通过TCP/IP协议把数据传输到网络。一个Socket就是由IP地址和端口号（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号。</p><h2 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h2><hr><h2 id="UDP编程"><a href="#UDP编程" class="headerlink" title="UDP编程"></a>UDP编程</h2><hr><h2 id="HTTP编程"><a href="#HTTP编程" class="headerlink" title="HTTP编程"></a>HTTP编程</h2><hr><h2 id="RMI远程调用"><a href="#RMI远程调用" class="headerlink" title="RMI远程调用"></a>RMI远程调用</h2><p>客户端 JVM 中的代码可以通过网络实现远程调用服务器 JVM 的某个方法。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;TCP/IP协议簇泛指互联网协议, 最重要的两个协议是TCP协议和IP协议.Java进行网络编程时,虚拟机实现了底层复杂的网络协议,Java程序只需要调用Java标准库提供的接口.&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="TCP" scheme="https://juoyo.github.io/tags/TCP/"/>
    
    <category term="UDP" scheme="https://juoyo.github.io/tags/UDP/"/>
    
    <category term="HTTP" scheme="https://juoyo.github.io/tags/HTTP/"/>
    
    <category term="RMI" scheme="https://juoyo.github.io/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>Volume III Lesson 1  A Puma at large</title>
    <link href="https://juoyo.github.io/posts/814f90a3.html"/>
    <id>https://juoyo.github.io/posts/814f90a3.html</id>
    <published>2020-01-11T08:49:29.000Z</published>
    <updated>2020-01-11T17:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>新概念英语历久弥新，当前对我而言仍有意义，手写重温。</p><a id="more"></a><p><font color="green">A Puma at large</font></p><p>Pumas are large, cat-like animals which are found in America. When reports came into London Zoo that a wild puma had been spotted forty-five miles south of London, they were not taken seriously. However, as the evidence began to accumulate, experts from the Zoo felt obliged to investigate, for the descriptions given by people who claimed to have seen the puma were extraordinarily similar.</p><p>美洲狮是一种体形似猫的大动物，产于美洲。当伦敦动物园接到报告说，在伦敦以南 45 英里处发现一只美洲狮时，这些报告并没有受到重视。可是，随着证据越来越多，动物园的专家们感到有必要进行一番调查，因为凡是声称见到过美洲狮的人们所描述的情况竟是出奇地相似。  </p><hr><p>The hunt for the puma began in a small village where a woman picking blackberries saw ‘a large cat’ only five yards from her. It immediately ran away when she saw it, and experts confirmed that a puma will not attack a human being unless it is cornered. The search proved difficult, for the puma was often observed at one place in the morning and at another place twenty miles away in the evening. Wherever it went, it left behind it a trail of dead deer and small animals like rabbits. Paw prints were seen in a number of places and puma fur was found cling to bushes. Several people complained of ‘cat-like noises’ at night and a businessman on a fishing trip saw the puma up a tree. The experts were now fully convinced that the animal was a puma, but where had it come from? As no puma had been reported missing from any zoo in the country, this one must have been in the possessio of a private collector and somehow managed to escape. The hunt went on for several weeks, but the puma was not caught. It is disturbing to think that a dangerous wild animal is still at large in the quiet countryside.</p><p>搜寻美洲狮的工作是从一座小村庄开始的。那里的一位妇女在采摘黑莓时的看见“一只大猫”，离她仅 5 码远，她刚看见它，它就立刻逃走了。专家证实，美洲狮非被逼得走投无路，是决不会伤人的。事实上搜寻工作很困难，因为常常是早晨在甲地发现那只美洲狮，晚上却在 20 英里外的乙地发现它的踪迹。无论它走哪儿，一路上总会留下一串死鹿及死兔子之类的小动物，在许多地方看见爪印，灌木丛中发现了粘在上面的美洲狮毛。有人抱怨说夜里听见“像猫一样的叫声”；一位商人去钓鱼，看见那只美洲狮在树上。专家们如今已经完全肯定那只动物就是美洲狮，但它是从哪儿来的呢？由于全国动物园没有一家报告丢了美洲狮，因此那只美洲狮一定是某位私人收藏豢养的，不知怎么设法逃出来了。搜寻工作进行了好几个星期，但始终未能逮住那只美洲狮。想到在宁静的乡村里有一头危险的野兽继续逍遥流窜，真令人担心。  </p><hr><p><font color="green">New words and expressions 生词和短语</font><br>puma<br>n. 美洲狮<br>spot<br>v. 看出，发现<br>evidence<br>n. 证据<br>accumulate<br>v. 积累，积聚<br>oblige<br>v. 使……感到必须<br>hunt<br>n. 追猎；寻找<br>blackberry<br>n. 黑莓<br>human being<br>人类<br>corner<br>v. 使走投无路，使陷入困境<br>trail<br>n. 一串，一系列<br>print<br>n. 印痕<br>cling<br>v. 粘<br>convince<br>v. 使……信服<br>somehow<br>adv. 不知怎么搞地，不知什么原因<br>disturb<br>v. 令人不安  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;新概念英语历久弥新，当前对我而言仍有意义，手写重温。&lt;/p&gt;</summary>
    
    
    
    <category term="English" scheme="https://juoyo.github.io/categories/English/"/>
    
    
    <category term="New Concept English" scheme="https://juoyo.github.io/tags/New-Concept-English/"/>
    
    <category term="Lesson 1" scheme="https://juoyo.github.io/tags/Lesson-1/"/>
    
  </entry>
  
  <entry>
    <title>P13 Z字形变换 LeetCode6</title>
    <link href="https://juoyo.github.io/posts/a6adf557.html"/>
    <id>https://juoyo.github.io/posts/a6adf557.html</id>
    <published>2019-12-21T15:20:48.000Z</published>
    <updated>2019-12-30T15:18:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>P13 Z字形变换，难度中等。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><em>English</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">The string &quot;PAYPALISHIRING&quot; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</span><br><span class="line"></span><br><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br><span class="line">And then read line by line: &quot;PAHNAPLSIIGYIR&quot;</span><br><span class="line"></span><br><span class="line">Write the code that will take a string and make this conversion given a number of rows:</span><br><span class="line"></span><br><span class="line">string convert(string s, int numRows);</span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 3</span><br><span class="line">Output: &quot;PAHNAPLSIIGYIR&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 4</span><br><span class="line">Output: &quot;PINALSIGYAHRPI&quot;</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>中文</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</span><br><span class="line"></span><br><span class="line">比如输入字符串为 &quot;LEETCODEISHIRING&quot; 行数为 3 时，排列如下：</span><br><span class="line"></span><br><span class="line">L   C   I   R</span><br><span class="line">E T O E S I I G</span><br><span class="line">E   D   H   N</span><br><span class="line">之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&quot;LCIRETOESIIGEDHN&quot;。</span><br><span class="line"></span><br><span class="line">请你实现这个将字符串进行指定行数变换的函数：</span><br><span class="line"></span><br><span class="line">string convert(string s, int numRows);</span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 3</span><br><span class="line">输出: &quot;LCIRETOESIIGEDHN&quot;</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 4</span><br><span class="line">输出: &quot;LDREOEIIECIHNTSG&quot;</span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;zigzag-conversion</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="伪代码描述（推荐）"><a href="#伪代码描述（推荐）" class="headerlink" title="伪代码描述（推荐）"></a>伪代码描述（推荐）</h3><h3 id="分析及源码"><a href="#分析及源码" class="headerlink" title="分析及源码"></a>分析及源码</h3><p><img src="/posts/a6adf557.htm/A_JS\hexo\source_posts\P13-Z字形变换-LeetCode6\1.jpg"></p><p>图形其实是有周期的，0，1，2 … 7 共8 个，周期的计算就是 cycleLen = 2 × numRows - 2 = 2 × 5 - 2 = 8 个。</p><p>我们发现第 0 行和最后一行一个周期内有一个字符，所以第一个字符下标是 0 ，第二个字符下标是 0 + cycleLen = 8，第三个字符下标是 8 + cycleLen = 16 。</p><p>其他行都是两个字符，</p><p>第 1 个字符和第 0 行的规律是一样的。</p><p>第 2 个字符下标其实就是下一个周期的第 0 行的下标减去当前行。</p><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span> cycleLen = <span class="number">2</span> * numRows - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + i &lt; n; j += cycleLen) &#123;</span><br><span class="line">                res.append(s.charAt(j + i));</span><br><span class="line">                <span class="comment">// 除第0行和最后一行</span></span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i != numRows - <span class="number">1</span> &amp;&amp; j + cycleLen - i &lt; n) &#123;</span><br><span class="line">                    res.append(s.charAt(j + cycleLen - i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行用时 :4 ms, 在所有 java 提交中击败了94.73%的用户</span><br><span class="line"></span><br><span class="line">内存消耗 :37.8 MB, 在所有 java 提交中击败了98.19%的用户</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;P13 Z字形变换，难度中等。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="字符串" scheme="https://juoyo.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>P12 无重复字符的最长子串 LeetCode3</title>
    <link href="https://juoyo.github.io/posts/a627a612.html"/>
    <id>https://juoyo.github.io/posts/a627a612.html</id>
    <published>2019-12-21T14:03:58.000Z</published>
    <updated>2019-12-21T15:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>P12 无重复字符的最长子串，难度中等。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><em>English</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Given a string, find the length of the longest substring without repeating characters.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3. </span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>中文</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br><span class="line"></span><br><span class="line">链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</span><br></pre></td></tr></table></figure><hr><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="伪代码描述（推荐）"><a href="#伪代码描述（推荐）" class="headerlink" title="伪代码描述（推荐）"></a>伪代码描述（推荐）</h3><hr><h3 id="解题和源码"><a href="#解题和源码" class="headerlink" title="解题和源码"></a>解题和源码</h3><p>Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        StartIndex = <span class="number">0</span></span><br><span class="line">        MaxLength = <span class="number">0</span></span><br><span class="line">        UsedDict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> UsedDict <span class="keyword">and</span> StartIndex &lt;= UsedDict[char]:</span><br><span class="line">                StartIndex = UsedDict[char] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> index-StartIndex+<span class="number">1</span>&gt;MaxLength:</span><br><span class="line">                    MaxLength = index-StartIndex+<span class="number">1</span></span><br><span class="line">            UsedDict[char] = index</span><br><span class="line">        <span class="keyword">return</span> MaxLength</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行用时 :24 ms, 在所有 python 提交中击败了99.91%的用户</span><br><span class="line"></span><br><span class="line">内存消耗 :12.1 MB, 在所有 python 提交中击败了39.47%的用户</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;P12 无重复字符的最长子串，难度中等。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>P11 两数相加 LeetCode2</title>
    <link href="https://juoyo.github.io/posts/7a7dd633.html"/>
    <id>https://juoyo.github.io/posts/7a7dd633.html</id>
    <published>2019-12-21T14:02:53.000Z</published>
    <updated>2019-12-21T15:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>P11 两数之和，难度中等。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><em>English</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</span><br><span class="line"></span><br><span class="line">You may assume the two numbers do not contain any leading zero, except the number 0 itself.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>中文</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</span><br><span class="line"></span><br><span class="line">如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</span><br><span class="line"></span><br><span class="line">您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br><span class="line"></span><br><span class="line">链接：https://leetcode-cn.com/problems/add-two-numbers</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="伪代码描述"><a href="#伪代码描述" class="headerlink" title="伪代码描述"></a>伪代码描述</h3><h2 id="分析及源码"><a href="#分析及源码" class="headerlink" title="分析及源码"></a>分析及源码</h2><p>Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1, l2</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = l1</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        num1 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            num1 = num1 + i*n.val</span><br><span class="line">            i = <span class="number">10</span> * i</span><br><span class="line">            n = n.<span class="built_in">next</span></span><br><span class="line">        m = l2</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        num2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> m:</span><br><span class="line">            num2 = num2 + j*m.val</span><br><span class="line">            j = <span class="number">10</span> * j</span><br><span class="line">            m = m.<span class="built_in">next</span></span><br><span class="line">        strnum = <span class="built_in">str</span>(num1 + num2)</span><br><span class="line">        strnum = strnum[::-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        res = result = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> strnum:</span><br><span class="line">            result.<span class="built_in">next</span> = ListNode(<span class="built_in">int</span>(i))</span><br><span class="line">            result = result.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行用时 :76 ms, 在所有 python 提交中击败了15.18%的用户</span><br><span class="line"></span><br><span class="line">内存消耗 :12 MB, 在所有 python 提交中击败了8.72%的用户</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;P11 两数之和，难度中等。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="链表" scheme="https://juoyo.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="数学" scheme="https://juoyo.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>P10 两数之和 LeetCode1</title>
    <link href="https://juoyo.github.io/posts/3aff3e2e.html"/>
    <id>https://juoyo.github.io/posts/3aff3e2e.html</id>
    <published>2019-12-21T14:01:25.000Z</published>
    <updated>2019-12-21T15:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>P10两数之和，难度简单，相关标签为数组、哈希表。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><em>Englist</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Given an array of integers, return indices of the two numbers such that they add up to a specific target.</span><br><span class="line"></span><br><span class="line">You may assume that each input would have exactly one solution, and you may not use the same element twice.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure><p><em>中文</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</span><br><span class="line"></span><br><span class="line">你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br><span class="line"></span><br><span class="line">链接：https://leetcode-cn.com/problems/two-sum</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="伪代码描述（推荐）"><a href="#伪代码描述（推荐）" class="headerlink" title="伪代码描述（推荐）"></a>伪代码描述（推荐）</h3><hr><h3 id="分析及源码"><a href="#分析及源码" class="headerlink" title="分析及源码"></a>分析及源码</h3><p>Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            another_num = target - num</span><br><span class="line">            <span class="keyword">if</span> another_num <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">                <span class="keyword">return</span> [<span class="built_in">dict</span>[another_num], i]</span><br><span class="line">            <span class="built_in">dict</span>[num] = i</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行用时 :40 ms, 在所有 python 提交中击败了84.19%的用户</span><br><span class="line"></span><br><span class="line">内存消耗 :13.1 MB, 在所有 python 提交中击败了11.73%的用户</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;P10两数之和，难度简单，相关标签为数组、哈希表。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="https://juoyo.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="哈希表" scheme="https://juoyo.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>P9 最长回文子串 LeetCode5</title>
    <link href="https://juoyo.github.io/posts/7e6bdb80.html"/>
    <id>https://juoyo.github.io/posts/7e6bdb80.html</id>
    <published>2019-12-17T15:27:28.000Z</published>
    <updated>2019-12-21T15:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>题解后补。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><hr><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="伪代码描述（推荐）"><a href="#伪代码描述（推荐）" class="headerlink" title="伪代码描述（推荐）"></a>伪代码描述（推荐）</h3><h3 id="分析及源码"><a href="#分析及源码" class="headerlink" title="分析及源码"></a>分析及源码</h3><p>Java解法一</p><p>暴力求解，列举所有的子串，判断是否为回文串，保存最长的回文串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgePalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != s.charAt(len - i - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= len; j++) &#123;</span><br><span class="line">                String testString = s.substring(i, j);</span><br><span class="line">                <span class="keyword">if</span> (judgePalindrome(testString) &amp;&amp; testString.length() &gt; maxLength) &#123;</span><br><span class="line">                    res = s.substring(i, j);</span><br><span class="line">                    maxLength = Math.max(maxLength, res.length());</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度： O（n³）。</p><p>空间复杂度：O（1），常数个变量。</p><p>暴力解法通过案例数101/103</p><p>Java解法二</p><p>把原来的字符串倒置了，然后找最长的公共子串。</p><p>求最长公共子串（不是公共子序列），有很多方法，这里用动态规划的方法，</p><p>整体思想就是，申请一个二维的数组初始化为 0，然后判断对应的字符是否相等，相等的话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr [ i ][ j ] = arr [ i - <span class="number">1</span> ][ j - <span class="number">1</span>] + <span class="number">1</span> </span><br></pre></td></tr></table></figure><p>当 i = 0 或者 j = 0 的时候单独分析，字符相等的话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr [ i ][ j ] &#x3D; 1</span><br></pre></td></tr></table></figure><p>$$<br>arr[i][j]<br>$$</p><p>保存的就是公共子串的长度。</p><p><font color="red">当原始字符串S 的其他部分中存在非回文子串的反向副本时，最长公共子串法就会失败。</font></p><p>当找到最长的公共子串的候选项时，都需要检查子串的索引是否与反向子串的原始索引相同。如果相同，那么我们尝试更新目前为止找到的最长回文子串；如果不是，我们就跳过这个候选项并继续寻找下一个候选。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (s.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       String originStr = s;</span><br><span class="line">       String reverseStr = <span class="keyword">new</span> StringBuffer(s).reverse().toString();</span><br><span class="line">       <span class="keyword">int</span> length = s.length();</span><br><span class="line">       <span class="keyword">int</span> [][] array = <span class="keyword">new</span> <span class="keyword">int</span>[length][length];</span><br><span class="line">       <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">// 记录最大回文串结尾的字符</span></span><br><span class="line">       <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (originStr.charAt(i) == reverseStr.charAt(j)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                       array[i][j] = <span class="number">1</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       array[i][j] = array[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (array[i][j] &gt; maxLen) &#123;</span><br><span class="line">                   <span class="keyword">int</span> beforeRev = length - <span class="number">1</span> -j;</span><br><span class="line">                   <span class="keyword">if</span> (beforeRev + array[i][j] - <span class="number">1</span> == i) &#123;</span><br><span class="line">                    maxLen = array[i][j];</span><br><span class="line">                    maxEnd = i;</span><br><span class="line">                   &#125; </span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> s.substring(maxEnd - maxLen + <span class="number">1</span>, maxEnd + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：两层循环，O（n²）。</p><p>空间复杂度：一个二维数组，O（n²）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题解后补。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="字符串" scheme="https://juoyo.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="动态规划" scheme="https://juoyo.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="回文子串" scheme="https://juoyo.github.io/tags/%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>多模态情感分析简述</title>
    <link href="https://juoyo.github.io/posts/156aeb2d.html"/>
    <id>https://juoyo.github.io/posts/156aeb2d.html</id>
    <published>2019-12-17T08:46:21.000Z</published>
    <updated>2019-12-21T15:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>多模态数据主要指声音、图像、文字，以及传感器数据，本文所指多模态数据不涉及传感器数据。如何分析多模态数据，是当前情感分析领域面临的机遇和挑战。</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一方面，以往情感分析聚焦于单个模态。如文本情感分析着眼于分析，挖掘和推理文本中蕴含的情感。另一方面，多模态数据与单模态数据相比，包含了更多的信息，多个模态之间可以互相补充。</p><p>不同模态信息相互补充，可以帮助机器更好地理解情感。从人机交互角度出发，多模态情感分析可以使得机器在更加自然的情况下与人进行交互。机器可以基于图像中人的表情和手势，声音中的音调，和识别出的自然语言来理解用户情感，进而进行反馈。</p><p>虽然多模态数据包含了更多的信息，但如何进行多模态数据的融合，使得利用多模态数据能够提升效果，而不是起了反作用。如何利用不同模态数据之间的对齐信息，建模不同模态数据之间关联。</p><p>为了能够更好的介绍多模态情感分析领域的相关研究，本文梳理了目前多模态情感分析领域相关任务并总结了常用的数据集及对应的方法。</p><hr><h2 id="相关任务概览"><a href="#相关任务概览" class="headerlink" title="相关任务概览"></a>相关任务概览</h2><p>本文通过不同模态组合（图文：文本+图片，视频：文本+图片+音频）来梳理相关的研究任务。</p><ul><li><p>面向图文的情感分析任务有面向图文的情感分类任务，面向图文的方面级情感分类任务和面向图文的反讽识别任务</p></li><li><p>面向视频的情感分析任务有面向评论视频的情感分类任务，面向新闻视频的情感分类任务，面向对话视频的情感分类任务和面向对话视频的反讽识别任务。</p></li></ul><p><img src="/posts/156aeb2d.htm/A_JS\hexo\source_posts\多模态情感分析简述\1.jpg"> </p><hr><h2 id="数据集和方法"><a href="#数据集和方法" class="headerlink" title="数据集和方法"></a>数据集和方法</h2><p>本文总结了13个公开数据集，其中包括8个视频数据集和5个图文数据集。本文还总结了与面向图文的情感分类任务，面向图文的方面级情感分类任务，面向图文的反讽识别任务，面向评论视频的情感分类任务和面向对话视频的情感分类任务五个任务对应的相关研究方法。</p><h3 id="面向图文的情感分类任务"><a href="#面向图文的情感分类任务" class="headerlink" title="面向图文的情感分类任务"></a>面向图文的情感分类任务</h3><h4 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h4><p>Yelp数据集来自Yelp.com评论网站，收集的是波士顿，芝加哥，洛杉矶，纽约，旧金山五个城市关于餐厅和食品的Yelp上的评论。一共有44305条评论，244569张图片（每条评论的图片有多张），平均每条评论有13个句子，230个单词。数据集的情感标注是对每条评论的情感倾向打1,2,3,4,5五个分值。</p><p>Tumblr数据集是从Tumblr收集来的多模态情绪数据集。Tumblr是一种微博客服务，用户在上面发布的多媒体内容通常包含：图片、文本和标签。数据集是根据选定的十五种情绪搜索对应的情绪标签的推文，并且只选择其中既有文本又有图片的部分，然后进行了数据处理，删除了那些文本中原本就包含对应情绪词的内容，以及那些主要不是英文为主的推文。整个数据集共有256897个多模态推文，其中情绪标注为包含高兴，悲伤，厌恶在内的十五种情绪。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><hr><h3 id="面向图文的方面级情感分类任务"><a href="#面向图文的方面级情感分类任务" class="headerlink" title="面向图文的方面级情感分类任务"></a>面向图文的方面级情感分类任务</h3><h4 id="数据集-1"><a href="#数据集-1" class="headerlink" title="数据集"></a>数据集</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;多模态数据主要指声音、图像、文字，以及传感器数据，本文所指多模态数据不涉及传感器数据。如何分析多模态数据，是当前情感分析领域面临的机遇和挑战。&lt;/p&gt;</summary>
    
    
    
    
    <category term="情感分析" scheme="https://juoyo.github.io/tags/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
    
    <category term="多模态" scheme="https://juoyo.github.io/tags/%E5%A4%9A%E6%A8%A1%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>读论文5 Recurrent Attention Network on Memory for Aspect Sentiment Analysis</title>
    <link href="https://juoyo.github.io/posts/7095c69b.html"/>
    <id>https://juoyo.github.io/posts/7095c69b.html</id>
    <published>2019-12-16T06:12:57.000Z</published>
    <updated>2019-12-16T07:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>多注意力机制与递归神经网络的非线性组合，加权记忆机制。</p><a id="more"></a><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>多注意机制来捕获距离较远的情绪特征，multiple attentions 的结果与RNN的非线性结合，在处理更多的并发时增强了模型的表达能力。</p><p>加权记忆机制不仅可以避免劳动密集型的特征工程工作, 而且还为句子的不同观点目标提供了量身定做的记忆。</p><hr><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>“方面情绪分析” 的目标是识别评论/评论中表达的特定意见目标的情绪极性 (即消极、中性或积极)。</p><p>为了确定独立的意见目标的情绪, 一项关键任务是在其原始句子中为目标建立适当的上下文特征。</p><p>本文提出了在目标情绪分析中解决上述问题的新框架。具体来说, 我们的框架首先采用双向 LSTM (BLSTM) 从输入来产生memory  (即由 LSTM 生成的时间步骤的状态), 因为双向递归神经网络 (RNNs) 在机器中被发现类似目的是有效的(Bahdanau et al., 2014). 。然后将memory 切片按其相对位置加权到目标, 使同一句子中的不同目标有自己的量身定做的memory 。在此之后, 我们对位置加权memory 进行了多重attention , 并将注意力结果用recurrent network  (i.e. GRUs ) 进行了非线性的结合。最后, 对 GRU 网络的输出进行了 softmax, 以预测目标的情绪。<br>引入了一种新的应用多重注意机制的方法来合成难句结构中的重要特征。 这有点类似于一个人的认知过程, 在开始的时候可能首先注意到重要信息的一部分, 然后在阅读时注意到更多, 最后将信息从多重关注中结合起来得出结论。模型将多重关注的结果与 GRU 网络相结合, 它从 RNNs 中继承了不同的行为, 如遗忘、维护和非线性变换, 从而使预测精度更高。</p><hr><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><p>第一个评价指标是Accuracy , 用于(Tang et al., 2016) 。因为数据集的类不平衡，因此也报告了宏平均的 F-measure。</p><hr><h2 id="Conclusions-and-Future-Work"><a href="#Conclusions-and-Future-Work" class="headerlink" title="Conclusions and Future Work"></a>Conclusions and Future Work</h2><p>本文提出了一种确定舆论目标情绪的框架。模型首先通过输入来生成内存, 在这个过程中, 它可以合成单词序列特征。然后, 通过将不同关注的特征与非线性相结合, 对记忆中的重要信息进行多项关注, 以预测最终情绪。</p><p>虽然多注意机制有可能综合复杂句子中的特征, 但强制模型对内存的固定数的注意是不自然的, 甚至有些情况下是不合理的。因此, 如果无法从内存中读取更多有用的信息, 我们需要一个机制来自动停止注意过程。我们也可以尝试其他内存加权策略, 以区分多个目标在一个评论更清楚</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;多注意力机制与递归神经网络的非线性组合，加权记忆机制。&lt;/p&gt;</summary>
    
    
    
    <category term="读论文" scheme="https://juoyo.github.io/categories/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="情感分析" scheme="https://juoyo.github.io/tags/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
    
    <category term="Memory" scheme="https://juoyo.github.io/tags/Memory/"/>
    
    <category term="Multiple Attention" scheme="https://juoyo.github.io/tags/Multiple-Attention/"/>
    
  </entry>
  
  <entry>
    <title>P8 寻找两个有序数组的中位数 LeetCode4</title>
    <link href="https://juoyo.github.io/posts/599b393a.html"/>
    <id>https://juoyo.github.io/posts/599b393a.html</id>
    <published>2019-12-15T16:13:54.000Z</published>
    <updated>2019-12-17T00:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>题解后补。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><hr><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="伪代码描述（推荐）"><a href="#伪代码描述（推荐）" class="headerlink" title="伪代码描述（推荐）"></a>伪代码描述（推荐）</h3><hr><h3 id="思路及源码"><a href="#思路及源码" class="headerlink" title="思路及源码"></a>思路及源码</h3><p>Java解法一</p><p>思想：先将两个数组合并，归并排序。根据奇数，还是偶数，返回中位数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[m + n]; </span><br><span class="line">        <span class="comment">// nums1为空</span></span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (nums2[n / <span class="number">2</span> - <span class="number">1</span>] + nums2[n / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> nums2[n / <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// nums为空</span></span><br><span class="line">        <span class="keyword">if</span> ( n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( m % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (nums1[m / <span class="number">2</span> - <span class="number">1</span>] + nums1[m / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> nums1[m / <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// nums数组未合并完</span></span><br><span class="line">        <span class="keyword">while</span> (count != (m + n)) &#123;</span><br><span class="line">            <span class="comment">// nums1合并完，直接将nums2剩余部分复制到nums后</span></span><br><span class="line">            <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">                <span class="keyword">while</span> ( j != n) &#123;</span><br><span class="line">                    nums[count++] = nums2[j++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                <span class="keyword">while</span> (i != m) &#123;</span><br><span class="line">                    nums[count++] = nums1[i++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// nums1、nums2逐一复制到nums中</span></span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">                nums[count++] = nums1[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[count++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按奇偶返回中位数</span></span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (nums[count / <span class="number">2</span> - <span class="number">1</span>] + nums[ count / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[count / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：遍历全部数组，O（m + n）</p><p>空间复杂度：开辟了一个数组，保存合并后的两个数组，O（m + n）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题解后补。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="分治算法" scheme="https://juoyo.github.io/tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    
    <category term="归并" scheme="https://juoyo.github.io/tags/%E5%BD%92%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch16 Maven基础</title>
    <link href="https://juoyo.github.io/posts/54cd077b.html"/>
    <id>https://juoyo.github.io/posts/54cd077b.html</id>
    <published>2019-12-14T11:09:02.000Z</published>
    <updated>2019-12-14T12:46:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Maven是Java项目不可缺少的工具，用于项目管理和构建工具。</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Java项目首先需要依赖包的管理，确定引入哪些依赖包，把相关的jar包都放到classpath中。</p><p>其次，我们要确定项目的目录结构。例如，<code>src</code>目录存放Java源码，<code>resources</code>目录存放配置文件，<code>bin</code>目录存放编译生成的<code>.class</code>文件。</p><p>第三，需要配置环境，例如JDK的版本，编译打包的流程，当前代码的版本号。</p><p>最后，除了使用Eclipse这样的IDE进行编译外，我们还必须能通过命令行工具进行编译，才能够让项目在一个独立的服务器上编译、测试、部署。</p><p>Maven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构；</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li><li>提供了一套依赖管理机制。</li></ul><h3 id="Maven项目结构"><a href="#Maven项目结构" class="headerlink" title="Maven项目结构"></a>Maven项目结构</h3><p>一个使用Maven管理的普通的Java项目，它的目录结构默认如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a-maven-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   └── test</span><br><span class="line">│       ├── java</span><br><span class="line">│       └── resources</span><br><span class="line">└── target</span><br></pre></td></tr></table></figure><p>根目录<code>a-maven-project</code>是项目名，项目描述文件<code>pom.xml</code>，存放Java源码的目录是<code>src/main/java</code>，存放资源文件的目录是<code>src/main/resources</code>，存放测试源码的目录是<code>src/test/java</code>，存放测试资源的目录是<code>src/test/resources</code>，最后，所有编译、打包生成的文件都放在<code>target</code>目录里。</p><p>项目描述文件<code>pom.xml</code>内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>groupId</code>类似于Java的包名，通常是公司或组织名称，<code>artifactId</code>类似于Java的类名，通常是项目名称，再加上<code>version</code>，一个Maven工程就是由<code>groupId</code>，<code>artifactId</code>和<code>version</code>作为唯一标识。</p><p>引用其他第三方库的时候，也是通过这3个变量确定。例如，依赖<code>commons-logging</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>&lt;dependency&gt;</code>声明一个依赖后，Maven就会自动下载这个依赖包并把它放到classpath中。</p><h3 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h3><p><a href="https://maven.apache.org/">Maven官网</a>下载，本地解压，设置环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M2_HOME&#x3D;&#x2F;path&#x2F;to&#x2F;maven-3.6.x</span><br><span class="line">PATH&#x3D;$PATH:$M2_HOME&#x2F;bin</span><br></pre></td></tr></table></figure><p>Windows把<code>%M2_HOME%\bin</code>添加到系统Path变量中。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Maven是一个Java项目的管理和构建工具：</p><ul><li>Maven使用<code>pom.xml</code>定义项目内容，并使用预设的目录结构；</li><li>在Maven中声明一个依赖项可以自动下载并导入classpath；</li><li>Maven使用<code>groupId</code>，<code>artifactId</code>和<code>version</code>唯一定位一个依赖。</li></ul><hr><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>Maven解决了依赖管理问题。例如，我们的项目依赖<code>abc</code>这个jar包，而<code>abc</code>又依赖<code>xyz</code>这个jar包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">┌──────────────┐</span><br><span class="line">│Sample Project│</span><br><span class="line">└──────────────┘</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">┌──────────────┐</span><br><span class="line">│     abc      │</span><br><span class="line">└──────────────┘</span><br><span class="line">        │</span><br><span class="line">        ▼</span><br><span class="line">┌──────────────┐</span><br><span class="line">│     xyz      │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure><p>当我们声明了<code>abc</code>的依赖时，Maven自动把<code>abc</code>和<code>xyz</code>都加入了项目依赖。</p><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>Maven定义了几种依赖关系，分别是<code>compile</code>、<code>test</code>、<code>runtime</code>和<code>provided</code>：</p><table><thead><tr><th align="left">scope</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">编译时需要用到该jar包（默认）</td><td align="left">commons-logging</td></tr><tr><td align="left">test</td><td align="left">编译Test时需要用到该jar包</td><td align="left">junit</td></tr><tr><td align="left">runtime</td><td align="left">编译时不需要，但运行时需要用到</td><td align="left">mysql</td></tr><tr><td align="left">provided</td><td align="left">编译时需要用到，但运行时由JDK或某个服务器提供</td><td align="left">servlet-api</td></tr></tbody></table><p>其中，默认的<code>compile</code>是最常用的，Maven会把这种类型的依赖直接放入classpath。</p><p><code>test</code>依赖表示仅在测试时使用，正常运行时并不需要。最常用的<code>test</code>依赖就是JUnit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit-jupiter-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.3.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><code>runtime</code>依赖表示编译时不需要，但运行时需要。最典型的<code>runtime</code>依赖是JDBC驱动，例如MySQL驱动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.48&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><code>provided</code>依赖表示编译时需要，但运行时不需要。最典型的<code>provided</code>依赖是Servlet API，编译的时候需要，但是运行时，Servlet服务器内置了相关的jar，所以运行期不需要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>Maven维护了一个中央仓库（<a href="https://repo1.maven.org/">repo1.maven.org</a>），所有第三方库将自身的jar以及相关信息上传至中央仓库，Maven就可以从中央仓库把所需依赖下载到本地。</p><p>Maven并不会每次都从中央仓库下载jar包。一个jar包一旦被下载过，就会被Maven自动缓存在本地目录（用户主目录的<code>.m2</code>目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的jar包。</p><hr><h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><p>Maven有一套标准化的构建流程，可以自动化实现编译，打包，发布。</p><h3 id="Lifecycle和Phase"><a href="#Lifecycle和Phase" class="headerlink" title="Lifecycle和Phase"></a>Lifecycle和Phase</h3><p>使用Maven时，我们首先要了解什么是Maven的生命周期（lifecycle）。</p><p>Maven的生命周期由一系列阶段（phase）构成，以内置的生命周期<code>default</code>为例，它包含以下phase：</p><ul><li>validate</li><li>initialize</li><li>generate-sources</li><li>process-sources</li><li>generate-resources</li><li>process-resources</li><li>compile</li><li>process-classes</li><li>generate-test-sources</li><li>process-test-sources</li><li>generate-test-resources</li><li>process-test-resources</li><li>test-compile</li><li>process-test-classes</li><li>test</li><li>prepare-package</li><li>package</li><li>pre-integration-test</li><li>integration-test</li><li>post-integration-test</li><li>verify</li><li>install</li><li>deploy</li></ul><p>如果我们运行<code>mvn package</code>，Maven就会执行<code>default</code>生命周期，它会从开始一直运行到<code>package</code>这个phase为止：</p><ul><li>validate</li><li>…</li><li>package</li></ul><p>如果我们运行<code>mvn compile</code>，Maven也会执行<code>default</code>生命周期，但这次它只会运行到<code>compile</code>，即以下几个phase：</p><ul><li>validate</li><li>…</li><li>compile</li></ul><p>Maven另一个常用的生命周期是<code>clean</code>，它会执行3个phase：</p><ul><li>pre-clean</li><li>clean （注意这个clean不是lifecycle而是phase）</li><li>post-clean</li></ul><p>经常使用的命令有：</p><p><code>mvn clean</code>：清理所有生成的class和jar；</p><p><code>mvn clean compile</code>：先清理，再执行到<code>compile</code>；</p><p><code>mvn clean test</code>：先清理，再执行到<code>test</code>，因为执行<code>test</code>前必须执行<code>compile</code>，所以这里不必指定<code>compile</code>；</p><p><code>mvn clean package</code>：先清理，再执行到<code>package</code>。</p><p>经常用到的phase其实只有几个：</p><ul><li><p>clean：清理</p></li><li><p>compile：编译</p></li><li><p>test：运行测试</p></li><li><p>package：打包</p></li><li><p>lifecycle相当于Java的package，它包含一个或多个phase；</p></li><li><p>phase相当于Java的class，它包含一个或多个goal；</p></li><li><p>goal相当于class的method，它其实才是真正干活的。</p></li></ul><p>大多数情况，我们只要指定phase，就默认执行这些phase默认绑定的goal，只有少数情况，我们可以直接指定运行一个goal，例如，启动Tomcat服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn tomcat:run</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Maven通过lifecycle、phase和goal来提供标准的构建流程。</p><p>最常用的构建命令是指定phase，然后让Maven执行到指定的phase：</p><ul><li>mvn clean</li><li>mvn clean compile</li><li>mvn clean test</li><li>mvn clean package</li></ul><p>通常情况，我们总是执行phase默认绑定的goal，因此不必指定goal。</p><hr><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>Maven已经内置了一些常用的标准插件：</p><table><thead><tr><th align="left">插件名称</th><th align="left">对应执行的phase</th></tr></thead><tbody><tr><td align="left">clean</td><td align="left">clean</td></tr><tr><td align="left">compiler</td><td align="left">compile</td></tr><tr><td align="left">surefire</td><td align="left">test</td></tr><tr><td align="left">jar</td><td align="left">package</td></tr></tbody></table><p>如果标准插件无法满足需求，我们还可以使用自定义插件。使用自定义插件的时候，需要声明。例如，使用<code>maven-shade-plugin</code>可以创建一个可执行的jar，要使用这个插件，需要在<code>pom.xml</code>中声明它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;project&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-shade-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.2.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">&lt;execution&gt;</span><br><span class="line">&lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">&lt;goals&gt;</span><br><span class="line">&lt;goal&gt;shade&lt;&#x2F;goal&gt;</span><br><span class="line">&lt;&#x2F;goals&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">                            ...</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;execution&gt;</span><br><span class="line">&lt;&#x2F;executions&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>自定义插件往往需要一些配置，例如，<code>maven-shade-plugin</code>需要指定Java程序的入口，它的配置是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;transformers&gt;</span><br><span class="line">        &lt;transformer implementation&#x3D;&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</span><br><span class="line">            &lt;mainClass&gt;com.itranswarp.learnjava.Main&lt;&#x2F;mainClass&gt;</span><br><span class="line">        &lt;&#x2F;transformer&gt;</span><br><span class="line">    &lt;&#x2F;transformers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>注意，Maven自带的标准插件例如<code>compiler</code>是无需声明的，只有引入其它的插件才需要声明。</p><p>下面列举了一些常用的插件：</p><ul><li>maven-shade-plugin：打包所有依赖包并生成可执行jar；</li><li>cobertura-maven-plugin：生成单元测试覆盖率报告；</li><li>findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。</li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>Maven通过自定义插件可以执行项目构建时需要的额外功能，使用自定义插件必须在pom.xml中声明插件及配置；</p><p>插件会在某个phase被执行时执行；</p><p>插件的配置和用法需参考插件的官方文档。</p><hr><h2 id="模块管理"><a href="#模块管理" class="headerlink" title="模块管理"></a>模块管理</h2><p>对于Maven工程来说，原来是一个大项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">single-project</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br></pre></td></tr></table></figure><p>现在可以分拆成3个模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">single-project</span><br><span class="line">├── module-a</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── module-b</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">└── module-c</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br></pre></td></tr></table></figure><p>Maven可以有效地管理多个模块，我们只需要把每个模块当作一个独立的Maven项目，它们有各自独立的pom.xml。</p><p>模块A和模块B的pom.xml高度相似，因此，我们可以提取出共同部分作为parent，编写parent的pom.xml只是为了在各个模块中减少重复的配置。现在整个工程结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">single-project</span><br><span class="line">├── parent</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── module-a</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── module-b</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">└── module-c</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br></pre></td></tr></table></figure><p>不推荐把自己的模块安装到maven的本地仓库，因为每次修改模块b的源码，都需要重新安装， 容易出现版本不一致的情况</p><p>推荐的做法是模块化编译，在编译的时候，告诉maven几个模块之间存在依赖关系，需要一块编译， maven就会自动按依赖顺序编译这些模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;模块A&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;模块B&lt;&#x2F;module&gt;</span><br><span class="line">    &lt;module&gt;模块C&lt;&#x2F;module&gt;</span><br><span class="line">&lt;&#x2F;modules&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="使用mvnw"><a href="#使用mvnw" class="headerlink" title="使用mvnw"></a>使用mvnw</h2><p><code>mvnw</code>是Maven Wrapper的缩写，Maven Wrapper就是给一个项目提供一个独立的，指定版本的Maven给它使用。</p><h3 id="安装Maven-Wrapper"><a href="#安装Maven-Wrapper" class="headerlink" title="安装Maven Wrapper"></a>安装Maven Wrapper</h3><p>安装Maven Wrapper最简单的方式是在项目的根目录（即<code>pom.xml</code>所在的目录）下运行安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -N io.takari:maven:0.7.6:wrapper</span><br></pre></td></tr></table></figure><p>如果要指定使用的Maven版本，使用下面的安装命令指定版本，例如<code>3.3.3</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -N io.takari:maven:0.7.6:wrapper -Dmaven&#x3D;3.3.3</span><br></pre></td></tr></table></figure><p>安装后，查看项目结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">my-project</span><br><span class="line">├── .mvn</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── MavenWrapperDownloader.java</span><br><span class="line">│       ├── maven-wrapper.jar</span><br><span class="line">│       └── maven-wrapper.properties</span><br><span class="line">├── mvnw</span><br><span class="line">├── mvnw.cmd</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   └── resources</span><br><span class="line">    └── test</span><br><span class="line">        ├── java</span><br><span class="line">        └── resources</span><br></pre></td></tr></table></figure><p>发现多了<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>目录，只需要把<code>mvn</code>命令改成<code>mvnw</code>就可以使用跟项目关联的Maven。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvnw clean package</span><br></pre></td></tr></table></figure><p>在Linux或macOS下运行时需要加上<code>./</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;mvnw clean package</span><br></pre></td></tr></table></figure><p>Maven Wrapper的另一个作用是把项目的<code>mvnw</code>、<code>mvnw.cmd</code>和<code>.mvn</code>提交到版本库中，可以使所有开发人员使用统一的Maven版本。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;Maven是Java项目不可缺少的工具，用于项目管理和构建工具。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="Maven" scheme="https://juoyo.github.io/tags/Maven/"/>
    
    <category term="项目管理" scheme="https://juoyo.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>P7 移除元素 LeetCode27</title>
    <link href="https://juoyo.github.io/posts/fa82c069.html"/>
    <id>https://juoyo.github.io/posts/fa82c069.html</id>
    <published>2019-12-09T16:09:49.000Z</published>
    <updated>2019-12-16T11:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>P7 难度简单，主要标签为数组、双指针。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><em>English</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Given an array nums and a value val, remove all instances of that value in-place and return the new length.</span><br><span class="line"></span><br><span class="line">Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</span><br><span class="line"></span><br><span class="line">The order of elements can be changed. It doesn&#x27;t matter what you leave beyond the new length.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Given nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 2.</span><br><span class="line"></span><br><span class="line">It doesn&#x27;t matter what you leave beyond the returned length.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Given nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</span><br><span class="line"></span><br><span class="line">Note that the order of those five elements can be arbitrary.</span><br><span class="line"></span><br><span class="line">It doesn&#x27;t matter what values are set beyond the returned length.</span><br><span class="line">Clarification:</span><br><span class="line"></span><br><span class="line">Confused why the returned value is an integer but your answer is an array?</span><br><span class="line"></span><br><span class="line">Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</span><br><span class="line"></span><br><span class="line">Internally you can think of this:</span><br><span class="line"></span><br><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>中文</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</span><br><span class="line"></span><br><span class="line">不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</span><br><span class="line"></span><br><span class="line">元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">给定 nums = [3,2,2,3], val = 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">为什么返回数值是整数，但输出的答案是数组呢?</span><br><span class="line"></span><br><span class="line">请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</span><br><span class="line"></span><br><span class="line">你可以想象内部操作如下:</span><br><span class="line"></span><br><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LeetCode题目链接https://leetcode-cn.com/problems/remove-element</span><br></pre></td></tr></table></figure><hr><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="20191209记录"><a href="#20191209记录" class="headerlink" title="20191209记录"></a>20191209记录</h3><h4 id="伪代码描述-推荐必做"><a href="#伪代码描述-推荐必做" class="headerlink" title="伪代码描述(推荐必做)"></a>伪代码描述(推荐必做)</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><ol><li>LeetCode解题通过代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span>(<span class="params">self, nums, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><ol start="2"><li>本地调试代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span>(<span class="params">self, nums, val</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.removeElement([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>], <span class="number">2</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;P7 难度简单，主要标签为数组、双指针。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="https://juoyo.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="双指针" scheme="https://juoyo.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>P6 爬楼梯 LeetCode70</title>
    <link href="https://juoyo.github.io/posts/37233cc0.html"/>
    <id>https://juoyo.github.io/posts/37233cc0.html</id>
    <published>2019-12-09T12:45:15.000Z</published>
    <updated>2019-12-09T13:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>P6 爬楼梯，难度简单，主要标签为动态规划。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><em>English</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">You are climbing a stair case. It takes n steps to reach to the top.</span><br><span class="line"></span><br><span class="line">Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</span><br><span class="line"></span><br><span class="line">Note: Given n will be a positive integer.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line"><span class="bullet">1.</span> 1 step + 1 step</span><br><span class="line"><span class="bullet">2.</span> 2 steps</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line"><span class="bullet">1.</span> 1 step + 1 step + 1 step</span><br><span class="line"><span class="bullet">2.</span> 1 step + 2 steps</span><br><span class="line"><span class="bullet">3.</span> 2 steps + 1 step</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>中文</em></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</span><br><span class="line"></span><br><span class="line">每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</span><br><span class="line"></span><br><span class="line">注意：给定 n 是一个正整数。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line"><span class="bullet">1.</span>  1 阶 + 1 阶</span><br><span class="line"><span class="bullet">2.</span>  2 阶</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line"><span class="bullet">1.</span>  1 阶 + 1 阶 + 1 阶</span><br><span class="line"><span class="bullet">2.</span>  1 阶 + 2 阶</span><br><span class="line"><span class="bullet">3.</span>  2 阶 + 1 阶</span><br><span class="line"></span><br><span class="line">LeetCode题目链接https://leetcode-cn.com/problems/climbing-stairs/</span><br></pre></td></tr></table></figure><hr><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="20191209记录"><a href="#20191209记录" class="headerlink" title="20191209记录"></a>20191209记录</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python代码实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.climbStairs(n - <span class="number">1</span>) + self.climbStairs(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>直接递归会超时，存在大量重复计算。</p><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java代码实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> a[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;P6 爬楼梯，难度简单，主要标签为动态规划。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="爬楼梯" scheme="https://juoyo.github.io/tags/%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    
    <category term="动态规划" scheme="https://juoyo.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="递归" scheme="https://juoyo.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶ch5 归并排序</title>
    <link href="https://juoyo.github.io/posts/52191bdb.html"/>
    <id>https://juoyo.github.io/posts/52191bdb.html</id>
    <published>2019-12-08T09:34:04.000Z</published>
    <updated>2019-12-08T10:00:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>归并(Merge)排序是将两个或两个以上有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列都是有序的，然后将有序子序列合并为整体有序序列。 </p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        print(data);</span><br><span class="line">        mergeSort(data);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组:&quot;</span>);</span><br><span class="line">        print(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        sort(data, <span class="number">0</span>, data.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找出中间索引</span></span><br><span class="line">        <span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line">        sort(data, left, center);</span><br><span class="line">        sort(data, center + <span class="number">1</span>, right);</span><br><span class="line">        <span class="comment">// 合并</span></span><br><span class="line">        merge(data, left, center, right);</span><br><span class="line">        print(data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span> <span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> left, <span class="keyword">int</span> center, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 临时数组</span></span><br><span class="line">        <span class="keyword">int</span>[] tempArr = <span class="keyword">new</span> <span class="keyword">int</span>[data.length];</span><br><span class="line">        <span class="comment">// 右数组第一个元素索引</span></span><br><span class="line">        <span class="keyword">int</span> mid = center + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// third记录临时数组的索引</span></span><br><span class="line">        <span class="keyword">int</span> third = left;</span><br><span class="line">        <span class="comment">// 左数组第一个元素的索引</span></span><br><span class="line">        <span class="keyword">int</span> temp = left;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= center &amp;&amp; mid &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// 从两数组中取最小的放入临时数组中</span></span><br><span class="line">            <span class="keyword">if</span> (data[left] &lt;= data[mid]) &#123;</span><br><span class="line">                tempArr[third++] = data[left++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tempArr[third++] = data[mid++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 剩余部分依次放入临时数组中</span></span><br><span class="line">        <span class="keyword">while</span> (mid &lt;= right) &#123;</span><br><span class="line">            tempArr[third++] = data[mid++];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt;= center) &#123;</span><br><span class="line">            tempArr[third++] = data[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 临时数组中内容拷贝回原数组</span></span><br><span class="line">        <span class="keyword">while</span> (temp &lt;= right) &#123;</span><br><span class="line">            data[temp] = tempArr[temp++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            System.out.print(data[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;归并(Merge)排序是将两个或两个以上有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列都是有序的，然后将有序子序列合并为整体有序序列。 &lt;/p&gt;</summary>
    
    
    
    <category term="Java求生" scheme="https://juoyo.github.io/categories/Java%E6%B1%82%E7%94%9F/"/>
    
    
    <category term="归并排序" scheme="https://juoyo.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶ch4 希尔排序</title>
    <link href="https://juoyo.github.io/posts/c04bd42a.html"/>
    <id>https://juoyo.github.io/posts/c04bd42a.html</id>
    <published>2019-12-08T07:49:55.000Z</published>
    <updated>2019-12-08T10:00:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>基本思想：先将待排序序列分割为若干子序列，分别进行直接插入排序，增量逐渐减小，直到增量减为1，此时相当于对全体记录进行直接插入排序。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dk = a.length / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (dk &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        ShellInsertSort(a, dk);</span><br><span class="line">        dk = dk / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShellInsertSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> dk)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类似插入排序，插入排序增量是1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = dk; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[i - dk]) &#123;</span><br><span class="line">            <span class="comment">// a[i - dk] &gt; a[i]需交换</span></span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">int</span> x = a[i]; <span class="comment">// x是待插入元素</span></span><br><span class="line">            a[i] = a[i - dk];</span><br><span class="line">            <span class="keyword">for</span> (j = i - dk; j &gt;= <span class="number">0</span> &amp;&amp; x &lt; a[j]; j = j - dk) &#123;</span><br><span class="line">                a[j + dk] = a[j];</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + dk] = x; <span class="comment">// 插入</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;基本思想：先将待排序序列分割为若干子序列，分别进行直接插入排序，增量逐渐减小，直到增量减为1，此时相当于对全体记录进行直接插入排序。&lt;/p&gt;</summary>
    
    
    
    <category term="Java求生" scheme="https://juoyo.github.io/categories/Java%E6%B1%82%E7%94%9F/"/>
    
    
    <category term="希尔排序" scheme="https://juoyo.github.io/tags/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶ch3 快速排序</title>
    <link href="https://juoyo.github.io/posts/40c28753.html"/>
    <id>https://juoyo.github.io/posts/40c28753.html</id>
    <published>2019-11-21T16:08:12.000Z</published>
    <updated>2019-12-08T07:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>快速排序。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = low;</span><br><span class="line">    <span class="keyword">int</span> end = high;</span><br><span class="line">    <span class="keyword">int</span> key = a[start];</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end &amp;&amp; a[end] &gt;= key) &#123;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[end] &lt;= key) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a[end];</span><br><span class="line">            a[end] = a[start];</span><br><span class="line">            a[start] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (start &lt; end &amp;&amp; a[start] &lt;= end) &#123;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[start] &gt;= key) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a[start];</span><br><span class="line">            a[start] = a[end];</span><br><span class="line">            a[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;快速排序。&lt;/p&gt;</summary>
    
    
    
    <category term="Java求生" scheme="https://juoyo.github.io/categories/Java%E6%B1%82%E7%94%9F/"/>
    
    
    <category term="算法" scheme="https://juoyo.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="快速排序" scheme="https://juoyo.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow基础</title>
    <link href="https://juoyo.github.io/posts/a574e330.html"/>
    <id>https://juoyo.github.io/posts/a574e330.html</id>
    <published>2019-11-21T01:52:08.000Z</published>
    <updated>2020-01-03T06:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文适用于TensorFlow2.0版本。</p><p>TensorFlow内部数据保存在张量（Tensor）对象上，所有运算也基于张量对象。复杂神经网络算法本质上就是各种张量相乘、相加等基本运算操作的组合。</p><a id="more"></a><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><ul><li>标量</li><li>向量</li><li>矩阵</li><li>张量(Tensor)</li></ul><p>必须通过TensorFlow规定的方式去创建张量，不能使用Python语言的标准向量创建方式。</p><p>aa = tf.constant(1.2) # 创建标量 </p><p>与标量不同，向量的定义须通过 List 类型传给 tf.constant()。 </p><p>创建一个元素的向量：  </p><p>a = tf.constant([1.2]) </p><p>创建 2 个元素的向量：  </p><p>a = tf.constant([1,2, 3.])  </p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>a = tf.constant(‘Hello, Deep Learning.’)  </p><p>在 tf.strings 模块中，提供了常见的字符串型的工具函数，如拼接 join()，长度 length()，切<br>分 split()等等。</p><p>深度学习算法主要还是以数值类型张量运算为主，字符串类型的数据使用频率较低。  </p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型的张量只需要传入 Python 语言的布尔类型数据，转换成 TensorFlow 内部布尔型即可：</p><p>a = tf.constant(True)  </p><p>TensorFlow 的布尔类型和 Python 语言的布尔类型并不对等，不能通用。</p><hr><h2 id="数值精度"><a href="#数值精度" class="headerlink" title="数值精度"></a>数值精度</h2><p>  常用的精度类型有 tf.int16, tf.int32, tf.int64, tf.float16, tf.float32,tf.float64，其中 tf.float64 即为 tf.double。  </p><p>在创建张量时，可以指定张量的保存精度：  </p><p>tf.constant(123456789, dtype=tf.int32)  </p><p>保存精度过低时，数据 123456789 发生了溢出， 得到了错误的结果，一般使用tf.int32, tf.int64 精度。对于浮点数， 高精度的张量可以表示更精准的数据，例如采用<br>tf.float32 精度保存。 </p><p>对于大部分深度学习算法，一般使用 tf.int32, tf.float32 可满足运算精度要求，部分对精度要求较高的算法，如强化学习，可以选择使用 tf.int64, tf.float64 精度保存张量。  </p><h3 id="读取精度"><a href="#读取精度" class="headerlink" title="读取精度"></a>读取精度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]:</span><br><span class="line">print(<span class="string">&#x27;before:&#x27;</span>,a.dtype)</span><br><span class="line"><span class="keyword">if</span> a.dtype != tf.float32:</span><br><span class="line">    a = tf.cast(a,tf.float32) <span class="comment"># 转换精度</span></span><br><span class="line">print(<span class="string">&#x27;after :&#x27;</span>,a.dtype)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">15</span>]:</span><br><span class="line">before: &lt;dtype: <span class="string">&#x27;float16&#x27;</span>&gt;</span><br><span class="line">after : &lt;dtype: <span class="string">&#x27;float32&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>系统的每个模块使用的数据类型、 数值精度可能各不相同， 对于不符合要求的张量的类型及精度， 需要通过 tf.cast 函数进行转换：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]:</span><br><span class="line">a = tf.constant(np.pi, dtype=tf.float16)</span><br><span class="line">tf.cast(a, tf.double)</span><br><span class="line">Out[<span class="number">16</span>]:</span><br><span class="line">&lt;tf.Tensor: <span class="built_in">id</span>=<span class="number">44</span>, shape=(), dtype=float64, numpy=<span class="number">3.140625</span>&gt;</span><br></pre></td></tr></table></figure><p>布尔型与整形之间相互转换也是合法的。</p><h2 id="待优化张量"><a href="#待优化张量" class="headerlink" title="待优化张量"></a>待优化张量</h2><p>为了区分需要计算梯度信息的张量与不需要计算梯度信息的张量， TensorFlow 增加了一种专门的数据类型来支持梯度信息的记录： tf.Variable。 </p><p>tf.Variable 类型在普通的张量类型基础上添加了 name， trainable 等属性来支持计算图的构建。     </p><p>通过 tf.Variable()函数可以将普通张量转换为待优化张量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]:</span><br><span class="line">a = tf.constant([-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">aa = tf.Variable(a)</span><br><span class="line">aa.name, aa.trainable</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">(<span class="string">&#x27;Variable:0&#x27;</span>, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>除了通过普通张量方式创建 Variable， 也可以直接创建：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]:</span><br><span class="line">a = tf.Variable([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">Out[<span class="number">21</span>]:</span><br><span class="line">&lt;tf.Variable <span class="string">&#x27;Variable:0&#x27;</span> shape=(<span class="number">2</span>, <span class="number">2</span>) dtype=int32, numpy=</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>]])&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="创建张量"><a href="#创建张量" class="headerlink" title="创建张量"></a>创建张量</h2><p>在 TensorFlow 中，可以通过多种方式创建张量，如从 Python List 对象创建，从Numpy 数组创建，或者创建采样自某种已知分布的张量等。  </p><h3 id="从-Numpy-List-对象创建"><a href="#从-Numpy-List-对象创建" class="headerlink" title="从 Numpy, List 对象创建"></a>从 Numpy, List 对象创建</h3><p>通过 tf.convert_to_tensor 可以创建新 Tensor，并将保存在 Python List 对象或者 Numpy Array 对象中的数据导入到新 Tensor 中：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]:</span><br><span class="line">tf.convert_to_tensor([<span class="number">1</span>,<span class="number">2.</span>])</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">&lt;tf.Tensor: <span class="built_in">id</span>=<span class="number">86</span>, shape=(<span class="number">2</span>,), dtype=float32, numpy=array([<span class="number">1.</span>, <span class="number">2.</span>],</span><br><span class="line">dtype=float32)&gt;</span><br><span class="line">In [<span class="number">23</span>]:</span><br><span class="line">tf.convert_to_tensor(np.array([[<span class="number">1</span>,<span class="number">2.</span>],[<span class="number">3</span>,<span class="number">4</span>]]))</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">&lt;tf.Tensor: <span class="built_in">id</span>=<span class="number">88</span>, shape=(<span class="number">2</span>, <span class="number">2</span>), dtype=float64, numpy=</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">2.</span>],</span><br><span class="line">[<span class="number">3.</span>, <span class="number">4.</span>]])&gt;</span><br></pre></td></tr></table></figure><h3 id="创建全0、全1张量"><a href="#创建全0、全1张量" class="headerlink" title="创建全0、全1张量"></a>创建全0、全1张量</h3><p>通过 tf.zeros()和 tf.ones()即可创建任意形状全 0 或全 1 的张量。例如，创建为 0 和为 1 的标量张量：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: tf.zeros([]),tf.ones([])</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">(&lt;tf.Tensor: <span class="built_in">id</span>=<span class="number">90</span>, shape=(), dtype=float32, numpy=<span class="number">0.0</span>&gt;,</span><br><span class="line">&lt;tf.Tensor: <span class="built_in">id</span>=<span class="number">91</span>, shape=(), dtype=float32, numpy=<span class="number">1.0</span>&gt;)</span><br></pre></td></tr></table></figure><p>创建全 1 的矩阵：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: tf.ones([<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">Out[<span class="number">27</span>]:</span><br><span class="line">&lt;tf.Tensor: <span class="built_in">id</span>=<span class="number">108</span>, shape=(<span class="number">3</span>, <span class="number">2</span>), dtype=float32, numpy=</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">[<span class="number">1.</span>, <span class="number">1.</span>]], dtype=float32)&gt;</span><br></pre></td></tr></table></figure><h3 id="创建自定义数值张量"><a href="#创建自定义数值张量" class="headerlink" title="创建自定义数值张量"></a>创建自定义数值张量</h3><p>全部初始化为某个自定义数值的张量，比如将张量的数值全部初始化为-1 等。<br>通过 tf.fill(shape, value)可以创建全为自定义数值 value 的张量。 例如，创建元素为-1的标量：  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文适用于TensorFlow2.0版本。&lt;/p&gt;
&lt;p&gt;TensorFlow内部数据保存在张量（Tensor）对象上，所有运算也基于张量对象。复杂神经网络算法本质上就是各种张量相乘、相加等基本运算操作的组合。&lt;/p&gt;</summary>
    
    
    
    <category term="AI指北" scheme="https://juoyo.github.io/categories/AI%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="数据类型" scheme="https://juoyo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶ch2 插入排序</title>
    <link href="https://juoyo.github.io/posts/b4185157.html"/>
    <id>https://juoyo.github.io/posts/b4185157.html</id>
    <published>2019-11-17T03:26:12.000Z</published>
    <updated>2019-12-08T07:47:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>插入排序，对未排序数据，在已排序序列中从后向前扫描，找到对应位置并插入。</p><a id="more"></a><p>插入排序类似扑克牌插牌。</p><p>如果输入数组已经排好序，插入排序出现最佳情况。如果数组逆序排序，出现最坏情况，最坏情况、平均情况复杂度为n<sup>2</sup>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 需要插入的数，默认从无序段元素arr[1]开始插入有序段</span></span><br><span class="line">        <span class="keyword">int</span> insertVal = arr[i];</span><br><span class="line">        <span class="comment">// 插入位置下标</span></span><br><span class="line">        <span class="keyword">int</span> index = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 如果需要插入的数小于arr[index]，arr[index]向后移动一步，移除插入位置</span></span><br><span class="line">        <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[index]) &#123;</span><br><span class="line">            arr[index + <span class="number">1</span>] = arr[index];</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[index + <span class="number">1</span>] = insertVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;插入排序，对未排序数据，在已排序序列中从后向前扫描，找到对应位置并插入。&lt;/p&gt;</summary>
    
    
    
    <category term="Java求生" scheme="https://juoyo.github.io/categories/Java%E6%B1%82%E7%94%9F/"/>
    
    
    <category term="算法" scheme="https://juoyo.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="插入排序" scheme="https://juoyo.github.io/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶ch1 冒泡排序</title>
    <link href="https://juoyo.github.io/posts/4acadad5.html"/>
    <id>https://juoyo.github.io/posts/4acadad5.html</id>
    <published>2019-11-16T03:27:03.000Z</published>
    <updated>2019-12-08T07:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>冒泡排序。</p><a id="more"></a><p>冒泡排序使数组a从小到大排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> [] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">//表示n次排序过程</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j-<span class="number">1</span>] &gt; a[j]) &#123;  <span class="comment">//如果前一个数大于后一个，交换</span></span><br><span class="line">                <span class="keyword">int</span> temp;</span><br><span class="line">                temp = a[j-<span class="number">1</span>];</span><br><span class="line">                a[j-<span class="number">1</span>] = a[j];</span><br><span class="line">                a[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0&lt;=i&lt;n</p><p>1&lt;=j&lt;n-i  一次排序将一个数归位，故j&lt;n-i  (上限为n-i-1)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;冒泡排序。&lt;/p&gt;</summary>
    
    
    
    <category term="Java求生" scheme="https://juoyo.github.io/categories/Java%E6%B1%82%E7%94%9F/"/>
    
    
    <category term="算法" scheme="https://juoyo.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="冒泡排序" scheme="https://juoyo.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java进阶ch0 二分查找</title>
    <link href="https://juoyo.github.io/posts/2bc8cec9.html"/>
    <id>https://juoyo.github.io/posts/2bc8cec9.html</id>
    <published>2019-11-15T07:08:40.000Z</published>
    <updated>2019-12-08T07:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>二分查找，又称折半查找，要求待查找序列有序。</p><a id="more"></a><p>在array数组中查找值大小等于a，返回元素序号。</p><p>算法代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">biSearch</span><span class="params">(<span class="keyword">int</span> []array, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hi = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(lo &lt;= hi) &#123;</span><br><span class="line">        mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (array[mid] == a) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid + <span class="number">1</span>;  <span class="comment">//mid</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; a) &#123;  <span class="comment">//从mid后一个位置向右查找</span></span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">//从mid前一个位置向左查找</span></span><br><span class="line">            hi = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">//未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (array[mid] == a) &#123;</span><br><span class="line">    <span class="keyword">return</span> mid + <span class="number">1</span>;  <span class="comment">//mid</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mid为索引（从0开始计数），mid+1为元素在数组中位置（从1开始计数）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;二分查找，又称折半查找，要求待查找序列有序。&lt;/p&gt;</summary>
    
    
    
    <category term="Java求生" scheme="https://juoyo.github.io/categories/Java%E6%B1%82%E7%94%9F/"/>
    
    
    <category term="算法" scheme="https://juoyo.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二分查找" scheme="https://juoyo.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch15 多线程与多进程</title>
    <link href="https://juoyo.github.io/posts/8625f16f.html"/>
    <id>https://juoyo.github.io/posts/8625f16f.html</id>
    <published>2019-11-12T16:15:10.000Z</published>
    <updated>2019-12-03T01:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统执行多任务实际上就是让CPU对多个任务轮流交替执行。</p><a id="more"></a><p>实现多任务的方法，有以下几种：</p><p>多进程模式（每个进程只有一个线程）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌──────────┐ ┌──────────┐ ┌──────────┐</span><br><span class="line">│Process   │ │Process   │ │Process   │</span><br><span class="line">│┌────────┐│ │┌────────┐│ │┌────────┐│</span><br><span class="line">││ Thread ││ ││ Thread ││ ││ Thread ││</span><br><span class="line">│└────────┘│ │└────────┘│ │└────────┘│</span><br><span class="line">└──────────┘ └──────────┘ └──────────┘</span><br></pre></td></tr></table></figure><p>多线程模式（一个进程有多个线程）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────────────────────┐</span><br><span class="line">│Process             │</span><br><span class="line">│┌────────┐┌────────┐│</span><br><span class="line">││ Thread ││ Thread ││</span><br><span class="line">│└────────┘└────────┘│</span><br><span class="line">│┌────────┐┌────────┐│</span><br><span class="line">││ Thread ││ Thread ││</span><br><span class="line">│└────────┘└────────┘│</span><br><span class="line">└────────────────────┘</span><br></pre></td></tr></table></figure><p>多进程＋多线程模式（复杂度最高）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌──────────┐┌──────────┐┌──────────┐</span><br><span class="line">│Process   ││Process   ││Process   │</span><br><span class="line">│┌────────┐││┌────────┐││┌────────┐│</span><br><span class="line">││ Thread ││││ Thread ││││ Thread ││</span><br><span class="line">│└────────┘││└────────┘││└────────┘│</span><br><span class="line">│┌────────┐││┌────────┐││┌────────┐│</span><br><span class="line">││ Thread ││││ Thread ││││ Thread ││</span><br><span class="line">│└────────┘││└────────┘││└────────┘│</span><br><span class="line">└──────────┘└──────────┘└──────────┘</span><br></pre></td></tr></table></figure><hr><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>要实例化一个<code>Thread</code>实例，然后调用它的<code>start()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread();</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个线程启动后实际上什么也不做就立刻结束了。我们希望新线程能执行指定的代码，有以下几种方法：</p><p>方法一：从<code>Thread</code>派生一个自定义类，然后覆写<code>run()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start new thread!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="green"><code>start()</code>方法会在内部自动调用实例的<code>run()</code>方法。</font></p><p>方法二：创建<code>Thread</code>实例时，传入一个<code>Runnable</code>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多线程 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable());</span><br><span class="line">        t.start(); <span class="comment">// 启动新线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start new thread!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>可以对线程设定优先级，设定优先级的方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.setPriority(<span class="keyword">int</span> n) <span class="comment">// 1~10, 默认值5</span></span><br></pre></td></tr></table></figure><hr><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>Java线程的状态有以下几种：</p><ul><li>New：新创建的线程，尚未执行；</li><li>Runnable：运行中的线程，正在执行<code>run()</code>方法的Java代码；</li><li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；</li><li>Waiting：运行中的线程，因为某些操作在等待中；</li><li>Timed Waiting：运行中的线程，因为执行<code>sleep()</code>方法正在计时等待；</li><li>Terminated：线程已终止，因为<code>run()</code>方法执行完毕。</li></ul><p>状态转移图表示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">         ┌─────────────┐</span><br><span class="line">         │     New     │</span><br><span class="line">         └─────────────┘</span><br><span class="line">                │</span><br><span class="line">                ▼</span><br><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line"> ┌─────────────┐ ┌─────────────┐</span><br><span class="line">││  Runnable   │ │   Blocked   ││</span><br><span class="line"> └─────────────┘ └─────────────┘</span><br><span class="line">│┌─────────────┐ ┌─────────────┐│</span><br><span class="line"> │   Waiting   │ │Timed Waiting│</span><br><span class="line">│└─────────────┘ └─────────────┘│</span><br><span class="line"> ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─</span><br><span class="line">                │</span><br><span class="line">                ▼</span><br><span class="line">         ┌─────────────┐</span><br><span class="line">         │ Terminated  │</span><br><span class="line">         └─────────────┘</span><br></pre></td></tr></table></figure><p>一个线程还可以等待另一个线程直到其运行结束：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        t.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>join</code>就是指等待该线程结束，然后才继续往下执行自身线程。所以，上述代码打印顺序可以肯定是<code>main</code>线程先打印<code>start</code>，<code>t</code>线程再打印<code>hello</code>，<code>main</code>线程最后再打印<code>end</code>。</p><ul><li><p>通过对另一个线程对象调用<code>join()</code>方法可以等待其执行结束；</p></li><li><p>可以指定等待时间，超过等待时间线程仍然没有结束就不再等待；</p></li><li><p>对已经运行结束的线程调用<code>join()</code>方法会立刻返回。</p></li></ul><hr><h2 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h2><p>如果线程需要执行一个长时间任务，就可能需要能中断线程。中断线程就是其他线程给该线程发一个信号，该线程收到信号后结束执行<code>run()</code>方法，使得自身线程能立刻结束运行。</p><p>中断一个线程非常简单，只需要在其他线程中对目标线程调用<code>interrupt()</code>方法，目标线程需要反复检测自身状态是否是interrupted状态，如果是，就立刻结束运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中断线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line">        Thread.sleep(<span class="number">1</span>); <span class="comment">// 暂停1毫秒</span></span><br><span class="line">        t.interrupt(); <span class="comment">// 中断t线程</span></span><br><span class="line">        t.join(); <span class="comment">// 等待t线程结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (! isInterrupted()) &#123;</span><br><span class="line">            n ++;</span><br><span class="line">            System.out.println(n + <span class="string">&quot; hello!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>interrupt()<code>方法仅仅向</code>t<code>线程发出了“中断请求”，至于</code>t<code>线程是否能立刻响应，要看具体代码。而</code>t<code>线程的</code>while<code>循环会检测</code>isInterrupted()<code>，所以上述代码能正确响应</code>interrupt()<code>请求，使得自身立刻结束运行</code>run()方法。</p><hr><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>守护线程是指为其他线程服务的线程。在JVM中，所有非守护线程都执行完毕后，无论有没有守护线程，虚拟机都会自动退出。</p><p>JVM退出时，不必关心守护线程是否已结束。</p><p>创建守护线程，在调用<code>start()</code>方法前，调用<code>setDaemon(true)</code>把该线程标记为守护线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p><font color="red">守护线程不能持有任何需要关闭的资源</font></p><hr><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>任何时候临界区最多只有一个线程能执行。</p><p>通过加锁和解锁的操作，就能保证3条指令总是在一个线程执行期间，不会有其他线程会进入此指令区间。即使在执行期线程被操作系统中断执行，其他线程也会因为无法获得锁导致无法进入此指令区间。只有执行线程将锁释放后，其他线程才有机会获得锁并执行。</p><p>Java程序使用<code>synchronized</code>关键字对一个对象进行加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">    n = n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个线程在执行各自的<code>synchronized(Counter.lock) &#123; ... &#125;</code>代码块时，必须先获得锁，才能进入代码块进行。执行结束后，在<code>synchronized</code>语句块结束会自动释放锁。</p><p>VM规范定义了几种原子操作：</p><ul><li>基本类型（<code>long</code>和<code>double</code>除外）赋值，例如：<code>int n = m</code>；</li><li>引用类型赋值，例如：<code>List&lt;String&gt; list = anotherList</code>。</li></ul><hr><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p> Java程序依靠<code>synchronized</code>对线程进行同步，使用<code>synchronized</code>的时候，锁住的是哪个对象非常重要。 </p><p>更好的方法是把<code>synchronized</code>逻辑封装起来。例如，我们编写一个计数器如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，线程调用add()、dec()方法时，不必关心同步逻辑。因为synchronized代码块在方法内部。并且， <code>synchronized</code>锁住的对象是<code>this</code>，即当前实例，这又使得创建多个<code>Counter</code>实例的时候，它们之间互不影响，可以并发执行： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c1 = Counter();</span><br><span class="line"><span class="keyword">var</span> c2 = Counter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对c1进行操作的线程:</span></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    c1.add();</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    c1.dec();</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对c2进行操作的线程:</span></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    c2.add();</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    c2.dec();</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>如果一个类被设计为允许多线程正确访问，我们就说这个类就是<font color="green">“线程安全”的（thread-safe）</font>，上面的<code>Counter</code>类就是线程安全的。Java标准库的<code>java.lang.StringBuffer</code>也是线程安全的。 </p><p>还有一些不变类，例如<code>String</code>，<code>Integer</code>，<code>LocalDate</code>，它们的所有成员变量都是<code>final</code>，多线程同时访问时只能读不能写，这些不变类也是线程安全的。</p><p>最后，类似<code>Math</code>这些只提供静态方法，没有成员变量的类，也是线程安全的。</p><p>除了上述几种少数情况，大部分类，例如<code>ArrayList</code>，都是非线程安全的类，我们不能在多线程中修改它们。但是，如果所有线程都只读取，不写入，那么<code>ArrayList</code>是可以安全地在线程间共享的。</p><p><font color="red">没有特殊说明时，一个类默认是非线程安全的。</font></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;操作系统执行多任务实际上就是让CPU对多个任务轮流交替执行。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="多线程" scheme="https://juoyo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>情感分析ch7 情感词典构建</title>
    <link href="https://juoyo.github.io/posts/18552726.html"/>
    <id>https://juoyo.github.io/posts/18552726.html</id>
    <published>2019-10-22T07:21:40.000Z</published>
    <updated>2019-10-23T15:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>情感词典构建。</p><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;p&gt;情感词典构建。&lt;/p&gt;</summary>
    
    
    
    <category term="Sentiment Analysis" scheme="https://juoyo.github.io/categories/Sentiment-Analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>情感分析ch3 文档级情感分类</title>
    <link href="https://juoyo.github.io/posts/d5569e77.html"/>
    <id>https://juoyo.github.io/posts/d5569e77.html</id>
    <published>2019-10-22T05:51:19.000Z</published>
    <updated>2019-10-24T09:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>文档级情感分类是最简单的情感分析任务，因为当作传统的文本分类问题，只是类别变成情感的倾向或极性。监督学习方法可直接应用到文档级情感分类。</p><a id="more"></a><p><strong>假设3.1</strong></p><p>观点文档d表达的观点仅针对一个单独实体e，且只包含一个观点持有者h的观点。</p><p>情感分类常被当作二分类问题，将给定文本分为正面的和负面的情感。训练和测试数据为普通的产品评论，评论一般包含评分，4、5星正面评论，1、2星负面评论，一般不实用中性分类（3星评论）。</p><h2 id="基于监督的情感分类"><a href="#基于监督的情感分类" class="headerlink" title="基于监督的情感分类"></a>基于监督的情感分类</h2><h3 id="基于机器学习算法的情感分类"><a href="#基于机器学习算法的情感分类" class="headerlink" title="基于机器学习算法的情感分类"></a>基于机器学习算法的情感分类</h3><p>情感分类是文本分类问题，任何监督学习算法可直接使用。Pang等（2002）分类影评，发现使用词袋（unigram）作为特征进行分类时，无论分类器选朴素贝叶斯还是SVM，效果都非常好。</p><p>情感分类的关键是抽取有效的特征。列出特征样例：</p><ul><li><p>词和词频</p><p>带有词频信息的单独词袋及与其相关的n-gram。</p></li><li><p>词性</p><p>每个词的词性是另一类特征。形容词是观点和情感的主要承载词。</p></li><li><p>情感词和情感短语</p><p>大多情感词是形容词或副词。</p></li><li><p>观点的规则</p><p>很多文本结构或语言成分可以表示或隐含情感和观点。</p></li><li><p>情感转置词</p></li><li><p>句法依存关系</p><p>句法分析或句法依存树中取得词的依存关系特征。</p></li></ul><p>Gamon(2004)发现深层语言特征有助于提升分类效果，包括POS trigram，特定文本成分的长度信息，句法树中每个成分基于上下文无关短语结构模式表示的成分结构。</p><p>Mullen和Collier(2004)介绍了可以和n-gram结合的复杂特征，分三类：（1）利用词和短语的互信息PMI计算情感值特征；（2）Osgood等（1957）提出的有关形容词的三个因子值（强度、主动性、评价）；（3）提及所评论实体的句子，在其附近或其中的属于1、2类的词或短语的情感值。</p><p>Joshi和Penstein-Rose（2009）在词袋特征之外，把依存句法关系和相关衍生特征应用到分类过程中。依存句法分析结果是一组三元组｛rel<sub>i</sub>, w<sub>j</sub>, w<sub>k</sub>｝, rel<sub>i</sub>是w<sub>j</sub>和w<sub>k</sub>之间的依存句法关系，w<sub>j</sub>通常指首词（head word），w<sub>k</sub>通常指修饰词（modifier word）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is a great car.</span><br><span class="line">great和car之间有形容词限定（amod）句法关系，因此可以得到特征amod_car_great。</span><br><span class="line">特征泛化,amod_NN_great，更通用特征，可用到任意名词上。</span><br></pre></td></tr></table></figure><p>对于微博情感分类，Kouloumpis等（2011）使用4中特征：（1）n-gram；（2）多角度问答主观性词典；（3）动词、副词、形容词、名词和其他词性的数量统计；（4）正面、负面、中性的表情符号以及缩写和强调的二元特征。</p><p>Pang和Lee(2004)提出只利用每条评论的主观部分作为特征进行情感分类。分类问题变为图上最小割的优化问题。</p><p>Liu等（2010）针对博客和评论情感分类任务，比较不同的语言学特征，发现博客分类比评论分类效果差很多。研究提升博客分类效果方法，一种是基于信息检索方法，只考虑与给定主题相关的句子，另一种是采用简单领域适应技术。</p><p>Martineau和Finin(2009)使用新的特征权重计算策略，Delta TFIDF，</p><p>$ V<sub>t, d</sub> = tf<sub>t, d</sub> * \lg\frac{N<sup>+</sup>}{df<sub>t,+</sub>} - tf<sub>t, d</sub> * \lg\frac{N<sup>-</sup>}{df<sub>t, -</sub>} = tf<sub>t, d</sub> * \lg \frac{N<sup>+</sup>}{df<sub>t, +</sub>} * \frac{df<sub>t, -</sub>}{N<sup>-</sup>} $</p><p>这个词频变换加强了正负例中不均匀分布的词的重要性，削弱在正负例中均匀分布的词的重要性。</p><p>Qiu等（2009）将基于词典和自学习的方法相结合。第一步使用基于词典的迭代方法，初步用情绪词典把一些评论分类，再用正负类样例的比例控制来迭代地判别其他评论的类别。第二步利用第一步得到的分类结果作为训练数据训练分类器。</p><h3 id="使用自定义打分函数的情感分类"><a href="#使用自定义打分函数的情感分类" class="headerlink" title="使用自定义打分函数的情感分类"></a>使用自定义打分函数的情感分类</h3><hr><h2 id="基于无监督的情感分类"><a href="#基于无监督的情感分类" class="headerlink" title="基于无监督的情感分类"></a>基于无监督的情感分类</h2><h3 id="使用句法模板和网页检索的情感分类"><a href="#使用句法模板和网页检索的情感分类" class="headerlink" title="使用句法模板和网页检索的情感分类"></a>使用句法模板和网页检索的情感分类</h3><h3 id="使用情感词典的情感分类"><a href="#使用情感词典的情感分类" class="headerlink" title="使用情感词典的情感分类"></a>使用情感词典的情感分类</h3><hr><h2 id="情感评分预测"><a href="#情感评分预测" class="headerlink" title="情感评分预测"></a>情感评分预测</h2><hr><h2 id="跨领域情感分类"><a href="#跨领域情感分类" class="headerlink" title="跨领域情感分类"></a>跨领域情感分类</h2><hr><h2 id="跨语言情感分类"><a href="#跨语言情感分类" class="headerlink" title="跨语言情感分类"></a>跨语言情感分类</h2><hr><h2 id="文档的情绪分类"><a href="#文档的情绪分类" class="headerlink" title="文档的情绪分类"></a>文档的情绪分类</h2><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>文档级情感分类目标是检测整篇文档的整体观点和情感。此级别上分类有两个缺陷：</p><ul><li><p>未考虑情感或观点评价的对象。</p><p>对评论文本足够，但实际评论大多都有用户评的星级，因此这类数据并不需要情感分类。非评论文本，这种方法作用不大，因为非评论文本同时评价多个实体，难以确定非评论文本（如帖子）是否评价了用户感兴趣的实体，或者是否表达了观点。</p></li><li><p>文档级情感分析不能为用户提取更多细节。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;文档级情感分类是最简单的情感分析任务，因为当作传统的文本分类问题，只是类别变成情感的倾向或极性。监督学习方法可直接应用到文档级情感分类。&lt;/p&gt;</summary>
    
    
    
    <category term="Sentiment Analysis" scheme="https://juoyo.github.io/categories/Sentiment-Analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>情感分析ch6 属性和实体抽取</title>
    <link href="https://juoyo.github.io/posts/360a3c18.html"/>
    <id>https://juoyo.github.io/posts/360a3c18.html</id>
    <published>2019-10-18T05:17:04.000Z</published>
    <updated>2019-10-22T05:53:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本章讨论如何抽取观点评价的实体和实体属性。</p><a id="more"></a><p>在评论文本中，实体、实体属性是用户评价的对象，任务合并称观点评价对象抽取。通常，观点评价对象抽取后，具有相同语义的对象会归一化在一起，有助于生成观点摘要。</p><p>面对情感分析任务，抽取任务的特殊性使得任务变得相对简单。其中一个重要特征是，在文本中通常每个观点都有一个评价的对象或目标，即实体或属性。</p><p>目前，属性抽取主要方法：</p><ol><li><p>通过高频名词、名词短语抽取。</p></li><li><p>利用句法关系，主要有两种类型：</p><p>2.1 句法依存关系</p><p>2.2 基于卷的词汇化模板</p></li><li><p> 利用监督学习抽取</p></li><li><p>利用主题模型抽取</p></li></ol><hr><h2 id="6-1-基于频率的属性抽取"><a href="#6-1-基于频率的属性抽取" class="headerlink" title="6.1 基于频率的属性抽取"></a>6.1 基于频率的属性抽取</h2><p>在特定领域评论中大量出现的名词、名词短语的频率统计。</p><ol><li>利用POS标注器在句子中识别名词（名词短语）</li><li>数据挖掘记录出现频率</li><li>确定阈值，保留大于阈值的名词（名词短语）</li></ol><p>利用关联规则进行属性词挖掘，评论时常用比较固定、类似的词。</p><p>移除明显不是实体属性的名词显著提升算法精度。</p><hr><h2 id="6-2-利用句法关系"><a href="#6-2-利用句法关系" class="headerlink" title="6.2 利用句法关系"></a>6.2 利用句法关系</h2><p>观点句中，情感词和观点评价对象之间会存在多种句法关系来表征它们之间的评价或修饰关系。</p><h3 id="6-2-1-利用观点和观点评价对象间的评价关系"><a href="#6-2-1-利用观点和观点评价对象间的评价关系" class="headerlink" title="6.2.1 利用观点和观点评价对象间的评价关系"></a>6.2.1 利用观点和观点评价对象间的评价关系</h3><h3 id="6-2-2利用部分整体和属性关系"><a href="#6-2-2利用部分整体和属性关系" class="headerlink" title="6.2.2利用部分整体和属性关系"></a>6.2.2利用部分整体和属性关系</h3><h2 id="6-3-基于监督学习的属性抽取"><a href="#6-3-基于监督学习的属性抽取" class="headerlink" title="6.3 基于监督学习的属性抽取"></a>6.3 基于监督学习的属性抽取</h2><p>属性抽取是一种特殊的文本信息提取问题。序列学习方法包括隐马尔科夫模型（HMM）、条件随机场。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本章讨论如何抽取观点评价的实体和实体属性。&lt;/p&gt;</summary>
    
    
    
    <category term="Sentiment Analysis" scheme="https://juoyo.github.io/categories/Sentiment-Analysis/"/>
    
    
    <category term="抽取观点" scheme="https://juoyo.github.io/tags/%E6%8A%BD%E5%8F%96%E8%A7%82%E7%82%B9/"/>
    
    <category term="实体" scheme="https://juoyo.github.io/tags/%E5%AE%9E%E4%BD%93/"/>
    
    <category term="实体属性" scheme="https://juoyo.github.io/tags/%E5%AE%9E%E4%BD%93%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>情感分析ch2 什么是情感分析</title>
    <link href="https://juoyo.github.io/posts/dd993dfa.html"/>
    <id>https://juoyo.github.io/posts/dd993dfa.html</id>
    <published>2019-10-16T00:40:28.000Z</published>
    <updated>2019-10-18T03:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>评论中包含丰富观点信息，长度限制，用户往往直切主题。在产品和服务领域，观点通常最容易处理。相对来说，针对社会和政治的观点比较困难，因为其主题复杂且充斥情感表达、讽刺、反讽等语言现象。</p><a id="more"></a><h2 id="观点定义"><a href="#观点定义" class="headerlink" title="观点定义"></a>观点定义</h2><p>两个观点粒度问题：单一观点、一组观点。</p><h3 id="观点的定义"><a href="#观点的定义" class="headerlink" title="观点的定义"></a>观点的定义</h3><p><strong>定义2.1（观点）:</strong> </p><p>一个观点是一个四元组，（g, s, h, t），其中，g是观点评价对象，s是情感，h是观点持有者，t是表达此观点的时间。</p><p><strong>定义2.3（实体）：</strong></p><p>一个实体可以用一个对e:(T, W)来描述，其中T是一个层次关系，包含组件、子组件，W是e的一个属性组合。</p><h3 id="观点中的情感"><a href="#观点中的情感" class="headerlink" title="观点中的情感"></a>观点中的情感</h3><p><strong>定义2.4（情感）：</strong></p><p>情感用三元组表示，(y, o, i)，其中，y是情感类型，o是情感倾向，i是情感的强度。</p><p>情感类型：理性、感性</p><p>情感倾向：正面、负面、中立。</p><p>情感强度：离散化评分表达情感的强度</p><h3 id="简化的观点定义"><a href="#简化的观点定义" class="headerlink" title="简化的观点定义"></a>简化的观点定义</h3><p>用属性aspect指代目标实体的组件和参数。</p><p><font color="blue">给出把非结构化文本转换为结构化数据的基本框架</font></p><p><strong>定义2.7（观点）：</strong></p><p>观点是一个五元组，（e, a, s, h, t），e是目标实体，a是实体e中一个观点评价的实体属性，s是实体e的a属性的观点中包含的情感，h是观点持有者，t是观点发布时间。这里e,a共同表示观点评价的对象。</p><p>基于此定义的情感分析（或称为观点挖掘）常称为基于属性的情感分析。</p><h3 id="观点的理由和限定条件"><a href="#观点的理由和限定条件" class="headerlink" title="观点的理由和限定条件"></a>观点的理由和限定条件</h3><p>实际上，仅仅分析出负面情感还不够，需要知道引起负面情感的原因。另外需要了解观点的限定条件。</p><p><strong>定义2.8（观点的原因）：</strong></p><p>引起或触发观点的缘由，或对观点之所以如此的解释。</p><p><strong>定义2.9（观点的限定条件）：</strong></p><p>可以限制和约束观点中的含义。</p><h3 id="情感分析的目标和任务"><a href="#情感分析的目标和任务" class="headerlink" title="情感分析的目标和任务"></a>情感分析的目标和任务</h3><p><strong>情感分析的目标</strong>  给定一个包含观点信息的文档d，找出所有的观点五元组(e, a, s, h, t)。更高级的分析需求，找出每个观点五元组中情感的原因和限定条件。</p><p><strong>情感分析的关键任务</strong>  与五元组成分密切相关，第一个任务是抽取实体，这个任务与信息抽取中的命名实体识别比较类似，不同之处在于一个实体可以是事件、议题或主题，这些均不是命名实体。</p><p>​        抽取完成后，对抽取出的实体进行分类。</p><p>属性抽取是一个很有挑战的任务。</p><p>观点定义中，第三个成分是观点的情感。对情感，需要进行情感分类或回归，以确定属性或实体的观点倾向或情感打分。第四和第五个成分分别是观点持有者和观点的发布时间，容易提取。</p><p><strong>实体模型</strong></p><p>一个实体e由它自己的整体，以及它的一个有限的属性集合A=｛a1, a2, … , an｝来表示；在文本中，实体e可以由实体表达的有限集合｛ee1, ee2, … , ees｝中任一元素来表示。实体e的每个属性a也可以由属性表达的有限集合｛ae1, ae2, … , aem｝中任一元素来表示。</p><p><strong>观点文档模型</strong>  包含观点的文档d包含针对一个有限实体集合｛e1, e2, … , er｝及其属性子集的观点信息。</p><p>给定观点文档集合D，情感分析主要包括如下8个任务：<br><font color="blue">任务1(实体抽取和消解)：</font>抽取D中所有实体表达，并把相似实体表达聚类为一些实体簇（或类别）。每个实体表达簇都对应一个唯一的实体。</p><p><font color="blue">任务2(属性抽取和消解)：</font></p><p><font color="blue">任务3(观点持有者抽取和消解)：</font></p><p><font color="blue">任务4(时间抽取和标准化)：</font></p><p><font color="blue">任务5(属性的情感分类和回归)：</font></p><p><font color="blue">任务6(生成观点五元组)：</font></p><p><font color="blue">任务7(观点原因抽取和消解)：</font></p><p><font color="blue">任务8(观点限定条件抽取和消解)：</font></p><p>观点的原因和限定条件十分有用，但是对于它们的抽取和聚类却非常有挑战性。</p><hr><h2 id="观点摘要的定义"><a href="#观点摘要的定义" class="headerlink" title="观点摘要的定义"></a>观点摘要的定义</h2><p><strong>定义2.14（基于属性的观点摘要）：</strong></p><p>对于实体e的基于属性的观点摘要结果具有如下形式：</p><p>GENERAL：对实体e持正面观点的人数</p><p>​                    对实体e持负面观点的人数</p><p>属性1        ：对实体e的属性1持正面观点的人数</p><p>​                      对实体e的属性1持负面观点的人数</p><p>​                                    ……</p><hr><h2 id="感情、情绪和心情"><a href="#感情、情绪和心情" class="headerlink" title="感情、情绪和心情"></a>感情、情绪和心情</h2><p><strong>定义2.15（情绪）：</strong>  情绪是一个五元组，（e, a, m, f, t），e是目标实体，a是e的属性，是情绪书法的目标，m是情绪类型或一个情绪类型和强度构成的元组，f是情绪的接受者，t是情绪表达的时间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;评论中包含丰富观点信息，长度限制，用户往往直切主题。在产品和服务领域，观点通常最容易处理。相对来说，针对社会和政治的观点比较困难，因为其主题复杂且充斥情感表达、讽刺、反讽等语言现象。&lt;/p&gt;</summary>
    
    
    
    <category term="Sentiment Analysis" scheme="https://juoyo.github.io/categories/Sentiment-Analysis/"/>
    
    
    <category term="评论" scheme="https://juoyo.github.io/tags/%E8%AF%84%E8%AE%BA/"/>
    
    <category term="观点" scheme="https://juoyo.github.io/tags/%E8%A7%82%E7%82%B9/"/>
    
    <category term="观点摘要" scheme="https://juoyo.github.io/tags/%E8%A7%82%E7%82%B9%E6%91%98%E8%A6%81/"/>
    
  </entry>
  
  <entry>
    <title>情感分析ch1 引言</title>
    <link href="https://juoyo.github.io/posts/5a0deea4.html"/>
    <id>https://juoyo.github.io/posts/5a0deea4.html</id>
    <published>2019-10-15T09:28:35.000Z</published>
    <updated>2019-10-18T03:34:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>情感分析，也称为观点挖掘，目标是从文本中分析出人们对于实体及其属性所表达的观点和情绪。</p><a id="more"></a><h2 id="情感分析的应用"><a href="#情感分析的应用" class="headerlink" title="情感分析的应用"></a>情感分析的应用</h2><p>有关情感分析的研究：</p><ul><li>票房预测</li><li>政治选举</li><li>股票市场预测</li></ul><hr><h2 id="情感分析研究"><a href="#情感分析研究" class="headerlink" title="情感分析研究"></a>情感分析研究</h2><h3 id="针对不同文本颗粒度的情感分析研究"><a href="#针对不同文本颗粒度的情感分析研究" class="headerlink" title="针对不同文本颗粒度的情感分析研究"></a>针对不同文本颗粒度的情感分析研究</h3><p>根据文本颗粒度可以划分三个级别：篇章级、句子级、属性级</p><p>根据观点类型划分：常规型观点、比较型观点。</p><p>常规性观点针对一个目标实体或其属性表达情感倾向，比较型观点比较多个实体的共同属性。</p><h3 id="情感词典及其问题"><a href="#情感词典及其问题" class="headerlink" title="情感词典及其问题"></a>情感词典及其问题</h3><p>情感词也称为观点词。</p><p>仅仅依靠情感词典进行情感分析不够，问题主要有：</p><ol><li>情感词的倾向性会随着应用领域以及所在上下文的变化而变化。</li><li>一个句子即使出现情感词，不一定会表达情感。</li><li>讽刺句句式难以处理。</li><li>句子可能不出现任何情感词，一般在陈述事实，但可能隐含作者观点。</li></ol><h3 id="辩论与评论分析"><a href="#辩论与评论分析" class="headerlink" title="辩论与评论分析"></a>辩论与评论分析</h3><p>社会媒体中两种类型文本：单一型帖子、在线对话。</p><p>在线对话要特别分析，发现争论焦点以及核心问题，试图判别真实意图。</p><h3 id="意图挖掘"><a href="#意图挖掘" class="headerlink" title="意图挖掘"></a>意图挖掘</h3><h3 id="垃圾观点检测与评论质量"><a href="#垃圾观点检测与评论质量" class="headerlink" title="垃圾观点检测与评论质量"></a>垃圾观点检测与评论质量</h3><hr><h2 id="情感分析是迷你NLP任务"><a href="#情感分析是迷你NLP任务" class="headerlink" title="情感分析是迷你NLP任务"></a>情感分析是迷你NLP任务</h2><p>情感分析是自然语言处理的子领域，涉及了NLP几乎所有核心问题，例如：词汇语义、指代消解、词义消歧、篇章分析、信息抽取以及语义分析等。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;情感分析，也称为观点挖掘，目标是从文本中分析出人们对于实体及其属性所表达的观点和情绪。&lt;/p&gt;</summary>
    
    
    
    <category term="Sentiment Analysis" scheme="https://juoyo.github.io/categories/Sentiment-Analysis/"/>
    
    
    <category term="情感分析" scheme="https://juoyo.github.io/tags/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
    
    <category term="观点挖掘" scheme="https://juoyo.github.io/tags/%E8%A7%82%E7%82%B9%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch14 正则表达式</title>
    <link href="https://juoyo.github.io/posts/fcaeefa.html"/>
    <id>https://juoyo.github.io/posts/fcaeefa.html</id>
    <published>2019-10-14T15:23:08.000Z</published>
    <updated>2019-10-14T15:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java标准库的<code>java.util.regex</code>包内置了正则表达式引擎。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String regex = <span class="string">&quot;20\\d\\d&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;2019&quot;</span>.matches(regex)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2100&quot;</span>.matches(regex)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java标准库的&lt;code&gt;java.util.regex&lt;/code&gt;包内置了正则表达式引擎。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="正则" scheme="https://juoyo.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch13 单元测试</title>
    <link href="https://juoyo.github.io/posts/7c148b8a.html"/>
    <id>https://juoyo.github.io/posts/7c148b8a.html</id>
    <published>2019-10-06T16:33:36.000Z</published>
    <updated>2019-10-06T17:03:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>单元测试就是针对最小的功能单元编写测试代码。测试驱动开发，是指先编写接口，紧接着编写测试。编写完测试后，我们才开始真正编写实现代码。</p><a id="more"></a><p>JUnit是一个开源的Java语言的单元测试框架，专门针对Java设计，使用最广泛。</p><h2 id="JUnit介绍"><a href="#JUnit介绍" class="headerlink" title="JUnit介绍"></a>JUnit介绍</h2><h3 id="JUnit创建及配置"><a href="#JUnit创建及配置" class="headerlink" title="JUnit创建及配置"></a>JUnit创建及配置</h3><p>可以直接在IDE中编写并运行JUnit测试，当我们已经编写了一个<code>Factorial.java</code>文件后，我们想对其进行测试，需要编写一个对应的<code>FactorialTest.java</code>文件，以<code>Test</code>为后缀是一个惯例，并分别将其放入<code>src</code>和<code>test</code>目录中。最后，在<code>Project</code> - <code>Properties</code> - <code>Java Build Path</code> - <code>Libraries</code>中添加<code>JUnit 5</code>的库。</p><h3 id="单元测试使用"><a href="#单元测试使用" class="headerlink" title="单元测试使用"></a>单元测试使用</h3><p>核心测试方法<code>testFact()</code>加上了<code>@Test</code>注解，这是JUnit要求的，它会把带有<code>@Test</code>的方法识别为测试方法。在测试方法内部，用<code>assertEquals(1, Factorial.fact(1))</code>表示，期望<code>Factorial.fact(1)</code>返回<code>1</code>。<code>assertEquals(expected, actual)</code>是最常用的测试方法，它在<code>Assertion</code>类中定义。</p><h3 id="单元测试运行"><a href="#单元测试运行" class="headerlink" title="单元测试运行"></a>单元测试运行</h3><p>运行单元测试非常简单。选中<code>Factorial.java</code>文件，点击<code>Run</code> - <code>Run As</code> - <code>JUnit Test</code>，Eclipse自动运行这个JUnit测试，并显示结果。如果测试结果与预期不符，<code>assertEquals()</code>会抛出异常，会得到一个测试失败的结果。</p><h3 id="单元测试规范"><a href="#单元测试规范" class="headerlink" title="单元测试规范"></a>单元测试规范</h3><p>在编写单元测试的时候，要遵循一定的规范：</p><ul><li><p>单元测试代码本身必须非常简单，不能再为测试代码编写测试；</p></li><li><p>每个单元测试应当互相独立，不依赖运行的顺序；</p></li><li><p>测试时不但要覆盖常用测试用例，还要特别注意测试边界条件，例如输入为<code>0</code>，<code>null</code>，空字符串<code>&quot;&quot;</code>等情况。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;单元测试就是针对最小的功能单元编写测试代码。测试驱动开发，是指先编写接口，紧接着编写测试。编写完测试后，我们才开始真正编写实现代码。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="JUnit" scheme="https://juoyo.github.io/tags/JUnit/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch12 日期与时间</title>
    <link href="https://juoyo.github.io/posts/c1f6318f.html"/>
    <id>https://juoyo.github.io/posts/c1f6318f.html</id>
    <published>2019-09-28T16:09:01.000Z</published>
    <updated>2019-10-06T16:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>一套新的API是在Java 8引入的，定义在<code>java.time</code>这个包里面，主要包括<code>LocalDateTime</code>、<code>ZonedDateTime</code>、<code>ZoneId</code>等。</p><a id="more"></a><p>从Java 8开始，<code>java.time</code>包提供了新的日期和时间API，主要涉及的类型有：</p><ul><li>本地日期和时间：<code>LocalDateTime</code>，<code>LocalDate</code>，<code>LocalTime</code>；</li><li>带时区的日期和时间：<code>ZonedDateTime</code>；</li><li>时刻：<code>Instant</code>；</li><li>时区：<code>ZoneId</code>，<code>ZoneOffset</code>；</li><li>时间间隔：<code>Duration</code>。</li></ul><p>以及一套新的用于取代<code>SimpleDateFormat</code>的格式化类型<code>DateTimeFormatter</code>。</p><h2 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate d = LocalDate.now(); <span class="comment">// 当前日期</span></span><br><span class="line">        LocalTime t = LocalTime.now(); <span class="comment">// 当前时间</span></span><br><span class="line">        LocalDateTime dt = LocalDateTime.now(); <span class="comment">// 当前日期和时间</span></span><br><span class="line">        System.out.println(d); <span class="comment">// 严格按照ISO 8601格式打印</span></span><br><span class="line">        System.out.println(t); <span class="comment">// 严格按照ISO 8601格式打印</span></span><br><span class="line">        System.out.println(dt); <span class="comment">// 严格按照ISO 8601格式打印</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h2><p>如果要自定义输出的格式，或者要把一个非ISO 8601格式的字符串解析成<code>LocalDateTime</code>，可以使用新的<code>DateTimeFormatter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.time.format.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义格式化:</span></span><br><span class="line">        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(dtf.format(LocalDateTime.now()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用自定义格式解析:</span></span><br><span class="line">        LocalDateTime dt2 = LocalDateTime.parse(<span class="string">&quot;2019/11/30 15:16:17&quot;</span>, dtf);</span><br><span class="line">        System.out.println(dt2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一套新的API是在Java 8引入的，定义在&lt;code&gt;java.time&lt;/code&gt;这个包里面，主要包括&lt;code&gt;LocalDateTime&lt;/code&gt;、&lt;code&gt;ZonedDateTime&lt;/code&gt;、&lt;code&gt;ZoneId&lt;/code&gt;等。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="日期" scheme="https://juoyo.github.io/tags/%E6%97%A5%E6%9C%9F/"/>
    
    <category term="时间" scheme="https://juoyo.github.io/tags/%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>P5 朋友圈 LeetCode547</title>
    <link href="https://juoyo.github.io/posts/f87f0653.html"/>
    <id>https://juoyo.github.io/posts/f87f0653.html</id>
    <published>2019-09-22T13:57:04.000Z</published>
    <updated>2019-12-09T12:58:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>P5 朋友圈，难度中等，主要标签为深度优先搜索，并查集。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。所谓的朋友圈，是指所有朋友的集合。</p><p>给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。</p><p>示例 1:</p><p>输入:<br>[[1,1,0],<br> [1,1,0],<br> [0,0,1]]<br>输出: 2<br>说明：已知学生0和学生1互为朋友，他们在一个朋友圈。<br>第2个学生自己在一个朋友圈。所以返回2。</p><p>示例 2:</p><p>输入:<br>[[1,1,0],<br> [1,1,1],<br> [0,1,1]]<br>输出: 1<br>说明：已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。<br>注意：</p><p>N 在[1,200]的范围内。<br>对于所有学生，有M[i][i] = 1。<br>如果有M[i][j] = 1，则有M[j][i] = 1。</p><p>LeetCode题目链接<a href="https://leetcode-cn.com/problems/friend-circles/">https://leetcode-cn.com/problems/friend-circles/</a></p><hr><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="20190922记录"><a href="#20190922记录" class="headerlink" title="20190922记录"></a>20190922记录</h3><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><p>通过遍历矩阵生成相应的并查集，然后返回所有的根节点数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCircleNum</span>(<span class="params">self, M: <span class="string">&#x27;List[List[int]]&#x27;</span></span>) -&gt; &#x27;int&#x27;:</span></span><br><span class="line">        n = <span class="built_in">len</span>(M)</span><br><span class="line">        parents = <span class="built_in">list</span>(<span class="built_in">range</span>(n))</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">x</span>):</span></span><br><span class="line">            <span class="keyword">if</span> x != parents[x]:</span><br><span class="line">                parents[x] = find(parents[x])</span><br><span class="line">            <span class="keyword">return</span> parents[x]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> M[i][j]:</span><br><span class="line">                    parents[find(i)] = find(j)</span><br><span class="line">        res = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            res.add(find(i))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(res)</span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = Solution()</span><br><span class="line">M = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">print(s.findCircleNum(M))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><p>很多时候并查集可以处理的问题，也可以通过<code>DFS</code>处理，这个问题可以用DFS解决。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;P5 朋友圈，难度中等，主要标签为深度优先搜索，并查集。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="并查集" scheme="https://juoyo.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="朋友圈" scheme="https://juoyo.github.io/tags/%E6%9C%8B%E5%8F%8B%E5%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>基础算法  有爱的并查集</title>
    <link href="https://juoyo.github.io/posts/314d7c2e.html"/>
    <id>https://juoyo.github.io/posts/314d7c2e.html</id>
    <published>2019-09-21T16:28:42.000Z</published>
    <updated>2019-09-21T16:42:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>有爱的并查集，深入浅出，一举拿下。</p><a id="more"></a><p>话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉“朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的帮派，通过两两之间的朋友关系串联起来。而不在同一个帮派的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？</p><p>我们可以在每个朋友圈内推举出一个比较有名望的人，作为该圈子的代表人物。这样，每个圈子就可以这样命名“中国同胞队”美国同胞队”……两人只要互相对一下自己的队长是不是同一个人，就可以确定敌友关系了。</p><p>但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？”这样，想打一架得先问个几十年，饿都饿死了，受不了。这样一来，队长面子上也挂不住了，不仅效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否是一个帮派的，至于他们是如何通过朋友关系相关联的，以及每个圈子内部的结构是怎样的，甚至队长是谁，都不重要了。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。</p><p><img src="/posts/314d7c2e.htm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%9C%89%E7%88%B1%E7%9A%84%E5%B9%B6%E6%9F%A5%E9%9B%86%5C1.gif"></p><p>下面我们来看并查集的实现。 int pre[1000]; 这个数组，记录了每个大侠的上级是谁。大侠们从1或者0开始编号（依据题意而定），pre[15]=3就表示15号大侠的上级是3号大侠。如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去。 </p><p>find这个函数就是找掌门用的，意义再清楚不过了（路径压缩算法先不论，后面再说）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionsearch</span><span class="params">(<span class="keyword">int</span> root)</span> <span class="comment">//查找根结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> son, tmp;</span><br><span class="line">son = root;</span><br><span class="line"><span class="keyword">while</span>(root != pre[root]) <span class="comment">//我的上级不是掌门</span></span><br><span class="line">root = pre[root];</span><br><span class="line"><span class="keyword">while</span>(son != root) <span class="comment">//我就找他的上级，直到掌门出现</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = pre[son];</span><br><span class="line">pre[son] = root;</span><br><span class="line">son = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root; <span class="comment">//掌门驾到~~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 再来看看join函数，就是在两个点之间连一条线，这样一来，原先它们所在的两个板块的所有点就都可以互通了。这在图上很好办，画条线就行了。但我们现在是用并查集来描述武林中的状况的，一共只有一个pre[]数组，该如何实现呢？ 还是举江湖的例子，假设现在武林中的形势如图所示。虚竹帅锅与周芷若MM是我非常喜欢的两个人物，他们的终极boss分别是玄慈方丈和灭绝师太，那明显就是两个阵营了。我不希望他们互相打架，就对他俩说：“你们两位拉拉勾，做好朋友吧。”他们看在我的面子上，同意了。这一同意可非同小可，整个少林和峨眉派的人就不能打架了。这么重大的变化，可如何实现呀，要改动多少地方？其实非常简单，我对玄慈方丈说：“大师，麻烦你把你的上级改为灭绝师太吧。这样一来，两派原先的所有人员的终极boss都是师太，那还打个球啊！反正我们关心的只是连通性，门派内部的结构不要紧的。”玄慈一听肯定火大了：“我靠，凭什么是我变成她手下呀，怎么不反过来？我抗议！”于是，两人相约一战，杀的是天昏地暗，风云为之变色啊，但是啊，这场战争终究会有胜负，胜者为王。弱者就被吞并了。反正谁加入谁效果是一样的，门派就由两个变成一个了。这段函数的意思明白了吧？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> root1, <span class="keyword">int</span> root2)</span> <span class="comment">//虚竹和周芷若做朋友</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">x = unionsearch(root1);<span class="comment">//我老大是玄慈</span></span><br><span class="line">y = unionsearch(root2);<span class="comment">//我老大是灭绝</span></span><br><span class="line"><span class="keyword">if</span>(x != y) </span><br><span class="line">pre[x] = y; <span class="comment">//打一仗，谁赢就当对方老大</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看路径压缩算法。建立门派的过程是用join函数两个人两个人地连接起来的，谁当谁的手下完全随机。最后的树状结构会变成什么样，我也无法预知，一字长蛇阵也有可能。这样查找的效率就会比较低下。最理想的情况就是所有人的直接上级都是掌门，一共就两级结构，只要找一次就找到掌门了。哪怕不能完全做到，也最好尽量接近。这样就产生了路径压缩算法。</p><p> 设想这样一个场景：两个互不相识的大侠碰面了，想知道能不能干一场。 于是赶紧打电话问自己的上级：“你是不是掌门？” 上级说：“我不是呀，我的上级是谁谁谁，你问问他看看。” 一路问下去，原来两人的最终boss都是东厂曹公公。 “哎呀呀，原来是自己人，有礼有礼，在下三营六组白面葫芦娃!” “幸会幸会，在下九营十八组仙子狗尾巴花！” 两人高高兴兴地手拉手喝酒去了。 “等等等等，两位大侠请留步，还有事情没完成呢！”我叫住他俩。 “哦，对了，还要做路径压缩。”两人醒悟。 白面葫芦娃打电话给他的上级六组长：“组长啊，我查过了，其实偶们的掌门是曹公公。不如偶们一起结拜在曹公公手下吧，省得级别太低，以后查找掌门麻烦。” “唔，有道理。” 白面葫芦娃接着打电话给刚才拜访过的三营长……仙子狗尾巴花也做了同样的事情。 这样，查询中所有涉及到的人物都聚集在曹公公的直接领导下。每次查询都做了优化处理，所以整个门派树的层数都会维持在比较低的水平上。路径压缩的代码，看得懂很好，看不懂可以自己模拟一下，很简单的一个递归而已。总之它所实现的功能就是这么个意思。</p><p><img src="/posts/314d7c2e.htm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%9C%89%E7%88%B1%E7%9A%84%E5%B9%B6%E6%9F%A5%E9%9B%86%5C2.gif"></p><p>于是，问题圆满解决。。。。。。。。。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">1010</span>]; <span class="comment">//里面全是掌门</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionsearch</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> son, tmp;</span><br><span class="line">son = root;</span><br><span class="line"><span class="keyword">while</span>(root != pre[root]) <span class="comment">//寻找掌门ing……</span></span><br><span class="line">root = pre[root];</span><br><span class="line"><span class="keyword">while</span>(son != root) <span class="comment">//路径压缩</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = pre[son];</span><br><span class="line">pre[son] = root;</span><br><span class="line">son = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root; <span class="comment">//掌门驾到~</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num, road, total, i, start, end, root1, root2;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;num, &amp;road) &amp;&amp; num)</span><br><span class="line">&#123;</span><br><span class="line">total = num - <span class="number">1</span>; <span class="comment">//共num-1个门派</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= num; ++i) <span class="comment">//每条路都是掌门</span></span><br><span class="line">pre[i] = i;</span><br><span class="line"><span class="keyword">while</span>(road--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;start, &amp;end); <span class="comment">//他俩要结拜</span></span><br><span class="line">root1 = unionsearch(start);</span><br><span class="line">root2 = unionsearch(end);</span><br><span class="line"><span class="keyword">if</span>(root1 != root2) <span class="comment">//掌门不同？踢馆！~</span></span><br><span class="line">&#123;</span><br><span class="line">pre[root1] = root2;</span><br><span class="line">total--; <span class="comment">//门派少一个，敌人（要建的路）就少一个</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, total);<span class="comment">//天下局势：还剩几个门派</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>大部分内容转载于<a href="https://blog.csdn.net/niushuai666/article/details/6662911%EF%BC%8C%E6%84%9F%E8%B0%A2%E3%80%82">https://blog.csdn.net/niushuai666/article/details/6662911，感谢。</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有爱的并查集，深入浅出，一举拿下。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="并查集" scheme="https://juoyo.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode分类顺序表</title>
    <link href="https://juoyo.github.io/posts/e33b0069.html"/>
    <id>https://juoyo.github.io/posts/e33b0069.html</id>
    <published>2019-09-17T16:50:30.000Z</published>
    <updated>2019-12-15T11:03:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>此表为LeetCode分类顺序表，先易后难，并提供LeetCode前400重点250题版本。</p><a id="more"></a><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>题目说明</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>基础</td><td></td><td></td><td></td><td></td></tr><tr><td>27</td><td><a href="https://leetcode.com/problems/remove-element/">Remove Element</a></td><td></td><td></td><td>完成</td></tr><tr><td>26</td><td><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/">Remove Duplicates from Sorted Array</a></td><td></td><td></td><td></td></tr><tr><td>80</td><td><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/description/">Remove Duplicates from Sorted Array II</a></td><td></td><td></td><td></td></tr><tr><td>277</td><td><a href="https://leetcode.com/problems/find-the-celebrity/description/">Find the Celebrity</a></td><td></td><td></td><td></td></tr><tr><td>189</td><td><a href="https://leetcode.com/problems/rotate-array/description/">Rotate Array</a></td><td></td><td></td><td></td></tr><tr><td>41</td><td><a href="https://leetcode.com/problems/first-missing-positive/description/">First Missing Positive</a></td><td></td><td></td><td></td></tr><tr><td>299</td><td><a href="https://leetcode.com/problems/bulls-and-cows/">Bulls and Cows</a></td><td></td><td></td><td></td></tr><tr><td>134</td><td><a href="https://leetcode.com/problems/gas-station/description/">Gas Station</a></td><td></td><td></td><td></td></tr><tr><td>118</td><td><a href="https://leetcode.com/problems/pascals-triangle/description/">Pascal’s Triangle</a></td><td>很少考</td><td></td><td></td></tr><tr><td>119</td><td><a href="https://leetcode.com/problems/pascals-triangle-ii/description/">Pascal’s Triangle II</a></td><td>很少考</td><td></td><td></td></tr><tr><td>169</td><td><a href="https://leetcode.com/problems/majority-element/description/">Majority Element</a></td><td>很少考</td><td></td><td></td></tr><tr><td>229</td><td><a href="https://leetcode.com/problems/majority-element-ii/description/">Majority Element II</a></td><td>很少考</td><td></td><td></td></tr><tr><td>274</td><td><a href="https://leetcode.com/problems/h-index/description/">H-Index</a></td><td></td><td></td><td></td></tr><tr><td>275</td><td><a href="https://leetcode.com/problems/h-index-ii/description/">H-Index II</a></td><td>Binary Search</td><td></td><td></td></tr><tr><td>243</td><td><a href="https://leetcode.com/problems/shortest-word-distance/description/">Shortest Word Distance</a></td><td></td><td></td><td></td></tr><tr><td>244</td><td><a href="https://leetcode.com/problems/shortest-word-distance-ii/description/">Shortest Word Distance II</a></td><td></td><td></td><td></td></tr><tr><td>245</td><td><a href="https://leetcode.com/problems/shortest-word-distance-iii/description/">Shortest Word Distance III</a></td><td></td><td></td><td></td></tr><tr><td>217</td><td><a href="https://leetcode.com/problems/contains-duplicate/description/">Contains Duplicate</a></td><td></td><td></td><td></td></tr><tr><td>219</td><td><a href="https://leetcode.com/problems/contains-duplicate-ii/description/">Contains Duplicate II</a></td><td>很少考</td><td></td><td></td></tr><tr><td>220</td><td><a href="https://leetcode.com/problems/contains-duplicate-iii/description/">Contains Duplicate III</a></td><td>很少考</td><td></td><td></td></tr><tr><td>55</td><td><a href="https://leetcode.com/problems/jump-game/description/">Jump Game</a></td><td></td><td></td><td></td></tr><tr><td>45</td><td><a href="https://leetcode.com/problems/jump-game-ii/description/">Jump Game II</a></td><td></td><td></td><td></td></tr><tr><td>121</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/">Best Time to Buy and Sell Stock</a></td><td></td><td></td><td></td></tr><tr><td>122</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/">Best Time to Buy and Sell Stock II</a></td><td></td><td></td><td></td></tr><tr><td>123</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/">Best Time to Buy and Sell Stock III</a></td><td></td><td></td><td></td></tr><tr><td>188</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/description/">Best Time to Buy and Sell Stock IV</a></td><td></td><td></td><td></td></tr><tr><td>309</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/">Best Time to Buy and Sell Stock with Cooldown</a></td><td></td><td></td><td></td></tr><tr><td>11</td><td><a href="https://leetcode.com/problems/container-with-most-water/description/">Container With Most Water</a></td><td></td><td></td><td></td></tr><tr><td>42</td><td><a href="https://leetcode.com/problems/trapping-rain-water/description/">Trapping Rain Water</a></td><td></td><td></td><td></td></tr><tr><td>334</td><td><a href="https://leetcode.com/problems/increasing-triplet-subsequence/description/">Increasing Triplet Subsequence</a></td><td></td><td></td><td></td></tr><tr><td>128</td><td><a href="https://leetcode.com/problems/longest-consecutive-sequence/description/">Longest Consecutive Sequence</a></td><td></td><td></td><td></td></tr><tr><td>164</td><td><a href="https://leetcode.com/problems/maximum-gap/description/">Maximum Gap</a></td><td>Bucket</td><td></td><td></td></tr><tr><td>287</td><td><a href="https://leetcode.com/problems/find-the-duplicate-number/description/">Find the Duplicate Number</a></td><td></td><td></td><td></td></tr><tr><td>135</td><td><a href="https://leetcode.com/problems/candy/description/">Candy</a></td><td>很少考</td><td></td><td></td></tr><tr><td>330</td><td><a href="https://leetcode.com/problems/patching-array/description/">Patching Array</a></td><td>很少考</td><td></td><td></td></tr><tr><td>提高</td><td></td><td></td><td></td><td></td></tr><tr><td>4</td><td><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/">Median of Two Sorted Arrays</a></td><td>很少考</td><td></td><td></td></tr><tr><td>321</td><td><a href="https://leetcode.com/problems/create-maximum-number/description/">Create Maximum Number</a></td><td>很少考</td><td></td><td></td></tr><tr><td>327</td><td><a href="https://leetcode.com/problems/count-of-range-sum/description/">Count of Range Sum</a></td><td></td><td></td><td></td></tr><tr><td>289</td><td><a href="https://leetcode.com/problems/game-of-life/description/">Game of Life</a></td><td></td><td></td><td></td></tr><tr><td>Interval</td><td></td><td></td><td></td><td></td></tr><tr><td>57</td><td><a href="https://leetcode.com/problems/insert-interval/description/">Insert Interval</a></td><td></td><td></td><td></td></tr><tr><td>56</td><td><a href="https://leetcode.com/problems/merge-intervals/description/">Merge Intervals</a></td><td></td><td></td><td></td></tr><tr><td>252</td><td><a href="https://leetcode.com/problems/meeting-rooms/description/">Meeting Rooms</a></td><td></td><td></td><td></td></tr><tr><td>253</td><td><a href="https://leetcode.com/problems/meeting-rooms-ii/description/">Meeting Rooms II</a></td><td></td><td></td><td></td></tr><tr><td>352</td><td><a href="https://leetcode.com/problems/data-stream-as-disjoint-intervals/description/">Data Stream as Disjoint Intervals</a></td><td>TreeMap</td><td></td><td></td></tr><tr><td>Counter</td><td></td><td></td><td></td><td></td></tr><tr><td>239</td><td><a href="https://leetcode.com/problems/sliding-window-maximum/description/">Sliding Window Maximum</a></td><td></td><td></td><td></td></tr><tr><td>295</td><td><a href="https://leetcode.com/problems/find-median-from-data-stream/description/">Find Median from Data Stream</a></td><td></td><td></td><td></td></tr><tr><td>53</td><td><a href="https://leetcode.com/problems/maximum-subarray/description/">Maximum Subarray</a></td><td></td><td></td><td></td></tr><tr><td>325</td><td><a href="https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/">Maximum Size Subarray Sum Equals k</a></td><td></td><td></td><td></td></tr><tr><td>209</td><td><a href="https://leetcode.com/problems/minimum-size-subarray-sum/description/">Minimum Size Subarray Sum</a></td><td></td><td></td><td></td></tr><tr><td>238</td><td><a href="https://leetcode.com/problems/product-of-array-except-self/description/">Product of Array Except Self</a></td><td></td><td></td><td></td></tr><tr><td>152</td><td><a href="https://leetcode.com/problems/maximum-product-subarray/description/">Maximum Product Subarray</a></td><td></td><td></td><td></td></tr><tr><td>228</td><td><a href="https://leetcode.com/problems/summary-ranges/description/">Summary Ranges</a></td><td></td><td></td><td></td></tr><tr><td>163</td><td><a href="https://leetcode.com/problems/missing-ranges/description/">Missing Ranges</a></td><td></td><td></td><td></td></tr><tr><td>Counter</td><td></td><td></td><td></td><td></td></tr><tr><td>88</td><td><a href="https://leetcode.com/problems/merge-sorted-array/description/">Merge Sorted Array</a></td><td></td><td></td><td></td></tr><tr><td>75</td><td><a href="https://leetcode.com/problems/sort-colors/description/">Sort Colors</a></td><td></td><td></td><td></td></tr><tr><td>283</td><td><a href="https://leetcode.com/problems/move-zeroes/description/">Move Zeroes</a></td><td></td><td></td><td></td></tr><tr><td>376</td><td><a href="https://leetcode.com/problems/wiggle-subsequence/description/">Wiggle Subsequence</a></td><td></td><td></td><td></td></tr><tr><td>280</td><td><a href="https://leetcode.com/problems/wiggle-sort/description/">Wiggle Sort</a></td><td></td><td></td><td></td></tr><tr><td>324</td><td><a href="https://leetcode.com/problems/wiggle-sort-ii/description/">Wiggle Sort II</a></td><td></td><td></td><td></td></tr><tr><td>278</td><td><a href="https://leetcode.com/problems/first-bad-version/description/">First Bad Version</a></td><td></td><td></td><td></td></tr><tr><td>35</td><td><a href="https://leetcode.com/problems/search-insert-position/description/">Search Insert Position</a></td><td></td><td></td><td></td></tr><tr><td>33</td><td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/">Search in Rotated Sorted Array</a></td><td></td><td></td><td></td></tr><tr><td>81</td><td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/">Search in Rotated Sorted Array II</a></td><td></td><td></td><td></td></tr><tr><td>153</td><td><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/">Find Minimum in Rotated Sorted Array</a></td><td></td><td></td><td></td></tr><tr><td>154</td><td><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/description/">Find Minimum in Rotated Sorted Array II</a></td><td></td><td></td><td></td></tr><tr><td>162</td><td><a href="https://leetcode.com/problems/find-peak-element/description/">Find Peak Element</a></td><td></td><td></td><td></td></tr><tr><td>374</td><td><a href="https://leetcode.com/problems/guess-number-higher-or-lower/">Guess Number Higher or Lower</a></td><td></td><td></td><td></td></tr><tr><td>34</td><td><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/">Find First and Last Position of Element in Sorted Array</a></td><td></td><td></td><td></td></tr><tr><td>349</td><td><a href="https://leetcode.com/problems/intersection-of-two-arrays/description/">Intersection of Two Arrays</a></td><td></td><td></td><td></td></tr><tr><td>350</td><td><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/description/">Intersection of Two Arrays II</a></td><td></td><td></td><td></td></tr><tr><td>315</td><td><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/description/">Count of Smaller Numbers After Self</a></td><td></td><td></td><td></td></tr><tr><td>300</td><td><a href="https://leetcode.com/problems/longest-increasing-subsequence/description/">Longest Increasing Subsequence</a></td><td></td><td></td><td></td></tr><tr><td>354</td><td><a href="https://leetcode.com/problems/russian-doll-envelopes/description/">Russian Doll Envelopes</a></td><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>说明</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>基础</td><td></td><td></td><td></td><td></td></tr><tr><td>28</td><td><a href="https://leetcode.com/problems/implement-strstr/description/">Implement strStr()</a></td><td></td><td></td><td></td></tr><tr><td>14</td><td><a href="https://leetcode.com/problems/longest-common-prefix/description/">Longest Common Prefix</a></td><td></td><td></td><td></td></tr><tr><td>58</td><td><a href="https://leetcode.com/problems/length-of-last-word/description/">Length of Last Word</a></td><td></td><td></td><td></td></tr><tr><td>387</td><td><a href="https://leetcode.com/problems/first-unique-character-in-a-string/description/">First Unique Character in a String</a></td><td></td><td></td><td></td></tr><tr><td>383</td><td><a href="https://leetcode.com/problems/ransom-note/description/">Ransom Note</a></td><td></td><td></td><td></td></tr><tr><td>344</td><td><a href="https://leetcode.com/problems/reverse-string/description/">Reverse String</a></td><td></td><td></td><td></td></tr><tr><td>151</td><td><a href="https://leetcode.com/problems/reverse-words-in-a-string/description/">Reverse Words in a String</a></td><td></td><td></td><td></td></tr><tr><td>186</td><td><a href="https://leetcode.com/problems/reverse-words-in-a-string-ii/description/">Reverse Words in a String II</a></td><td></td><td></td><td></td></tr><tr><td>345</td><td><a href="https://leetcode.com/problems/reverse-vowels-of-a-string/description/">Reverse Vowels of a String</a></td><td></td><td></td><td></td></tr><tr><td>205</td><td><a href="https://leetcode.com/problems/isomorphic-strings/description/">Isomorphic Strings</a></td><td></td><td></td><td></td></tr><tr><td>293</td><td><a href="https://leetcode.com/problems/flip-game/description/">Flip Game</a></td><td></td><td></td><td></td></tr><tr><td>294</td><td><a href="https://leetcode.com/problems/flip-game-ii/description/">Flip Game II</a></td><td></td><td></td><td></td></tr><tr><td>290</td><td><a href="https://leetcode.com/problems/word-pattern/description/">Word Pattern</a></td><td></td><td></td><td></td></tr><tr><td>242</td><td><a href="https://leetcode.com/problems/valid-anagram/description/">Valid Anagram</a></td><td></td><td></td><td></td></tr><tr><td>49</td><td><a href="https://leetcode.com/problems/group-anagrams/description/">Group Anagrams</a></td><td></td><td></td><td></td></tr><tr><td>249</td><td><a href="https://leetcode.com/problems/group-shifted-strings/description/">Group Shifted Strings</a></td><td></td><td></td><td></td></tr><tr><td>87</td><td><a href="https://leetcode.com/problems/scramble-string/description/">Scramble String</a></td><td></td><td></td><td></td></tr><tr><td>179</td><td><a href="https://leetcode.com/problems/largest-number/description/">Largest Number</a></td><td>很少考</td><td></td><td></td></tr><tr><td>6</td><td><a href="https://leetcode.com/problems/zigzag-conversion/description/">ZigZag Conversion</a></td><td>很少考</td><td></td><td></td></tr><tr><td>161</td><td><a href="https://leetcode.com/problems/one-edit-distance/">One Edit Distance</a></td><td></td><td></td><td></td></tr><tr><td>38</td><td><a href="https://leetcode.com/problems/count-and-say/description/">Count and Say</a></td><td></td><td></td><td></td></tr><tr><td>358</td><td><a href="https://leetcode.com/problems/rearrange-string-k-distance-apart/description/">Rearrange String k Distance Apart</a></td><td></td><td></td><td></td></tr><tr><td>316</td><td><a href="https://leetcode.com/problems/remove-duplicate-letters/description/">Remove Duplicate Letters</a></td><td></td><td></td><td></td></tr><tr><td>271</td><td><a href="https://leetcode.com/problems/encode-and-decode-strings/description/">Encode and Decode Strings</a></td><td></td><td></td><td></td></tr><tr><td>168</td><td><a href="https://leetcode.com/problems/excel-sheet-column-title/description/">Excel Sheet Column Title</a></td><td></td><td></td><td></td></tr><tr><td>171</td><td><a href="https://leetcode.com/problems/excel-sheet-column-number/description/">Excel Sheet Column Number</a></td><td></td><td></td><td></td></tr><tr><td>13</td><td><a href="https://leetcode.com/problems/roman-to-integer/description/">Roman to Integer</a></td><td></td><td></td><td></td></tr><tr><td>12</td><td><a href="https://leetcode.com/problems/integer-to-roman/description/">Integer to Roman</a></td><td></td><td></td><td></td></tr><tr><td>273</td><td><a href="https://leetcode.com/problems/integer-to-english-words/description/">Integer to English Words</a></td><td></td><td></td><td></td></tr><tr><td>246</td><td><a href="https://leetcode.com/problems/strobogrammatic-number/description/">Strobogrammatic Number</a></td><td></td><td></td><td></td></tr><tr><td>247</td><td><a href="https://leetcode.com/problems/strobogrammatic-number-ii/description/">Strobogrammatic Number II</a></td><td></td><td></td><td></td></tr><tr><td>248</td><td><a href="https://leetcode.com/problems/strobogrammatic-number-iii/description/">Strobogrammatic Number III</a></td><td>很少考</td><td></td><td></td></tr><tr><td>提高</td><td></td><td></td><td></td><td></td></tr><tr><td>157</td><td><a href="https://leetcode.com/problems/read-n-characters-given-read4/description/">Read N Characters Given Read4</a></td><td></td><td></td><td></td></tr><tr><td>158</td><td><a href="https://leetcode.com/problems/read-n-characters-given-read4-ii-call-multiple-times/description/">Read N Characters Given Read4 II - Call multiple times</a></td><td></td><td></td><td></td></tr><tr><td>68</td><td><a href="https://leetcode.com/problems/text-justification/description/">Text Justification</a></td><td></td><td></td><td></td></tr><tr><td>65</td><td><a href="https://leetcode.com/problems/valid-number/description/">Valid Number</a></td><td></td><td></td><td></td></tr><tr><td>Substring</td><td></td><td></td><td></td><td></td></tr><tr><td>76</td><td><a href="https://leetcode.com/problems/minimum-window-substring/description/">Minimum Window Substring</a></td><td>Sliding Window</td><td></td><td></td></tr><tr><td>30</td><td><a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words/description/">Substring with Concatenation of All Words</a></td><td>Sliding Window</td><td></td><td></td></tr><tr><td>3</td><td><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/">Longest Substring Without Repeating Characters</a></td><td>Sliding Window</td><td></td><td></td></tr><tr><td>340</td><td><a href="https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/description/">Longest Substring with At Most K Distinct Characters</a></td><td>Sliding Window</td><td></td><td></td></tr><tr><td>395</td><td><a href="https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/description/">Longest Substring with At Least K Repeating Characters</a></td><td>Sliding Window</td><td></td><td></td></tr><tr><td>159</td><td><a href="https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/description/">Longest Substring with At Most Two Distinct Characters</a></td><td>Sliding Window</td><td></td><td></td></tr><tr><td>Palindrome</td><td></td><td></td><td></td><td></td></tr><tr><td>125</td><td><a href="https://leetcode.com/problems/valid-palindrome/description/">Valid Palindrome</a></td><td></td><td></td><td></td></tr><tr><td>266</td><td><a href="https://leetcode.com/problems/palindrome-permutation/description/">Palindrome Permutation</a></td><td></td><td></td><td></td></tr><tr><td>5</td><td><a href="https://leetcode.com/problems/longest-palindromic-substring/description/">Longest Palindromic Substring</a></td><td></td><td></td><td></td></tr><tr><td>9</td><td><a href="https://leetcode.com/problems/palindrome-number/description/">Palindrome Number</a></td><td></td><td></td><td></td></tr><tr><td>214</td><td><a href="https://leetcode.com/problems/shortest-palindrome/description/">Shortest Palindrome</a></td><td></td><td></td><td></td></tr><tr><td>336</td><td><a href="https://leetcode.com/problems/palindrome-pairs/description/">Palindrome Pairs</a></td><td></td><td></td><td></td></tr><tr><td>131</td><td><a href="https://leetcode.com/problems/palindrome-partitioning/description/">Palindrome Partitioning</a></td><td></td><td></td><td></td></tr><tr><td>132</td><td><a href="https://leetcode.com/problems/palindrome-partitioning-ii/description/">Palindrome Partitioning II</a></td><td></td><td></td><td></td></tr><tr><td>267</td><td><a href="https://leetcode.com/problems/palindrome-permutation-ii/description/">Palindrome Permutation II</a></td><td></td><td></td><td></td></tr><tr><td>Parentheses</td><td></td><td></td><td></td><td></td></tr><tr><td>20</td><td><a href="https://leetcode.com/problems/valid-parentheses/description/">Valid Parentheses</a></td><td></td><td></td><td></td></tr><tr><td>22</td><td><a href="https://leetcode.com/problems/generate-parentheses/description/">Generate Parentheses</a></td><td></td><td></td><td></td></tr><tr><td>32</td><td><a href="https://leetcode.com/problems/longest-valid-parentheses/description/">Longest Valid Parentheses</a></td><td></td><td></td><td></td></tr><tr><td>241</td><td><a href="https://leetcode.com/problems/different-ways-to-add-parentheses/description/">Different Ways to Add Parentheses</a></td><td></td><td></td><td></td></tr><tr><td>301</td><td><a href="https://leetcode.com/problems/remove-invalid-parentheses/description/">Remove Invalid Parentheses</a></td><td></td><td></td><td></td></tr><tr><td>Subsequence</td><td></td><td></td><td></td><td></td></tr><tr><td>392</td><td><a href="https://leetcode.com/problems/is-subsequence/description/">Is Subsequence</a></td><td></td><td></td><td></td></tr><tr><td>115</td><td><a href="https://leetcode.com/problems/distinct-subsequences/description/">Distinct Subsequences</a></td><td></td><td></td><td></td></tr><tr><td>187</td><td><a href="https://leetcode.com/problems/repeated-dna-sequences/description/">Repeated DNA Sequences</a></td><td>很少考</td><td></td><td></td></tr></tbody></table><hr><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>说明</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>基础</td><td></td><td></td><td></td><td></td></tr><tr><td>7</td><td><a href="https://leetcode.com/problems/reverse-integer/description/">Reverse Integer</a></td><td></td><td></td><td></td></tr><tr><td>165</td><td><a href="https://leetcode.com/problems/compare-version-numbers/description/">Compare Version Numbers</a></td><td></td><td></td><td></td></tr><tr><td>66</td><td><a href="https://leetcode.com/problems/plus-one/description/">Plus One</a></td><td></td><td></td><td></td></tr><tr><td>8</td><td><a href="https://leetcode.com/problems/string-to-integer-atoi/description/">String to Integer (atoi)</a></td><td></td><td></td><td></td></tr><tr><td>258</td><td><a href="https://leetcode.com/problems/add-digits/description/">Add Digits</a></td><td></td><td></td><td></td></tr><tr><td>67</td><td><a href="https://leetcode.com/problems/add-binary/description/">Add Binary</a></td><td></td><td></td><td></td></tr><tr><td>43</td><td><a href="https://leetcode.com/problems/multiply-strings/description/">Multiply Strings</a></td><td></td><td></td><td></td></tr><tr><td>29</td><td><a href="https://leetcode.com/problems/divide-two-integers/description/">Divide Two Integers</a></td><td></td><td></td><td></td></tr><tr><td>69</td><td><a href="https://leetcode.com/problems/sqrtx/description/">Sqrt(x)</a></td><td></td><td></td><td></td></tr><tr><td>50</td><td><a href="https://leetcode.com/problems/powx-n/description/">Pow(x, n)</a></td><td></td><td></td><td></td></tr><tr><td>367</td><td><a href="https://leetcode.com/problems/valid-perfect-square/description/">Valid Perfect Square</a></td><td></td><td></td><td></td></tr><tr><td>365</td><td><a href="https://leetcode.com/problems/water-and-jug-problem/description/">Water and Jug Problem</a></td><td></td><td></td><td></td></tr><tr><td>204</td><td><a href="https://leetcode.com/problems/count-primes/description/">Count Primes</a></td><td></td><td></td><td></td></tr><tr><td>Sum</td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td><a href="https://leetcode.com/problems/two-sum/description/">Two Sum</a></td><td></td><td></td><td></td></tr><tr><td>167</td><td><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/">Two Sum II - Input array is sorted</a></td><td></td><td></td><td></td></tr><tr><td>15</td><td><a href="https://leetcode.com/problems/3sum/description/">3Sum</a></td><td></td><td></td><td></td></tr><tr><td>16</td><td><a href="https://leetcode.com/problems/3sum-closest/description/">3Sum Closest</a></td><td>很少考</td><td></td><td></td></tr><tr><td>259</td><td><a href="https://leetcode.com/problems/3sum-smaller/description/">3Sum Smaller</a></td><td>很少考</td><td></td><td></td></tr><tr><td>18</td><td><a href="https://leetcode.com/problems/4sum/description/">4Sum</a></td><td></td><td></td><td></td></tr><tr><td>很少考</td><td></td><td></td><td></td><td></td></tr><tr><td>231</td><td><a href="https://leetcode.com/problems/power-of-two/description/">Power of Two</a></td><td></td><td></td><td></td></tr><tr><td>326</td><td><a href="https://leetcode.com/problems/power-of-three/description/">Power of Three</a></td><td></td><td></td><td></td></tr><tr><td>342</td><td><a href="https://leetcode.com/problems/power-of-four/description/">Power of Four</a></td><td></td><td></td><td></td></tr><tr><td>372</td><td><a href="https://leetcode.com/problems/super-pow/description/">Super Pow</a></td><td></td><td></td><td></td></tr><tr><td>233</td><td><a href="https://leetcode.com/problems/number-of-digit-one/description/">Number of Digit One</a></td><td></td><td></td><td></td></tr><tr><td>319</td><td><a href="https://leetcode.com/problems/bulb-switcher/description/">Bulb Switcher</a></td><td></td><td></td><td></td></tr><tr><td>292</td><td><a href="https://leetcode.com/problems/nim-game/description/">Nim Game</a></td><td></td><td></td><td></td></tr><tr><td>202</td><td><a href="https://leetcode.com/problems/happy-number/description/">Happy Number</a></td><td></td><td></td><td></td></tr><tr><td>400</td><td><a href="https://leetcode.com/problems/nth-digit/description/">Nth Digit</a></td><td></td><td></td><td></td></tr><tr><td>263</td><td><a href="https://leetcode.com/problems/ugly-number/description/">Ugly Number</a></td><td></td><td></td><td></td></tr><tr><td>264</td><td><a href="https://leetcode.com/problems/ugly-number-ii/description/">Ugly Number II</a></td><td></td><td></td><td></td></tr><tr><td>306</td><td><a href="https://leetcode.com/problems/additive-number/description/">Additive Number</a></td><td></td><td></td><td></td></tr><tr><td>172</td><td><a href="https://leetcode.com/problems/factorial-trailing-zeroes/description/">Factorial Trailing Zeroes</a></td><td></td><td></td><td></td></tr><tr><td>343</td><td><a href="https://leetcode.com/problems/integer-break/description/">Integer Break</a></td><td></td><td></td><td></td></tr><tr><td>396</td><td><a href="https://leetcode.com/problems/rotate-function/description/">Rotate Function</a></td><td></td><td></td><td></td></tr><tr><td>390</td><td><a href="https://leetcode.com/problems/elimination-game/description/">Elimination Game</a></td><td></td><td></td><td></td></tr><tr><td>386</td><td><a href="https://leetcode.com/problems/lexicographical-numbers/description/">Lexicographical Numbers</a></td><td></td><td></td><td></td></tr><tr><td>357</td><td><a href="https://leetcode.com/problems/count-numbers-with-unique-digits/description/">Count Numbers with Unique Digits</a></td><td></td><td></td><td></td></tr><tr><td>360</td><td><a href="https://leetcode.com/problems/sort-transformed-array/description/">Sort Transformed Array</a></td><td></td><td></td><td></td></tr><tr><td>397</td><td><a href="https://leetcode.com/problems/integer-replacement/description/">Integer Replacement</a></td><td></td><td></td><td></td></tr><tr><td>368</td><td><a href="https://leetcode.com/problems/largest-divisible-subset/description/">Largest Divisible Subset</a></td><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>说明</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>基础</td><td></td><td></td><td></td><td></td></tr><tr><td>144</td><td><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/description/">Binary Tree Preorder Traversal</a></td><td></td><td></td><td></td></tr><tr><td>94</td><td><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/description/">Binary Tree Inorder Traversal</a></td><td></td><td></td><td></td></tr><tr><td>145</td><td><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/description/">Binary Tree Postorder Traversal</a></td><td></td><td></td><td></td></tr><tr><td>102</td><td><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/">Binary Tree Level Order Traversal</a></td><td></td><td></td><td></td></tr><tr><td>Preorder</td><td></td><td></td><td></td><td></td></tr><tr><td>100</td><td><a href="https://leetcode.com/problems/same-tree/description/">Same Tree</a></td><td></td><td></td><td></td></tr><tr><td>101</td><td><a href="https://leetcode.com/problems/symmetric-tree/description/">Symmetric Tree</a></td><td></td><td></td><td></td></tr><tr><td>226</td><td><a href="https://leetcode.com/problems/invert-binary-tree/description/">Invert Binary Tree</a></td><td>preorder + BFS</td><td></td><td></td></tr><tr><td>257</td><td><a href="https://leetcode.com/problems/binary-tree-paths/description/">Binary Tree Paths</a></td><td></td><td></td><td></td></tr><tr><td>112</td><td><a href="https://leetcode.com/problems/path-sum/description/">Path Sum</a></td><td></td><td></td><td></td></tr><tr><td>113</td><td><a href="https://leetcode.com/problems/path-sum-ii/description/">Path Sum II</a></td><td></td><td></td><td></td></tr><tr><td>129</td><td><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/description/">Sum Root to Leaf Numbers</a></td><td></td><td></td><td></td></tr><tr><td>298</td><td><a href="https://leetcode.com/problems/binary-tree-longest-consecutive-sequence/description/">Binary Tree Longest Consecutive Sequence</a></td><td></td><td></td><td></td></tr><tr><td>111</td><td><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/description/">Minimum Depth of Binary Tree</a></td><td></td><td></td><td></td></tr><tr><td>Preorder</td><td></td><td></td><td></td><td></td></tr><tr><td>104</td><td><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/">Maximum Depth of Binary Tree</a></td><td></td><td></td><td></td></tr><tr><td>110</td><td><a href="https://leetcode.com/problems/balanced-binary-tree/description/">Balanced Binary Tree</a></td><td></td><td></td><td></td></tr><tr><td>124</td><td><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/description/">Binary Tree Maximum Path Sum</a></td><td></td><td></td><td></td></tr><tr><td>250</td><td><a href="https://leetcode.com/problems/count-univalue-subtrees/description/">Count Univalue Subtrees</a></td><td></td><td></td><td></td></tr><tr><td>366</td><td><a href="https://leetcode.com/problems/find-leaves-of-binary-tree/description/">Find Leaves of Binary Tree</a></td><td></td><td></td><td></td></tr><tr><td>337</td><td><a href="https://leetcode.com/problems/house-robber-iii/description/">House Robber III</a></td><td>postorder + preorder</td><td></td><td></td></tr><tr><td>BFS</td><td></td><td></td><td></td><td></td></tr><tr><td>107</td><td><a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/description/">Binary Tree Level Order Traversal II</a></td><td></td><td></td><td></td></tr><tr><td>103</td><td><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/">Binary Tree Zigzag Level Order Traversal</a></td><td></td><td></td><td></td></tr><tr><td>199</td><td><a href="https://leetcode.com/problems/binary-tree-right-side-view/description/">Binary Tree Right Side View</a></td><td>BFS + preorder</td><td></td><td></td></tr><tr><td>BST</td><td></td><td></td><td></td><td></td></tr><tr><td>98</td><td><a href="https://leetcode.com/problems/validate-binary-search-tree/description/">Validate Binary Search Tree</a></td><td>preorder</td><td></td><td></td></tr><tr><td>235</td><td><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/">Lowest Common Ancestor of a Binary Search Tree</a></td><td>preorder</td><td></td><td></td></tr><tr><td>236</td><td><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/">Lowest Common Ancestor of a Binary Tree</a></td><td>postorder</td><td></td><td></td></tr><tr><td>108</td><td><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/">Convert Sorted Array to Binary Search Tree</a></td><td>binary search</td><td></td><td></td></tr><tr><td>109</td><td><a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/">Convert Sorted List to Binary Search Tree</a></td><td>binary search</td><td></td><td></td></tr><tr><td>173</td><td><a href="https://leetcode.com/problems/binary-search-tree-iterator/description/">Binary Search Tree Iterator</a></td><td>inorder</td><td></td><td></td></tr><tr><td>230</td><td><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/">Kth Smallest Element in a BST</a></td><td>inorder</td><td></td><td></td></tr><tr><td>297</td><td><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/">Serialize and Deserialize Binary Tree</a></td><td>BFS</td><td></td><td></td></tr><tr><td>285</td><td><a href="https://leetcode.com/problems/inorder-successor-in-bst/description/">Inorder Successor in BST</a></td><td>inorder</td><td></td><td></td></tr><tr><td>270</td><td><a href="https://leetcode.com/problems/closest-binary-search-tree-value/description/">Closest Binary Search Tree Value</a></td><td>preorder</td><td></td><td></td></tr><tr><td>272</td><td><a href="https://leetcode.com/problems/closest-binary-search-tree-value-ii/description/">Closest Binary Search Tree Value II</a></td><td>inorder</td><td></td><td></td></tr><tr><td>99</td><td><a href="https://leetcode.com/problems/recover-binary-search-tree/">Recover Binary Search Tree</a></td><td>inorder</td><td></td><td></td></tr><tr><td>重要程度</td><td></td><td></td><td></td><td></td></tr><tr><td>156</td><td><a href="https://leetcode.com/problems/binary-tree-upside-down/description/">Binary Tree Upside Down</a></td><td>很少考</td><td></td><td></td></tr><tr><td>114</td><td><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/description/">Flatten Binary Tree to Linked List</a></td><td>很少考</td><td></td><td></td></tr><tr><td>255</td><td><a href="https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/description/">Verify Preorder Sequence in Binary Search Tree</a></td><td>很少考</td><td></td><td></td></tr><tr><td>333</td><td><a href="https://leetcode.com/problems/largest-bst-subtree/description/">Largest BST Subtree</a></td><td>很少考</td><td></td><td></td></tr><tr><td>222</td><td><a href="https://leetcode.com/problems/count-complete-tree-nodes/description/">Count Complete Tree Nodes</a></td><td>很少考</td><td></td><td></td></tr><tr><td>105</td><td><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/">Construct Binary Tree from Preorder and Inorder Traversal</a></td><td>很少考</td><td></td><td></td></tr><tr><td>106</td><td><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/">Construct Binary Tree from Inorder and Postorder Traversal</a></td><td>很少考</td><td></td><td></td></tr><tr><td>116</td><td><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/">Populating Next Right Pointers in Each Node</a></td><td>重要</td><td></td><td></td></tr><tr><td>117</td><td><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/">Populating Next Right Pointers in Each Node II</a></td><td>重要</td><td></td><td></td></tr><tr><td>314</td><td><a href="https://leetcode.com/problems/binary-tree-vertical-order-traversal/description/">Binary Tree Vertical Order Traversal</a></td><td>重要</td><td></td><td></td></tr><tr><td>96</td><td><a href="https://leetcode.com/problems/unique-binary-search-trees/description/">Unique Binary Search Trees</a></td><td>重要</td><td></td><td></td></tr><tr><td>95</td><td><a href="https://leetcode.com/problems/unique-binary-search-trees-ii/description/">Unique Binary Search Trees II</a></td><td>很少考</td><td></td><td></td></tr><tr><td>331</td><td><a href="https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/description/">Verify Preorder Serialization of a Binary Tree</a></td><td>很少考</td><td></td><td></td></tr></tbody></table><hr><h2 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>说明</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>78</td><td><a href="https://leetcode.com/problems/subsets/description/">Subsets</a></td><td></td><td></td><td></td></tr><tr><td>90</td><td><a href="https://leetcode.com/problems/subsets-ii/description/">Subsets II</a></td><td></td><td></td><td></td></tr><tr><td>77</td><td><a href="https://leetcode.com/problems/combinations/description/">Combinations</a></td><td></td><td></td><td></td></tr><tr><td>39</td><td><a href="https://leetcode.com/problems/combination-sum/description/">Combination Sum</a></td><td></td><td></td><td></td></tr><tr><td>40</td><td><a href="https://leetcode.com/problems/combination-sum-ii/description/">Combination Sum II</a></td><td></td><td></td><td></td></tr><tr><td>216</td><td><a href="https://leetcode.com/problems/combination-sum-iii/description/">Combination Sum III</a></td><td></td><td></td><td></td></tr><tr><td>377</td><td><a href="https://leetcode.com/problems/combination-sum-iv/description/">Combination Sum IV</a></td><td>Dynamic Programming</td><td></td><td></td></tr><tr><td>254</td><td><a href="https://leetcode.com/problems/factor-combinations/description/">Factor Combinations</a></td><td></td><td></td><td></td></tr><tr><td>46</td><td><a href="https://leetcode.com/problems/permutations/description/">Permutations</a></td><td></td><td></td><td></td></tr><tr><td>47</td><td><a href="https://leetcode.com/problems/permutations-ii/description/">Permutations II</a></td><td></td><td></td><td></td></tr><tr><td>31</td><td><a href="https://leetcode.com/problems/next-permutation/description/">Next Permutation</a></td><td>String</td><td></td><td></td></tr><tr><td>60</td><td><a href="https://leetcode.com/problems/permutation-sequence/description/">Permutation Sequence</a></td><td>String</td><td></td><td></td></tr><tr><td>291</td><td><a href="https://leetcode.com/problems/word-pattern-ii/description/">Word Pattern II</a></td><td></td><td></td><td></td></tr><tr><td>17</td><td><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/">Letter Combinations of a Phone Number</a></td><td></td><td></td><td></td></tr><tr><td>320</td><td><a href="https://leetcode.com/problems/generalized-abbreviation/description/">Generalized Abbreviation</a></td><td></td><td></td><td></td></tr><tr><td>93</td><td><a href="https://leetcode.com/problems/restore-ip-addresses/description/">Restore IP Addresses</a></td><td>很少考</td><td></td><td></td></tr><tr><td>282</td><td><a href="https://leetcode.com/problems/expression-add-operators/description/">Expression Add Operators</a></td><td></td><td></td><td></td></tr><tr><td>140</td><td><a href="https://leetcode.com/problems/word-break-ii/description/">Word Break II</a></td><td></td><td></td><td></td></tr><tr><td>351</td><td><a href="https://leetcode.com/problems/android-unlock-patterns/description/">Android Unlock Patterns</a></td><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>说明</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>一维</td><td></td><td></td><td></td><td></td></tr><tr><td>70</td><td><a href="https://leetcode.com/problems/climbing-stairs/description/">Climbing Stairs</a></td><td></td><td></td><td></td></tr><tr><td>62</td><td><a href="https://leetcode.com/problems/unique-paths/description/">Unique Paths</a></td><td></td><td></td><td></td></tr><tr><td>63</td><td><a href="https://leetcode.com/problems/unique-paths-ii/description/">Unique Paths II</a></td><td></td><td></td><td></td></tr><tr><td>120</td><td><a href="https://leetcode.com/problems/triangle/description/">Triangle</a></td><td>很少考</td><td></td><td></td></tr><tr><td>279</td><td><a href="https://leetcode.com/problems/perfect-squares/description/">Perfect Squares</a></td><td></td><td></td><td></td></tr><tr><td>139</td><td><a href="https://leetcode.com/problems/word-break/">Word Break</a></td><td></td><td></td><td></td></tr><tr><td>375</td><td><a href="https://leetcode.com/problems/guess-number-higher-or-lower-ii/description/">Guess Number Higher or Lower II</a></td><td></td><td></td><td></td></tr><tr><td>312</td><td><a href="https://leetcode.com/problems/burst-balloons/description/">Burst Balloons</a></td><td></td><td></td><td></td></tr><tr><td>322</td><td><a href="https://leetcode.com/problems/coin-change/description/">Coin Change</a></td><td></td><td></td><td></td></tr><tr><td>二维</td><td></td><td></td><td></td><td></td></tr><tr><td>256</td><td><a href="https://leetcode.com/problems/paint-house/description/">Paint House</a></td><td></td><td></td><td></td></tr><tr><td>265</td><td><a href="https://leetcode.com/problems/paint-house-ii/description/">Paint House II</a></td><td></td><td></td><td></td></tr><tr><td>64</td><td><a href="https://leetcode.com/problems/minimum-path-sum/description/">Minimum Path Sum</a></td><td></td><td></td><td></td></tr><tr><td>72</td><td><a href="https://leetcode.com/problems/edit-distance/description/">Edit Distance</a></td><td></td><td></td><td></td></tr><tr><td>97</td><td><a href="https://leetcode.com/problems/interleaving-string/description/">Interleaving String</a></td><td></td><td></td><td></td></tr><tr><td>174</td><td><a href="https://leetcode.com/problems/dungeon-game/description/">Dungeon Game</a></td><td></td><td></td><td></td></tr><tr><td>221</td><td><a href="https://leetcode.com/problems/maximal-square/description/">Maximal Square</a></td><td></td><td></td><td></td></tr><tr><td>85</td><td><a href="https://leetcode.com/problems/maximal-rectangle/description/">Maximal Rectangle</a></td><td></td><td></td><td></td></tr><tr><td>363</td><td><a href="https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/description/">Max Sum of Rectangle No Larger Than K</a></td><td>TreeSet</td><td></td><td></td></tr><tr><td>化简</td><td></td><td></td><td></td><td></td></tr><tr><td>198</td><td><a href="https://leetcode.com/problems/house-robber/">House Robber</a></td><td></td><td></td><td></td></tr><tr><td>213</td><td><a href="https://cspiration.com/leetcodeClassification">House Robber II</a></td><td></td><td></td><td></td></tr><tr><td>276</td><td><a href="https://leetcode.com/problems/paint-fence/description/">Paint Fence</a></td><td></td><td></td><td></td></tr><tr><td>91</td><td><a href="https://leetcode.com/problems/decode-ways/description/">Decode Ways</a></td><td></td><td></td><td></td></tr><tr><td>10</td><td><a href="https://leetcode.com/problems/regular-expression-matching/description/">Regular Expression Matching</a></td><td></td><td></td><td></td></tr><tr><td>44</td><td><a href="https://leetcode.com/problems/wildcard-matching/description/">Wildcard Matching</a></td><td></td><td></td><td></td></tr></tbody></table><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>基础</td><td></td><td></td><td></td></tr><tr><td>206</td><td><a href="https://leetcode.com/problems/reverse-linked-list/description/">Reverse Linked List</a></td><td></td><td></td></tr><tr><td>141</td><td><a href="https://leetcode.com/problems/linked-list-cycle/description/">Linked List Cycle</a></td><td></td><td></td></tr><tr><td>24</td><td><a href="https://leetcode.com/problems/swap-nodes-in-pairs/description/">Swap Nodes in Pairs</a></td><td></td><td></td></tr><tr><td>328</td><td><a href="https://leetcode.com/problems/odd-even-linked-list/description/">Odd Even Linked List</a></td><td></td><td></td></tr><tr><td>92</td><td><a href="https://leetcode.com/problems/reverse-linked-list-ii/description/">Reverse Linked List II</a></td><td></td><td></td></tr><tr><td>237</td><td><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/description/">Delete Node in a Linked List</a></td><td></td><td></td></tr><tr><td>19</td><td><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/">Remove Nth Node From End of List</a></td><td></td><td></td></tr><tr><td>83</td><td><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/">Remove Duplicates from Sorted List</a></td><td></td><td></td></tr><tr><td>203</td><td><a href="https://leetcode.com/problems/remove-linked-list-elements/description/">Remove Linked List Elements</a></td><td></td><td></td></tr><tr><td>82</td><td><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/description/">Remove Duplicates from Sorted List II</a></td><td></td><td></td></tr><tr><td>369</td><td><a href="https://leetcode.com/problems/plus-one-linked-list/description/">Plus One Linked List</a></td><td></td><td></td></tr><tr><td>2</td><td><a href="https://leetcode.com/problems/add-two-numbers/description/">Add Two Numbers</a></td><td></td><td></td></tr><tr><td>160</td><td><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/description/">Intersection of Two Linked Lists</a></td><td></td><td></td></tr><tr><td>21</td><td><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/">Merge Two Sorted Lists</a></td><td></td><td></td></tr><tr><td>提高</td><td></td><td></td><td></td></tr><tr><td>234</td><td><a href="https://leetcode.com/problems/palindrome-linked-list/description/">Palindrome Linked List</a></td><td></td><td></td></tr><tr><td>143</td><td><a href="https://leetcode.com/problems/reorder-list/description/">Reorder List</a></td><td></td><td></td></tr><tr><td>142</td><td><a href="https://leetcode.com/problems/linked-list-cycle-ii/description/">Linked List Cycle II</a></td><td></td><td></td></tr><tr><td>148</td><td><a href="https://leetcode.com/problems/sort-list/description/">Sort List</a></td><td></td><td></td></tr><tr><td>25</td><td><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/description/">Reverse Nodes in k-Group</a></td><td></td><td></td></tr><tr><td>61</td><td><a href="https://leetcode.com/problems/rotate-list/description/">Rotate List</a></td><td></td><td></td></tr><tr><td>86</td><td><a href="https://leetcode.com/problems/partition-list/description/">Partition List</a></td><td></td><td></td></tr><tr><td>23</td><td><a href="https://leetcode.com/problems/merge-k-sorted-lists/description/">Merge k Sorted Lists</a></td><td></td><td></td></tr><tr><td>147</td><td><a href="https://leetcode.com/problems/insertion-sort-list/description/">Insertion Sort List</a></td><td></td><td></td></tr></tbody></table><hr><h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>278</td><td><a href="https://leetcode.com/problems/first-bad-version/description/">First Bad Version</a></td><td></td><td></td></tr><tr><td>35</td><td><a href="https://leetcode.com/problems/search-insert-position/description/">Search Insert Position</a></td><td></td><td></td></tr><tr><td>33</td><td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/">Search in Rotated Sorted Array</a></td><td></td><td></td></tr><tr><td>81</td><td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/">Search in Rotated Sorted Array II</a></td><td></td><td></td></tr><tr><td>153</td><td><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/">Find Minimum in Rotated Sorted Array</a></td><td></td><td></td></tr><tr><td>154</td><td><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/description/">Find Minimum in Rotated Sorted Array II</a></td><td></td><td></td></tr><tr><td>162</td><td><a href="https://leetcode.com/problems/find-peak-element/description/">Find Peak Element</a></td><td></td><td></td></tr><tr><td>374</td><td><a href="https://leetcode.com/problems/guess-number-higher-or-lower/">Guess Number Higher or Lower</a></td><td></td><td></td></tr><tr><td>34</td><td><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/">Find First and Last Position of Element in Sorted Array</a></td><td></td><td></td></tr><tr><td>349</td><td><a href="https://leetcode.com/problems/intersection-of-two-arrays/description/">Intersection of Two Arrays</a></td><td></td><td></td></tr><tr><td>350</td><td><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/description/">Intersection of Two Arrays II</a></td><td></td><td></td></tr><tr><td>315</td><td><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/description/">Count of Smaller Numbers After Self</a></td><td></td><td></td></tr><tr><td>300</td><td><a href="https://leetcode.com/problems/longest-increasing-subsequence/description/">Longest Increasing Subsequence</a></td><td></td><td></td></tr><tr><td>354</td><td><a href="https://leetcode.com/problems/russian-doll-envelopes/description/">Russian Doll Envelopes</a></td><td></td><td></td></tr></tbody></table><hr><h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>48</td><td><a href="https://leetcode.com/problems/rotate-image/description/">Rotate Image</a></td><td></td><td></td></tr><tr><td>54</td><td><a href="https://leetcode.com/problems/spiral-matrix/description/">Spiral Matrix</a></td><td></td><td></td></tr><tr><td>59</td><td><a href="https://leetcode.com/problems/spiral-matrix-ii/description/">Spiral Matrix II</a></td><td></td><td></td></tr><tr><td>73</td><td><a href="https://leetcode.com/problems/set-matrix-zeroes/description/">Set Matrix Zeroes</a></td><td></td><td></td></tr><tr><td>311</td><td><a href="https://leetcode.com/problems/sparse-matrix-multiplication/description/">Sparse Matrix Multiplication</a></td><td></td><td></td></tr><tr><td>329</td><td><a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/description/">Longest Increasing Path in a Matrix</a></td><td></td><td></td></tr><tr><td>378</td><td><a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/">Kth Smallest Element in a Sorted Matrix</a></td><td></td><td></td></tr><tr><td>74</td><td><a href="https://leetcode.com/problems/search-a-2d-matrix/description/">Search a 2D Matrix</a></td><td></td><td></td></tr><tr><td>240</td><td><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/description/">Search a 2D Matrix II</a></td><td></td><td></td></tr><tr><td>370</td><td><a href="https://leetcode.com/problems/range-addition/description/">Range Addition</a></td><td></td><td></td></tr><tr><td>79</td><td><a href="https://leetcode.com/problems/word-search/description/">Word Search</a></td><td></td><td></td></tr><tr><td>296</td><td><a href="https://leetcode.com/problems/best-meeting-point/description/">Best Meeting Point</a></td><td></td><td></td></tr><tr><td>361</td><td><a href="https://leetcode.com/problems/bomb-enemy/description/">Bomb Enemy</a></td><td></td><td></td></tr><tr><td>317</td><td><a href="https://leetcode.com/problems/shortest-distance-from-all-buildings/description/">Shortest Distance from All Buildings</a></td><td></td><td></td></tr><tr><td>302</td><td><a href="https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels/description/">Smallest Rectangle Enclosing Black Pixels</a></td><td></td><td></td></tr><tr><td>36</td><td><a href="https://leetcode.com/problems/valid-sudoku/description/">Valid Sudoku</a></td><td></td><td></td></tr><tr><td>37</td><td><a href="https://leetcode.com/problems/sudoku-solver/description/">Sudoku Solver</a></td><td></td><td></td></tr></tbody></table><hr><h2 id="DFS-amp-BFS"><a href="#DFS-amp-BFS" class="headerlink" title="DFS &amp; BFS"></a>DFS &amp; BFS</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>200</td><td><a href="https://leetcode.com/problems/number-of-islands/">Number of Islands</a></td><td></td><td></td></tr><tr><td>286</td><td><a href="https://leetcode.com/problems/walls-and-gates/description/">Walls and Gates</a></td><td></td><td></td></tr><tr><td>130</td><td><a href="https://leetcode.com/problems/surrounded-regions/description/">Surrounded Regions</a></td><td></td><td></td></tr><tr><td>339</td><td><a href="https://leetcode.com/problems/nested-list-weight-sum/description/">Nested List Weight Sum</a></td><td></td><td></td></tr><tr><td>364</td><td><a href="https://leetcode.com/problems/nested-list-weight-sum-ii/description/">Nested List Weight Sum II</a></td><td></td><td></td></tr><tr><td>127</td><td><a href="https://leetcode.com/problems/word-ladder/description/">Word Ladder</a></td><td></td><td></td></tr><tr><td>51</td><td><a href="https://leetcode.com/problems/n-queens/">N-Queens</a></td><td></td><td></td></tr><tr><td>52</td><td><a href="https://leetcode.com/problems/n-queens-ii/description/">N-Queens II</a></td><td></td><td></td></tr><tr><td>126</td><td><a href="https://leetcode.com/problems/word-ladder-ii/description/">Word Ladder II</a></td><td></td><td></td></tr></tbody></table><hr><h2 id="Stack-amp-PriorityQueue"><a href="#Stack-amp-PriorityQueue" class="headerlink" title="Stack &amp; PriorityQueue"></a>Stack &amp; PriorityQueue</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>说明</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>Stack</td><td></td><td></td><td></td><td></td></tr><tr><td>155</td><td><a href="https://leetcode.com/problems/min-stack/description/">Min Stack</a></td><td></td><td></td><td></td></tr><tr><td>232</td><td><a href="https://leetcode.com/problems/implement-queue-using-stacks/description/">Implement Queue using Stacks</a></td><td></td><td></td><td></td></tr><tr><td>225</td><td><a href="https://leetcode.com/problems/implement-stack-using-queues/description/">Implement Stack using Queues</a></td><td></td><td></td><td></td></tr><tr><td>150</td><td><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/description/">Evaluate Reverse Polish Notation</a></td><td></td><td></td><td></td></tr><tr><td>71</td><td><a href="https://leetcode.com/problems/simplify-path/description/">Simplify Path</a></td><td></td><td></td><td></td></tr><tr><td>388</td><td><a href="https://leetcode.com/problems/longest-absolute-file-path/description/">Longest Absolute File Path</a></td><td></td><td></td><td></td></tr><tr><td>394</td><td><a href="https://leetcode.com/problems/decode-string/">Decode String</a></td><td></td><td></td><td></td></tr><tr><td>224</td><td><a href="https://leetcode.com/problems/basic-calculator/description/">Basic Calculator</a></td><td></td><td></td><td></td></tr><tr><td>227</td><td><a href="https://leetcode.com/problems/basic-calculator-ii/description/">Basic Calculator II</a></td><td></td><td></td><td></td></tr><tr><td>385</td><td><a href="https://leetcode.com/problems/mini-parser/description/">Mini Parser</a></td><td></td><td></td><td></td></tr><tr><td>84</td><td><a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/">Largest Rectangle in Histogram</a></td><td></td><td></td><td></td></tr><tr><td>PriorityQueue</td><td></td><td></td><td></td><td></td></tr><tr><td>215</td><td><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/description/">Kth Largest Element in an Array</a></td><td></td><td></td><td></td></tr><tr><td>347</td><td><a href="https://leetcode.com/problems/top-k-frequent-elements/description/">Top K Frequent Elements</a></td><td></td><td></td><td></td></tr><tr><td>313</td><td><a href="https://leetcode.com/problems/super-ugly-number/description/">Super Ugly Number</a></td><td>很少考</td><td></td><td></td></tr><tr><td>373</td><td><a href="https://leetcode.com/problems/find-k-pairs-with-smallest-sums/description/">Find K Pairs with Smallest Sums</a></td><td>很少考</td><td></td><td></td></tr><tr><td>218</td><td><a href="https://leetcode.com/problems/the-skyline-problem/description/">The Skyline Problem</a></td><td></td><td></td><td></td></tr><tr><td>332</td><td><a href="https://leetcode.com/problems/reconstruct-itinerary/description/">Reconstruct Itinerary</a></td><td></td><td></td><td></td></tr><tr><td>341</td><td><a href="https://leetcode.com/problems/flatten-nested-list-iterator/">Flatten Nested List Iterator</a></td><td></td><td></td><td></td></tr></tbody></table><hr><h2 id="Bit-Manipulation"><a href="#Bit-Manipulation" class="headerlink" title="Bit Manipulation"></a>Bit Manipulation</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>389</td><td><a href="https://leetcode.com/problems/find-the-difference/description/">Find the Difference</a></td><td></td><td></td></tr><tr><td>136</td><td><a href="https://leetcode.com/problems/single-number/description/">Single Number</a></td><td></td><td></td></tr><tr><td>318</td><td><a href="https://leetcode.com/problems/maximum-product-of-word-lengths/description/">Maximum Product of Word Lengths</a></td><td></td><td></td></tr><tr><td>很少考</td><td></td><td></td><td></td></tr><tr><td>393</td><td><a href="https://leetcode.com/problems/utf-8-validation/description/">UTF-8 Validation</a></td><td></td><td></td></tr><tr><td>201</td><td><a href="https://leetcode.com/problems/bitwise-and-of-numbers-range/description/">Bitwise AND of Numbers Range</a></td><td></td><td></td></tr><tr><td>371</td><td><a href="https://leetcode.com/problems/sum-of-two-integers/description/">Sum of Two Integers emove Element</a></td><td></td><td></td></tr><tr><td>338</td><td><a href="https://leetcode.com/problems/counting-bits/description/">Counting Bits</a></td><td></td><td></td></tr><tr><td>89</td><td><a href="https://leetcode.com/problems/gray-code/description/">Gray Code</a></td><td></td><td></td></tr><tr><td>268</td><td><a href="https://leetcode.com/problems/missing-number/description/">Missing Number</a></td><td></td><td></td></tr><tr><td>191</td><td><a href="https://leetcode.com/problems/number-of-1-bits/description/">Number of 1 Bits</a></td><td></td><td></td></tr><tr><td>190</td><td><a href="https://leetcode.com/problems/reverse-bits/description/">Reverse Bits</a></td><td></td><td></td></tr><tr><td>137</td><td><a href="https://leetcode.com/problems/single-number-ii/description/">Single Number II</a></td><td></td><td></td></tr><tr><td>260</td><td><a href="https://leetcode.com/problems/single-number-iii/description/">Single Number III</a></td><td></td><td></td></tr></tbody></table><hr><h2 id="Topological-Sort"><a href="#Topological-Sort" class="headerlink" title="Topological Sort"></a>Topological Sort</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>207</td><td><a href="https://leetcode.com/problems/course-schedule/description/">Course Schedule</a></td><td></td><td></td></tr><tr><td>210</td><td><a href="https://leetcode.com/problems/course-schedule-ii/description/">Course Schedule II</a></td><td></td><td></td></tr><tr><td>269</td><td><a href="https://leetcode.com/problems/alien-dictionary/description/">Alien Dictionary</a></td><td></td><td></td></tr></tbody></table><hr><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>384</td><td><a href="https://leetcode.com/problems/shuffle-an-array/">Shuffle an Array</a></td><td></td><td></td></tr><tr><td>398</td><td><a href="https://leetcode.com/problems/random-pick-index/">Random Pick Index</a></td><td></td><td></td></tr><tr><td>382</td><td><a href="https://leetcode.com/problems/linked-list-random-node/">Linked List Random Node</a></td><td></td><td></td></tr><tr><td>380</td><td><a href="https://leetcode.com/problems/insert-delete-getrandom-o1/">Insert Delete GetRandom O(1)</a></td><td></td><td></td></tr><tr><td>381</td><td><a href="https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/">Insert Delete GetRandom O(1) - Duplicates allowed</a></td><td></td><td></td></tr><tr><td>138</td><td><a href="https://leetcode.com/problems/copy-list-with-random-pointer/">Copy List with Random Pointer</a></td><td></td><td></td></tr></tbody></table><hr><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>说明</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>基础</td><td></td><td></td><td></td><td></td></tr><tr><td>133</td><td><a href="https://leetcode.com/problems/clone-graph/description/">Clone Graph</a></td><td></td><td></td><td></td></tr><tr><td>399</td><td><a href="https://leetcode.com/problems/evaluate-division/description/">Evaluate Division</a></td><td></td><td></td><td></td></tr><tr><td>310</td><td><a href="https://leetcode.com/problems/minimum-height-trees/description/">Minimum Height Trees</a></td><td></td><td></td><td></td></tr><tr><td>图形学</td><td></td><td></td><td></td><td></td></tr><tr><td>149</td><td><a href="https://leetcode.com/problems/max-points-on-a-line/description/">Max Points on a Line</a></td><td></td><td></td><td></td></tr><tr><td>335</td><td><a href="https://leetcode.com/problems/self-crossing/description/">Self Crossing</a></td><td>很少考</td><td></td><td></td></tr><tr><td>356</td><td><a href="https://leetcode.com/problems/line-reflection/description/">Line Reflection</a></td><td>很少考</td><td></td><td></td></tr><tr><td>391</td><td><a href="https://leetcode.com/problems/perfect-rectangle/description/">Perfect Rectangle</a></td><td>很少考</td><td></td><td></td></tr><tr><td>223</td><td><a href="https://leetcode.com/problems/rectangle-area/description/">Rectangle Area</a></td><td>很少考</td><td></td><td></td></tr></tbody></table><hr><h2 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union Find"></a>Union Find</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>261</td><td><a href="https://leetcode.com/problems/graph-valid-tree/description/">Graph Valid Tree</a></td><td></td><td></td></tr><tr><td>323</td><td><a href="https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/description/">Number of Connected Components in an Undirected Graph</a></td><td></td><td></td></tr><tr><td>305</td><td><a href="https://leetcode.com/problems/number-of-islands-ii/description/">Number of Islands II</a></td><td></td><td></td></tr></tbody></table><hr><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>211</td><td><a href="https://leetcode.com/problems/add-and-search-word-data-structure-design/description/">Add and Search Word - Data structure design</a></td><td></td><td></td></tr><tr><td>208</td><td><a href="https://leetcode.com/problems/implement-trie-prefix-tree/description/">Implement Trie (Prefix Tree)</a></td><td></td><td></td></tr><tr><td>212</td><td><a href="https://leetcode.com/problems/word-search-ii/description/">Word Search II</a></td><td></td><td></td></tr></tbody></table><hr><h2 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h2><table><thead><tr><th>题号</th><th>题目链接</th><th>说明</th><th>完成时间</th><th>备注</th></tr></thead><tbody><tr><td>359</td><td><a href="https://leetcode.com/problems/logger-rate-limiter/description/">Logger Rate Limiter</a></td><td></td><td></td><td></td></tr><tr><td>346</td><td><a href="https://leetcode.com/problems/moving-average-from-data-stream/description/">Moving Average from Data Stream</a></td><td>Sliding Window</td><td></td><td></td></tr><tr><td>362</td><td><a href="https://leetcode.com/problems/design-hit-counter/description/">Design Hit Counter</a></td><td></td><td></td><td></td></tr><tr><td>281</td><td><a href="https://leetcode.com/problems/zigzag-iterator/description/">Zigzag Iterator</a></td><td></td><td></td><td></td></tr><tr><td>284</td><td><a href="https://leetcode.com/problems/peeking-iterator/description/">Peeking Iterator</a></td><td></td><td></td><td></td></tr><tr><td>251</td><td><a href="https://leetcode.com/problems/flatten-2d-vector/description/s">Flatten 2D Vector</a></td><td></td><td></td><td></td></tr><tr><td>288</td><td><a href="https://leetcode.com/problems/unique-word-abbreviation/description/">Unique Word Abbreviation</a></td><td></td><td></td><td></td></tr><tr><td>170</td><td><a href="https://leetcode.com/problems/two-sum-iii-data-structure-design/description/">Two Sum III - Data structure design</a></td><td></td><td></td><td></td></tr><tr><td>348</td><td><a href="https://leetcode.com/problems/design-tic-tac-toe/description/">Design Tic-Tac-Toe</a></td><td></td><td></td><td></td></tr><tr><td>379</td><td><a href="https://leetcode.com/problems/design-phone-directory/description/">Design Phone Directory</a></td><td></td><td></td><td></td></tr><tr><td>353</td><td><a href="https://leetcode.com/problems/design-snake-game/description/">Design Snake Game</a></td><td></td><td></td><td></td></tr><tr><td>146</td><td><a href="https://leetcode.com/problems/lru-cache/description/">LRU Cache</a></td><td></td><td></td><td></td></tr><tr><td>355</td><td><a href="https://leetcode.com/problems/design-twitter/description/s">Design Twitter</a></td><td></td><td></td><td></td></tr><tr><td>303</td><td><a href="https://leetcode.com/problems/range-sum-query-immutable/description/">Range Sum Query - Immutable</a></td><td></td><td></td><td></td></tr><tr><td>304</td><td><a href="https://leetcode.com/problems/range-sum-query-2d-immutable/description/">Range Sum Query 2D - Immutable</a></td><td></td><td></td><td></td></tr><tr><td>307</td><td><a href="https://leetcode.com/problems/range-sum-query-mutable/description/">Range Sum Query - Mutable</a></td><td>BIT &amp; ST</td><td></td><td></td></tr><tr><td>308</td><td><a href="https://leetcode.com/problems/range-sum-query-2d-mutable/description/">Range Sum Query 2D - Mutable</a></td><td>BIT &amp; ST</td><td></td><td></td></tr></tbody></table><hr><hr><h2 id="Leetcode-前-400-重点-250-题"><a href="#Leetcode-前-400-重点-250-题" class="headerlink" title="Leetcode 前 400 重点 250 题"></a>Leetcode 前 400 重点 250 题</h2><table><thead><tr><th>题号</th><th>题目名称</th><th></th></tr></thead><tbody><tr><td>1</td><td><a href="https://leetcode.com/problems/two-sum/description/">Two Sum</a></td><td></td></tr><tr><td>3</td><td><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/">Longest Substring Without Repeating Characters</a></td><td></td></tr><tr><td>4</td><td><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/description/">Median of Two Sorted Arrays</a></td><td></td></tr><tr><td>5</td><td><a href="https://leetcode.com/problems/longest-palindromic-substring/description/">Longest Palindromic Substring</a></td><td></td></tr><tr><td>7</td><td><a href="https://leetcode.com/problems/reverse-integer/description/">Reverse Integer</a></td><td></td></tr><tr><td>8</td><td><a href="https://leetcode.com/problems/string-to-integer-atoi/description/">String to Integer (atoi)</a></td><td></td></tr><tr><td>10</td><td><a href="https://leetcode.com/problems/regular-expression-matching/description/">Regular Expression Matching</a></td><td></td></tr><tr><td>11</td><td><a href="https://leetcode.com/problems/container-with-most-water/description/">Container With Most Water</a></td><td></td></tr><tr><td>12</td><td><a href="https://leetcode.com/problems/integer-to-roman/description/">Integer to Roman</a></td><td></td></tr><tr><td>13</td><td><a href="https://leetcode.com/problems/roman-to-integer/description/">Roman to Integer</a></td><td></td></tr><tr><td>15</td><td><a href="https://leetcode.com/problems/3sum/description/">3Sum</a></td><td></td></tr><tr><td>17</td><td><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/">Letter Combinations of a Phone Number</a></td><td></td></tr><tr><td>18</td><td><a href="https://leetcode.com/problems/4sum/description/">4Sum</a></td><td></td></tr><tr><td>20</td><td><a href="https://leetcode.com/problems/valid-parentheses/description/">Valid Parentheses</a></td><td></td></tr><tr><td>22</td><td><a href="https://leetcode.com/problems/generate-parentheses/description/">Generate Parentheses</a></td><td></td></tr><tr><td>23</td><td><a href="https://leetcode.com/problems/merge-k-sorted-lists/description/">Merge k Sorted Lists</a></td><td></td></tr><tr><td>26</td><td><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/">Remove Duplicates from Sorted Array</a></td><td></td></tr><tr><td>27</td><td><a href="https://leetcode.com/problems/remove-element/">Remove Element</a></td><td></td></tr><tr><td>28</td><td><a href="https://leetcode.com/problems/implement-strstr/description/">Implement strStr()</a></td><td></td></tr><tr><td>29</td><td><a href="https://leetcode.com/problems/divide-two-integers/description/">Divide Two Integers</a></td><td></td></tr><tr><td>31</td><td><a href="https://leetcode.com/problems/next-permutation/description/">Next Permutation</a></td><td></td></tr><tr><td>32</td><td><a href="https://leetcode.com/problems/longest-valid-parentheses/description/">Longest Valid Parentheses</a></td><td></td></tr><tr><td>33</td><td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/description/">Search in Rotated Sorted Array</a></td><td></td></tr><tr><td>34</td><td><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/">Find First and Last Position of Element in Sorted Array</a></td><td></td></tr><tr><td>35</td><td><a href="https://leetcode.com/problems/search-insert-position/description/">Search Insert Position</a></td><td></td></tr><tr><td>36</td><td><a href="https://leetcode.com/problems/valid-sudoku/description/">Valid Sudoku</a></td><td></td></tr><tr><td>37</td><td><a href="https://leetcode.com/problems/sudoku-solver/description/">Sudoku Solver</a></td><td></td></tr><tr><td>38</td><td><a href="https://leetcode.com/problems/count-and-say/description/">Count and Say</a></td><td></td></tr><tr><td>39</td><td><a href="https://leetcode.com/problems/combination-sum/description/">Combination Sum</a></td><td></td></tr><tr><td>40</td><td><a href="https://leetcode.com/problems/combination-sum-ii/description/">Combination Sum II</a></td><td></td></tr><tr><td>41</td><td><a href="https://leetcode.com/problems/first-missing-positive/description/">First Missing Positive</a></td><td></td></tr><tr><td>42</td><td><a href="https://leetcode.com/problems/trapping-rain-water/description/">Trapping Rain Water</a></td><td></td></tr><tr><td>43</td><td><a href="https://leetcode.com/problems/multiply-strings/description/">Multiply Strings</a></td><td></td></tr><tr><td>44</td><td><a href="https://leetcode.com/problems/wildcard-matching/description/">Wildcard Matching</a></td><td></td></tr><tr><td>45</td><td><a href="https://leetcode.com/problems/jump-game-ii/description/">Jump Game II</a></td><td></td></tr><tr><td>46</td><td><a href="https://leetcode.com/problems/permutations/description/">Permutations</a></td><td></td></tr><tr><td>47</td><td><a href="https://leetcode.com/problems/permutations-ii/description/">Permutations II</a></td><td></td></tr><tr><td>48</td><td><a href="https://leetcode.com/problems/rotate-image/description/">Rotate Image</a></td><td></td></tr><tr><td>49</td><td><a href="https://leetcode.com/problems/group-anagrams/description/">Group Anagrams</a></td><td></td></tr><tr><td>50</td><td><a href="https://leetcode.com/problems/powx-n/description/">Pow(x, n)</a></td><td></td></tr><tr><td>51</td><td><a href="https://leetcode.com/problems/n-queens/">N-Queens</a></td><td></td></tr><tr><td>52</td><td><a href="https://leetcode.com/problems/n-queens-ii/description/">N-Queens II</a></td><td></td></tr><tr><td>53</td><td><a href="https://leetcode.com/problems/maximum-subarray/description/">Maximum Subarray</a></td><td></td></tr><tr><td>54</td><td><a href="https://leetcode.com/problems/spiral-matrix/description/">Spiral Matrix</a></td><td></td></tr><tr><td>55</td><td><a href="https://leetcode.com/problems/jump-game/description/">Jump Game</a></td><td></td></tr><tr><td>56</td><td><a href="https://leetcode.com/problems/merge-intervals/description/">Merge Intervals</a></td><td></td></tr><tr><td>57</td><td><a href="https://leetcode.com/problems/insert-interval/description/">Insert Interval</a></td><td></td></tr><tr><td>59</td><td><a href="https://leetcode.com/problems/spiral-matrix-ii/description/">Spiral Matrix II</a></td><td></td></tr><tr><td>60</td><td><a href="https://leetcode.com/problems/permutation-sequence/description/">Permutation Sequence</a></td><td></td></tr><tr><td>62</td><td><a href="https://leetcode.com/problems/unique-paths/description/">Unique Paths</a></td><td></td></tr><tr><td>64</td><td><a href="https://leetcode.com/problems/minimum-path-sum/description/">Minimum Path Sum</a></td><td></td></tr><tr><td>65</td><td><a href="https://leetcode.com/problems/valid-number/description/">Valid Number</a></td><td></td></tr><tr><td>66</td><td><a href="https://leetcode.com/problems/plus-one/description/">Plus One</a></td><td></td></tr><tr><td>67</td><td><a href="https://leetcode.com/problems/add-binary/description/">Add Binary</a></td><td></td></tr><tr><td>68</td><td><a href="https://leetcode.com/problems/text-justification/description/">Text Justification</a></td><td></td></tr><tr><td>69</td><td><a href="https://leetcode.com/problems/sqrtx/description/">Sqrt(x)</a></td><td></td></tr><tr><td>70</td><td><a href="https://leetcode.com/problems/climbing-stairs/description/">Climbing Stairs</a></td><td></td></tr><tr><td>71</td><td><a href="https://leetcode.com/problems/simplify-path/description/">Simplify Path</a></td><td></td></tr><tr><td>72</td><td><a href="https://leetcode.com/problems/edit-distance/description/">Edit Distance</a></td><td></td></tr><tr><td>74</td><td><a href="https://leetcode.com/problems/search-a-2d-matrix/description/">Search a 2D Matrix</a></td><td></td></tr><tr><td>75</td><td><a href="https://leetcode.com/problems/sort-colors/description/">Sort Colors</a></td><td></td></tr><tr><td>76</td><td><a href="https://leetcode.com/problems/minimum-window-substring/description/">Minimum Window Substring</a></td><td></td></tr><tr><td>77</td><td><a href="https://leetcode.com/problems/combinations/description/">Combinations</a></td><td></td></tr><tr><td>78</td><td><a href="https://leetcode.com/problems/subsets/description/">Subsets</a></td><td></td></tr><tr><td>79</td><td><a href="https://leetcode.com/problems/word-search/description/">Word Search</a></td><td></td></tr><tr><td>80</td><td><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/description/">Remove Duplicates from Sorted Array II</a></td><td></td></tr><tr><td>81</td><td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/">Search in Rotated Sorted Array II</a></td><td></td></tr><tr><td>82</td><td><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/description/">Remove Duplicates from Sorted List II</a></td><td></td></tr><tr><td>84</td><td><a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/">Largest Rectangle in Histogram</a></td><td></td></tr><tr><td>85</td><td><a href="https://leetcode.com/problems/maximal-rectangle/description/">Maximal Rectangle</a></td><td></td></tr><tr><td>88</td><td><a href="https://leetcode.com/problems/merge-sorted-array/description/">Merge Sorted Array</a></td><td></td></tr><tr><td>90</td><td><a href="https://leetcode.com/problems/subsets-ii/description/">Subsets II</a></td><td></td></tr><tr><td>91</td><td><a href="https://leetcode.com/problems/decode-ways/description/">Decode Ways</a></td><td></td></tr><tr><td>96</td><td><a href="https://leetcode.com/problems/unique-binary-search-trees/description/">Unique Binary Search Trees</a></td><td></td></tr><tr><td>98</td><td><a href="https://leetcode.com/problems/validate-binary-search-tree/description/">Validate Binary Search Tree</a></td><td></td></tr><tr><td>101</td><td><a href="https://leetcode.com/problems/symmetric-tree/description/">Symmetric Tree</a></td><td></td></tr><tr><td>104</td><td><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/">Maximum Depth of Binary Tree</a></td><td></td></tr><tr><td>108</td><td><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/">Convert Sorted Array to Binary Search Tree</a></td><td></td></tr><tr><td>110</td><td><a href="https://leetcode.com/problems/balanced-binary-tree/description/">Balanced Binary Tree</a></td><td></td></tr><tr><td>111</td><td><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/description/">Minimum Depth of Binary Tree</a></td><td></td></tr><tr><td>112</td><td><a href="https://leetcode.com/problems/path-sum/description/">Path Sum</a></td><td></td></tr><tr><td>113</td><td><a href="https://leetcode.com/problems/path-sum-ii/description/">Path Sum II</a></td><td></td></tr><tr><td>115</td><td><a href="https://leetcode.com/problems/distinct-subsequences/description/">Distinct Subsequences</a></td><td></td></tr><tr><td>116</td><td><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/">Populating Next Right Pointers in Each Node</a></td><td></td></tr><tr><td>117</td><td><a href="https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/">Populating Next Right Pointers in Each Node II</a></td><td></td></tr><tr><td>121</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/">Best Time to Buy and Sell Stock</a></td><td></td></tr><tr><td>122</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/">Best Time to Buy and Sell Stock II</a></td><td></td></tr><tr><td>123</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/">Best Time to Buy and Sell Stock III</a></td><td></td></tr><tr><td>124</td><td><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/description/">Binary Tree Maximum Path Sum</a></td><td></td></tr><tr><td>125</td><td><a href="https://leetcode.com/problems/valid-palindrome/description/">Valid Palindrome</a></td><td></td></tr><tr><td>126</td><td><a href="https://leetcode.com/problems/word-ladder-ii/description/">Word Ladder II</a></td><td></td></tr><tr><td>127</td><td><a href="https://leetcode.com/problems/word-ladder/description/">Word Ladder</a></td><td></td></tr><tr><td>128</td><td><a href="https://leetcode.com/problems/longest-consecutive-sequence/description/">Longest Consecutive Sequence</a></td><td></td></tr><tr><td>130</td><td><a href="https://leetcode.com/problems/surrounded-regions/description/">Surrounded Regions</a></td><td></td></tr><tr><td>133</td><td><a href="https://leetcode.com/problems/clone-graph/description/">Clone Graph</a></td><td></td></tr><tr><td>134</td><td><a href="https://leetcode.com/problems/gas-station/description/">Gas Station</a></td><td></td></tr><tr><td>138</td><td><a href="https://leetcode.com/problems/copy-list-with-random-pointer/">Copy List with Random Pointer</a></td><td></td></tr><tr><td>139</td><td><a href="https://leetcode.com/problems/word-break/">Word Break</a></td><td></td></tr><tr><td>140</td><td><a href="https://leetcode.com/problems/word-break-ii/description/">Word Break II</a></td><td></td></tr><tr><td>142</td><td><a href="https://leetcode.com/problems/linked-list-cycle-ii/description/">Linked List Cycle II</a></td><td></td></tr><tr><td>146</td><td><a href="https://leetcode.com/problems/lru-cache/description/">LRU Cache</a></td><td></td></tr><tr><td>149</td><td><a href="https://leetcode.com/problems/max-points-on-a-line/description/">Max Points on a Line</a></td><td></td></tr><tr><td>150</td><td><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/description/">Evaluate Reverse Polish Notation</a></td><td></td></tr><tr><td>152</td><td><a href="https://leetcode.com/problems/maximum-product-subarray/description/">Maximum Product Subarray</a></td><td></td></tr><tr><td>153</td><td><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/">Find Minimum in Rotated Sorted Array</a></td><td></td></tr><tr><td>154</td><td><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/description/">Find Minimum in Rotated Sorted Array II</a></td><td></td></tr><tr><td>155</td><td><a href="https://leetcode.com/problems/min-stack/description/">Min Stack</a></td><td></td></tr><tr><td>157</td><td><a href="https://leetcode.com/problems/read-n-characters-given-read4/description/">Read N Characters Given Read4</a></td><td></td></tr><tr><td>158</td><td><a href="https://leetcode.com/problems/read-n-characters-given-read4-ii-call-multiple-times/description/">Read N Characters Given Read4 II - Call multiple times</a></td><td></td></tr><tr><td>161</td><td><a href="https://leetcode.com/problems/one-edit-distance/">One Edit Distance</a></td><td></td></tr><tr><td>162</td><td><a href="https://leetcode.com/problems/find-peak-element/description/">Find Peak Element</a></td><td></td></tr><tr><td>163</td><td><a href="https://leetcode.com/problems/missing-ranges/description/">Missing Ranges</a></td><td></td></tr><tr><td>168</td><td><a href="https://leetcode.com/problems/excel-sheet-column-title/description/">Excel Sheet Column Title</a></td><td></td></tr><tr><td>171</td><td><a href="https://leetcode.com/problems/excel-sheet-column-number/description/">Excel Sheet Column Number</a></td><td></td></tr><tr><td>173</td><td><a href="https://leetcode.com/problems/binary-search-tree-iterator/description/">Binary Search Tree Iterator</a></td><td></td></tr><tr><td>174</td><td><a href="https://leetcode.com/problems/dungeon-game/description/">Dungeon Game</a></td><td></td></tr><tr><td>186</td><td><a href="https://leetcode.com/problems/reverse-words-in-a-string-ii/description/">Reverse Words in a String II</a></td><td></td></tr><tr><td>188</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/description/">Best Time to Buy and Sell Stock IV</a></td><td></td></tr><tr><td>189</td><td><a href="https://leetcode.com/problems/rotate-array/description/">Rotate Array</a></td><td></td></tr><tr><td>191</td><td><a href="https://leetcode.com/problems/number-of-1-bits/description/">Number of 1 Bits</a></td><td></td></tr><tr><td>198</td><td><a href="https://leetcode.com/problems/house-robber/">House Robber</a></td><td></td></tr><tr><td>200</td><td><a href="https://leetcode.com/problems/number-of-islands/">Number of Islands</a></td><td></td></tr><tr><td>201</td><td><a href="https://leetcode.com/problems/bitwise-and-of-numbers-range/description/">Bitwise AND of Numbers Range</a></td><td></td></tr><tr><td>202</td><td><a href="https://leetcode.com/problems/happy-number/description/">Happy Number</a></td><td></td></tr><tr><td>204</td><td><a href="https://leetcode.com/problems/count-primes/description/">Count Primes</a></td><td></td></tr><tr><td>205</td><td><a href="https://leetcode.com/problems/isomorphic-strings/description/">Isomorphic Strings</a></td><td></td></tr><tr><td>207</td><td><a href="https://leetcode.com/problems/course-schedule/description/">Course Schedule</a></td><td></td></tr><tr><td>208</td><td><a href="https://leetcode.com/problems/implement-trie-prefix-tree/description/">Implement Trie (Prefix Tree)</a></td><td></td></tr><tr><td>209</td><td><a href="https://leetcode.com/problems/minimum-size-subarray-sum/description/">Minimum Size Subarray Sum</a></td><td></td></tr><tr><td>210</td><td><a href="https://leetcode.com/problems/course-schedule-ii/description/">Course Schedule II</a></td><td></td></tr><tr><td>211</td><td><a href="https://leetcode.com/problems/add-and-search-word-data-structure-design/description/">Add and Search Word - Data structure design</a></td><td></td></tr><tr><td>212</td><td><a href="https://leetcode.com/problems/word-search-ii/description/">Word Search II</a></td><td></td></tr><tr><td>213</td><td><a href="https://cspiration.com/leetcodeClassification">House Robber II</a></td><td></td></tr><tr><td>214</td><td><a href="https://leetcode.com/problems/shortest-palindrome/description/">Shortest Palindrome</a></td><td></td></tr><tr><td>215</td><td><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/description/">Kth Largest Element in an Array</a></td><td></td></tr><tr><td>216</td><td><a href="https://leetcode.com/problems/combination-sum-iii/description/">Combination Sum III</a></td><td></td></tr><tr><td>217</td><td><a href="https://leetcode.com/problems/contains-duplicate/description/">Contains Duplicate</a></td><td></td></tr><tr><td>218</td><td><a href="https://leetcode.com/problems/the-skyline-problem/description/">The Skyline Problem</a></td><td></td></tr><tr><td>219</td><td><a href="https://leetcode.com/problems/contains-duplicate-ii/description/">Contains Duplicate II</a></td><td></td></tr><tr><td>220</td><td><a href="https://leetcode.com/problems/contains-duplicate-iii/description/">Contains Duplicate III</a></td><td></td></tr><tr><td>221</td><td><a href="https://leetcode.com/problems/maximal-square/description/">Maximal Square</a></td><td></td></tr><tr><td>224</td><td><a href="https://leetcode.com/problems/basic-calculator/description/">Basic Calculator</a></td><td></td></tr><tr><td>225</td><td><a href="https://leetcode.com/problems/implement-stack-using-queues/description/">Implement Stack using Queues</a></td><td></td></tr><tr><td>226</td><td><a href="https://leetcode.com/problems/invert-binary-tree/description/">Invert Binary Tree</a></td><td></td></tr><tr><td>227</td><td><a href="https://leetcode.com/problems/basic-calculator-ii/description/">Basic Calculator II</a></td><td></td></tr><tr><td>228</td><td><a href="https://leetcode.com/problems/summary-ranges/description/">Summary Ranges</a></td><td></td></tr><tr><td>230</td><td><a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/">Kth Smallest Element in a BST</a></td><td></td></tr><tr><td>231</td><td><a href="https://leetcode.com/problems/power-of-two/description/">Power of Two</a></td><td></td></tr><tr><td>232</td><td><a href="https://leetcode.com/problems/implement-queue-using-stacks/description/">Implement Queue using Stacks</a></td><td></td></tr><tr><td>235</td><td><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/">Lowest Common Ancestor of a Binary Search Tree</a></td><td></td></tr><tr><td>236</td><td><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/">Lowest Common Ancestor of a Binary Tree</a></td><td></td></tr><tr><td>238</td><td><a href="https://leetcode.com/problems/product-of-array-except-self/description/">Product of Array Except Self</a></td><td></td></tr><tr><td>239</td><td><a href="https://leetcode.com/problems/sliding-window-maximum/description/">Sliding Window Maximum</a></td><td></td></tr><tr><td>240</td><td><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/description/">Search a 2D Matrix II</a></td><td></td></tr><tr><td>241</td><td><a href="https://leetcode.com/problems/different-ways-to-add-parentheses/description/">Different Ways to Add Parentheses</a></td><td></td></tr><tr><td>242</td><td><a href="https://leetcode.com/problems/valid-anagram/description/">Valid Anagram</a></td><td></td></tr><tr><td>244</td><td><a href="https://leetcode.com/problems/shortest-word-distance-ii/description/">Shortest Word Distance II</a></td><td></td></tr><tr><td>245</td><td><a href="https://leetcode.com/problems/shortest-word-distance-iii/description/">Shortest Word Distance III</a></td><td></td></tr><tr><td>249</td><td><a href="https://leetcode.com/problems/group-shifted-strings/description/">Group Shifted Strings</a></td><td></td></tr><tr><td>251</td><td><a href="https://leetcode.com/problems/flatten-2d-vector/description/s">Flatten 2D Vector</a></td><td></td></tr><tr><td>252</td><td><a href="https://leetcode.com/problems/meeting-rooms/description/">Meeting Rooms</a></td><td></td></tr><tr><td>253</td><td><a href="https://leetcode.com/problems/meeting-rooms-ii/description/">Meeting Rooms II</a></td><td></td></tr><tr><td>254</td><td><a href="https://leetcode.com/problems/factor-combinations/description/">Factor Combinations</a></td><td></td></tr><tr><td>256</td><td><a href="https://leetcode.com/problems/paint-house/description/">Paint House</a></td><td></td></tr><tr><td>257</td><td><a href="https://leetcode.com/problems/binary-tree-paths/description/">Binary Tree Paths</a></td><td></td></tr><tr><td>261</td><td><a href="https://leetcode.com/problems/graph-valid-tree/description/">Graph Valid Tree</a></td><td></td></tr><tr><td>263</td><td><a href="https://leetcode.com/problems/ugly-number/description/">Ugly Number</a></td><td></td></tr><tr><td>264</td><td><a href="https://leetcode.com/problems/ugly-number-ii/description/">Ugly Number II</a></td><td></td></tr><tr><td>265</td><td><a href="https://leetcode.com/problems/paint-house-ii/description/">Paint House II</a></td><td></td></tr><tr><td>268</td><td><a href="https://leetcode.com/problems/missing-number/description/">Missing Number</a></td><td></td></tr><tr><td>269</td><td><a href="https://leetcode.com/problems/alien-dictionary/description/">Alien Dictionary</a></td><td></td></tr><tr><td>270</td><td><a href="https://leetcode.com/problems/closest-binary-search-tree-value/description/">Closest Binary Search Tree Value</a></td><td></td></tr><tr><td>271</td><td><a href="https://leetcode.com/problems/encode-and-decode-strings/description/">Encode and Decode Strings</a></td><td></td></tr><tr><td>273</td><td><a href="https://leetcode.com/problems/integer-to-english-words/description/">Integer to English Words</a></td><td></td></tr><tr><td>274</td><td><a href="https://leetcode.com/problems/h-index/description/">H-Index</a></td><td></td></tr><tr><td>275</td><td><a href="https://leetcode.com/problems/h-index-ii/description/">H-Index II</a></td><td></td></tr><tr><td>276</td><td><a href="https://leetcode.com/problems/paint-fence/description/">Paint Fence</a></td><td></td></tr><tr><td>277</td><td><a href="https://leetcode.com/problems/find-the-celebrity/description/">Find the Celebrity</a></td><td></td></tr><tr><td>278</td><td><a href="https://leetcode.com/problems/first-bad-version/description/">First Bad Version</a></td><td></td></tr><tr><td>279</td><td><a href="https://leetcode.com/problems/perfect-squares/description/">Perfect Squares</a></td><td></td></tr><tr><td>280</td><td><a href="https://leetcode.com/problems/wiggle-sort/description/">Wiggle Sort</a></td><td></td></tr><tr><td>282</td><td><a href="https://leetcode.com/problems/expression-add-operators/description/">Expression Add Operators</a></td><td></td></tr><tr><td>283</td><td><a href="https://leetcode.com/problems/move-zeroes/description/">Move Zeroes</a></td><td></td></tr><tr><td>284</td><td><a href="https://leetcode.com/problems/peeking-iterator/description/">Peeking Iterator</a></td><td></td></tr><tr><td>285</td><td><a href="https://leetcode.com/problems/inorder-successor-in-bst/description/">Inorder Successor in BST</a></td><td></td></tr><tr><td>286</td><td><a href="https://leetcode.com/problems/walls-and-gates/description/">Walls and Gates</a></td><td></td></tr><tr><td>287</td><td><a href="https://leetcode.com/problems/find-the-duplicate-number/description/">Find the Duplicate Number</a></td><td></td></tr><tr><td>288</td><td><a href="https://leetcode.com/problems/unique-word-abbreviation/description/">Unique Word Abbreviation</a></td><td></td></tr><tr><td>289</td><td><a href="https://leetcode.com/problems/game-of-life/description/">Game of Life</a></td><td></td></tr><tr><td>290</td><td><a href="https://leetcode.com/problems/word-pattern/description/">Word Pattern</a></td><td></td></tr><tr><td>291</td><td><a href="https://leetcode.com/problems/word-pattern-ii/description/">Word Pattern II</a></td><td></td></tr><tr><td>293</td><td><a href="https://leetcode.com/problems/flip-game/description/">Flip Game</a></td><td></td></tr><tr><td>294</td><td><a href="https://leetcode.com/problems/flip-game-ii/description/">Flip Game II</a></td><td></td></tr><tr><td>295</td><td><a href="https://leetcode.com/problems/find-median-from-data-stream/description/">Find Median from Data Stream</a></td><td></td></tr><tr><td>296</td><td><a href="https://leetcode.com/problems/best-meeting-point/description/">Best Meeting Point</a></td><td></td></tr><tr><td>297</td><td><a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/">Serialize and Deserialize Binary Tree</a></td><td></td></tr><tr><td>298</td><td><a href="https://leetcode.com/problems/binary-tree-longest-consecutive-sequence/description/">Binary Tree Longest Consecutive Sequence</a></td><td></td></tr><tr><td>299</td><td><a href="https://leetcode.com/problems/bulls-and-cows/">Bulls and Cows</a></td><td></td></tr><tr><td>300</td><td><a href="https://leetcode.com/problems/longest-increasing-subsequence/description/">Longest Increasing Subsequence</a></td><td></td></tr><tr><td>301</td><td><a href="https://leetcode.com/problems/remove-invalid-parentheses/description/">Remove Invalid Parentheses</a></td><td></td></tr><tr><td>302</td><td><a href="https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels/description/">Smallest Rectangle Enclosing Black Pixels</a></td><td></td></tr><tr><td>305</td><td><a href="https://leetcode.com/problems/number-of-islands-ii/description/">Number of Islands II</a></td><td></td></tr><tr><td>307</td><td><a href="https://leetcode.com/problems/range-sum-query-mutable/description/">Range Sum Query - Mutable</a></td><td></td></tr><tr><td>308</td><td><a href="https://leetcode.com/problems/range-sum-query-2d-mutable/description/">Range Sum Query 2D - Mutable</a></td><td></td></tr><tr><td>309</td><td><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/">Best Time to Buy and Sell Stock with Cooldown</a></td><td></td></tr><tr><td>311</td><td><a href="https://leetcode.com/problems/sparse-matrix-multiplication/description/">Sparse Matrix Multiplication</a></td><td></td></tr><tr><td>312</td><td><a href="https://leetcode.com/problems/burst-balloons/description/">Burst Balloons</a></td><td></td></tr><tr><td>314</td><td><a href="https://leetcode.com/problems/binary-tree-vertical-order-traversal/description/">Binary Tree Vertical Order Traversal</a></td><td></td></tr><tr><td>316</td><td><a href="https://leetcode.com/problems/remove-duplicate-letters/description/">Remove Duplicate Letters</a></td><td></td></tr><tr><td>317</td><td><a href="https://leetcode.com/problems/shortest-distance-from-all-buildings/description/">Shortest Distance from All Buildings</a></td><td></td></tr><tr><td>318</td><td><a href="https://leetcode.com/problems/maximum-product-of-word-lengths/description/">Maximum Product of Word Lengths</a></td><td></td></tr><tr><td>322</td><td><a href="https://leetcode.com/problems/coin-change/description/">Coin Change</a></td><td></td></tr><tr><td>323</td><td><a href="https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/description/">Number of Connected Components in an Undirected Graph</a></td><td></td></tr><tr><td>324</td><td><a href="https://leetcode.com/problems/wiggle-sort-ii/description/">Wiggle Sort II</a></td><td></td></tr><tr><td>325</td><td><a href="https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/">Maximum Size Subarray Sum Equals k</a></td><td></td></tr><tr><td>329</td><td><a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/description/">Longest Increasing Path in a Matrix</a></td><td></td></tr><tr><td>334</td><td><a href="https://leetcode.com/problems/increasing-triplet-subsequence/description/">Increasing Triplet Subsequence</a></td><td></td></tr><tr><td>336</td><td><a href="https://leetcode.com/problems/palindrome-pairs/description/">Palindrome Pairs</a></td><td></td></tr><tr><td>337</td><td><a href="https://leetcode.com/problems/house-robber-iii/description/">House Robber III</a></td><td></td></tr><tr><td>338</td><td><a href="https://leetcode.com/problems/counting-bits/description/">Counting Bits</a></td><td></td></tr><tr><td>339</td><td><a href="https://leetcode.com/problems/nested-list-weight-sum/description/">Nested List Weight Sum</a></td><td></td></tr><tr><td>340</td><td><a href="https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/description/">Longest Substring with At Most K Distinct Characters</a></td><td></td></tr><tr><td>341</td><td><a href="https://leetcode.com/problems/flatten-nested-list-iterator/">Flatten Nested List Iterator</a></td><td></td></tr><tr><td>346</td><td><a href="https://leetcode.com/problems/moving-average-from-data-stream/description/">Moving Average from Data Stream</a></td><td></td></tr><tr><td>347</td><td><a href="https://leetcode.com/problems/top-k-frequent-elements/description/">Top K Frequent Elements</a></td><td></td></tr><tr><td>348</td><td><a href="https://leetcode.com/problems/design-tic-tac-toe/description/">Design Tic-Tac-Toe</a></td><td></td></tr><tr><td>350</td><td><a href="https://leetcode.com/problems/intersection-of-two-arrays-ii/description/">Intersection of Two Arrays II</a></td><td></td></tr><tr><td>351</td><td><a href="https://leetcode.com/problems/android-unlock-patterns/description/">Android Unlock Patterns</a></td><td></td></tr><tr><td>352</td><td><a href="https://leetcode.com/problems/data-stream-as-disjoint-intervals/description/">Data Stream as Disjoint Intervals</a></td><td></td></tr><tr><td>353</td><td><a href="https://leetcode.com/problems/design-snake-game/description/">Design Snake Game</a></td><td></td></tr><tr><td>354</td><td><a href="https://leetcode.com/problems/russian-doll-envelopes/description/">Russian Doll Envelopes</a></td><td></td></tr><tr><td>355</td><td><a href="https://leetcode.com/problems/design-twitter/description/s">Design Twitter</a></td><td></td></tr><tr><td>359</td><td><a href="https://leetcode.com/problems/logger-rate-limiter/description/">Logger Rate Limiter</a></td><td></td></tr><tr><td>361</td><td><a href="https://leetcode.com/problems/bomb-enemy/description/">Bomb Enemy</a></td><td></td></tr><tr><td>362</td><td><a href="https://leetcode.com/problems/design-hit-counter/description/">Design Hit Counter</a></td><td></td></tr><tr><td>364</td><td><a href="https://leetcode.com/problems/nested-list-weight-sum-ii/description/">Nested List Weight Sum II</a></td><td></td></tr><tr><td>367</td><td><a href="https://leetcode.com/problems/valid-perfect-square/description/">Valid Perfect Square</a></td><td></td></tr><tr><td>374</td><td><a href="https://leetcode.com/problems/guess-number-higher-or-lower/">Guess Number Higher or Lower</a></td><td></td></tr><tr><td>375</td><td><a href="https://leetcode.com/problems/guess-number-higher-or-lower-ii/description/">Guess Number Higher or Lower II</a></td><td></td></tr><tr><td>376</td><td><a href="https://leetcode.com/problems/wiggle-subsequence/description/">Wiggle Subsequence</a></td><td></td></tr><tr><td>377</td><td><a href="https://leetcode.com/problems/combination-sum-iv/description/">Combination Sum IV</a></td><td></td></tr><tr><td>378</td><td><a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/">Kth Smallest Element in a Sorted Matrix</a></td><td></td></tr><tr><td>379</td><td><a href="https://leetcode.com/problems/design-phone-directory/description/">Design Phone Directory</a></td><td></td></tr><tr><td>380</td><td><a href="https://leetcode.com/problems/insert-delete-getrandom-o1/">Insert Delete GetRandom O(1)</a></td><td></td></tr><tr><td>381</td><td><a href="https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/">Insert Delete GetRandom O(1) - Duplicates allowed</a></td><td></td></tr><tr><td>384</td><td><a href="https://leetcode.com/problems/shuffle-an-array/">Shuffle an Array</a></td><td></td></tr><tr><td>385</td><td><a href="https://leetcode.com/problems/mini-parser/description/">Mini Parser</a></td><td></td></tr><tr><td>389</td><td><a href="https://leetcode.com/problems/find-the-difference/description/">Find the Difference</a></td><td></td></tr><tr><td>394</td><td><a href="https://leetcode.com/problems/decode-string/">Decode String</a></td><td></td></tr><tr><td>398</td><td><a href="https://leetcode.com/problems/random-pick-index/">Random Pick Index</a></td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;此表为LeetCode分类顺序表，先易后难，并提供LeetCode前400重点250题版本。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LeetCode" scheme="https://juoyo.github.io/tags/LeetCode/"/>
    
    <category term="分类顺序表" scheme="https://juoyo.github.io/tags/%E5%88%86%E7%B1%BB%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>技术指北</title>
    <link href="https://juoyo.github.io/posts/9c14d7bc.html"/>
    <id>https://juoyo.github.io/posts/9c14d7bc.html</id>
    <published>2019-09-16T16:53:17.000Z</published>
    <updated>2021-05-29T16:20:02.001Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a46b985a83252a3c0a69bc3a02a2a69e0914c205100a589a10c8ffaaf1122fe0">a4cddb8c4c65b98ccbe714ad2c591985f8b87d0adc52b8a57271624cd1f00369b7d95af4b70f59459785147426e9fdd4ca405ff128908fb04b6994960feeef3a61fbf1e8aac8aa625131d2e573602cacae09345b8b23b0968ab1dbcf9ae8a02acbb9d9514b8cb1722164a51a767797db0cfa73b490c846d0c84a7c9e28937384897c622bad1385b5ce195ed8655d2e918a4c2a3a4c49942ba94277fea04b5811eb39f62e2bb0b6562c3940ffc3367f0ce0c1f4e41431d6b23ebea31678eb5dfeb455d2ed03ff47f32c7dc12c5623e9c15e5f312ab6387b78f8d8df59bda93585b4202284dafcfb040487a17a2d74f8c9667f3ebafb63fa7946b9786cbcec7e3971f8e1f163ad04977686eb48709c264798cffaa7bdeec7ed2f97e01ba8c3c875b4ffa7f0fc3c37554810c88d727cc58b2ee084202b4f83a390a8c734569ed9ea3e6fd94350bd93fe54b77163b7887b4b011b1a3426b64892bd023ef3cacd4ebd456ef5e4721b4717c8e4f45338c0972cf6d6090a70615010d415617b8e13e97f85e29dea1eb4536867ca39fb8ad297224c27e6cc511d5007931af46a7dbb6ab07e4a5eddc323c1a25ef6bad487b34ea42ebf6149b85e0e660a3b16f03320148c94c7edbd0fffb46a7f9e0b01fc641dd6593a9c39e27b961146e206496ef5324a81642adea612b8e79aea31d72622d9d750e57f00d24418d3fb4e32bc8e66e06448c3a3047f995fabcdf77af8bf07c61660e107803af4c35d845cf17d4e4d85cc2663961be673f631a1e0141db4ea6b0299287ce8d01ce6e5cc89da9daa537439261df2063b62df06adb6fec1c37fee26a7ebecf154e0e7fe7d97a31d3d4a4d0af4218afd4bd98b6d54a6f264f3760afc3cc899742736f9814a57e679b2f832633675f714a223fa68c945664ea6c694122ec123808dbbcd229fdc3dba07a709cea323ebfbf50f67d3e6b78a57ff21ca0f07249a8c2684f3b986b82c69d74c00eed8ddda222c447ef620cea04a878afde2168fcbe173c087d131e09e9f39f83c02faec6e61522b422ffd1a488ebc99e1be89ffe532e7583d0c0c5525ae4451727bad1ff999d22611aacda37f3a8c4e9b96dcb60f2312edd608c6937ee8990a752f778569e57edac919f2cc628de37f48bc355b92350bc5e47331e61ed813d7f59a13fb59cd204d1c73a4359f67330f1c508af23c058c5ed37d675eee86dab972a79c26e34f7ae7c72ab3615e2bccbc09aeec68b5433dac504b28b9b63283cd04ec14e831a9b472384229f3899eb68b343922f2710e56ad03d54bd768735fa13c6bd7dbbb9bf3e81447f6ac46533c60a1e4435271dc766546d86dcdcf28adc04daae6c5bb39ea9ce8be8aa8a250af62a74f5d7eeda6a3a063ddffd2d55d8f24b20819f33fab81fb95d85dcf160f0ffb991587046457b94e9aa02e8b2c35d49bced24b4b39f194a6e353a6d751e5f4eb4272ebef9efaaf02c8993b8db1228c7b57c296cf37789caa4d4f55c2a42fb59414bcd4e554f1e6447eae2a57116d3b1fdb49ba788dfc9381ec6d0f2c644e8930f0f36ac9a445ed2a2bfc91ed70c3ebd3c908ba5f62928aec61889401a669bf96a387a17fdc7541eae36e3b8a8d2cee07cf8bd59f0ded3b6728b3e2bead4ebdf58f958676c00bb27d36a82c2d2ec8fd979663ae56f7b4bfa9632af555642975aaf6f11407fbc62a5bb3a890c458ccf37e84998dd011decac748c6b24c561262ce5d598d478a8487b09e787edcde38d9683a6348c01e01cd05412ba7b9c816039bfd0ebfe3ba7c7cd40078b958d9b189f53af936a5ca1301387b967babd8d03e5e35faf5746886d32c9e7fa8e23171fd17c757da2360eabac6f188da501b8ad001b58bee61f962d386fc6d78290ce7003cbbae9146fc944e71e0673e1b1289e224cc2d74a41054ceee7078282f5083bee0c83a2bd197788a1523d74e9e0a9f76a097f7f88b676fb29f596b6aa6369e07a5576e455a87508f803a4de1d293f651da138e7c8e8648204d555c9c36ca59d838a2519c024942c55b228eca0c4254150f60da0cd83c1278e0a61e870f469f08ec620dcd9b664e3476d73234284a667dd660bed0557e6570c4cc06357780a85f8e167afe7af6f21047db74f34ee2eb1d9ac0feb39e5e60e12785e1ab7e648a948cf2597f68b74d36fdb4e0e37d7aefe04130bf9ee814b97a5de5d9d02f4b8d6b15f3b1fb2ab904b0fb329856e09e83969cd68c1c983f9ced1d8496acbf010ab93a6363265713afa83ce85d7f112a949dc140c1d36e76dd56d3ad7499b4cc81083e1a39743ee916e4ad4bb70753db3d12929fc94c449a1a8776828df97d434ea3882a87e0102b24d0d0599335e46f4fea3ded8d8782f7196adb4cc9bc1093b37cdec76212fdfcaca51d850394ac1764cf7d456b6614c30c9aad7d115cfc183a92f2971ededc8c3fcb0fa2ff79dde80f7fe5f1b2534c8bf0192f67b3c7b2636521b32830e6cce0460111e95e86ade78c359bffdda7cb966bf6fbc08fa1f919c96a4ed3ecff3642ded3a9f4b3817c3819929160109a1f4091cd257901cf0529f2311f1018a7935db1ae42180b8c88101aaa68cc5a040d0ec37fda57dded8e85d4a0aa0fdd07109f0909995dd03ceac17b25c428393202b59982eff73ac4d72c981dbc8ae56a217def002e098c2abe36d09f2d4efff0d2c1f55b35e666e2a72206a3ea73f4032209e7866b71954ec524c658e7d6da5fdd623ec8ed859b21dc629c192c9febed542ca3c7769fa22331525e23e6c94d921573223388bc02e0a5aa37f686fb4917044f66ed64a3cf28819ed59f3b7cfe51bc8e4adac3eaf691bd07e3087ceb0a997f29328212e91f5f001c36038254fbffeb0406fb1b1b5c2fdaa3226c7980e3b254a3c68e45c1e7ea2ae1af5b2c0273fecf07cd7aaa7af582528d0f6cfde8418f98e0a40bb220976d8aa543731caa228cba767c36cd1d02766fd6914df7b1bc8d781746f44d403bc810c92c5b33f376e527a669a78f4e6cc94cb2eabf2dd3dc5b363f1c0916013054d889c0434925c7efddc91915a91cc9d69240bea39579edd7cdc0db8ddee028da9e1dc7f5a8bb155e42ec4e37f49d8891c197e29003aba8de2c89c5a8ed21ed23757e5dd61d5c8a54df73c3ed497adb9853e3cff5b5f3721becbe9bc887e02866ea2aad1b2951c6808898b4a0ce9afa64a8611e11d1d8ad8635174692e393d7a3b5a742a14ba5fcf64678e2f6095af16f7a8ce85943d94197dd577ea7d835260343dc73a035de390a04305fc632a44d2eca35b648ae13e0da97bc675d6be13252b12e33469e807be844cead82d520ada128f99ef4415e86c275dfed8b615536f98fdb5da7bdebfc8276899f5b6a4c73f38c8aa67ade8c30caf0e5c418b1cea9e0397386e6ba44c04528e95879ff4f8f5bef361d9e376ea239c55f5ab6eebc6ff6fa1f8d152924d4e0f6ea425d72d65acadcc562dd8a23f5757941d828c62cc4a7f89f78bf0d475178a4f5a68f44d33bb53acecb7bd5e089c30cefae73aad65e53c68e0bc90cb4984e7dcfa7a9f69c93d361bc9c47167343a22602186b295b6bfaa6b8dd66f75df017da47c6d512418d95cf923edd36277da53339e597aa109d8b88e615c4068a841d080e13a0783622fffeed59cce866b44ab5dc6c1073664e1c6de21d500a137161bba62584dec550424f32c63d77656d19610206bf145f1179bdeb64f1cb2ab72af88e54aa9475dd27e0595d71ca524e611704ad7aab7c597a7f54e4d419e9af2546d360eeac18c8a7f156d71c949fd3466d04e3b7dff70dacf8cf865783088d84cc05d06f35d5232b5916e266afcbc6babfcdabacc53299d71f13cff1d23826375f01c47a98493f5f348d76447ed28f68753e90cb9f4311c0d94ab63d415d1380adb3aa54811d229934735ad9f7a4b1b828923ab31bbcf934f01615f764c2d85c2d70850efa01353379fd88c57cf3281aa2b3b36d7f3a94311d39aea1537e47dc3b344067400e971de33626718c7f6dc8ad068a2b3eb348e863785b50d6a521deb200dad35be86558e5dabd161b8cf81ca99d3bb2604e3e52f4575a676334adc81170884379cbd78ed9433d865d11bb741acdb9cf2ca508db75aa5e27dc00f333892d103f66c48e116c2345a6d6eef982e96c8a4ce8e9f9141b27f129c37599416daab0a1207db23cbc782d9ba0575b540eac51b2ff671da1cc7e4d90b948ba2a981f20bea95fac09a29af33dc839347d8d8d47bcbf9eaca7e47ceb063d49a51dd88df188c56f239b3511cc8ea4c6521d06614b61a02c71e195dcb2ba75d578ba3b3637da9d0a9cd68cf6dcf1932f030bcc6ea804deeef0f98a8983a0c0317a4f92ee297eda788f2e34f1ec58255d857d72a374627434061aae42e392fcfcad5380348490cbb4336c1d1c62a208321a06f7a1d086a203a05d11bb5ccb9e70963220576109c5aab628b84cf902210fb85509511a5f5f5bc8a241cd26409665bc27b662c71b4d60189214d3da16acbd004593e0731e177e13db89e27579fd41200713000cfbe871a24f63066f0a559d6f889f7f2e0944728c4e79a29429ad38b91571412b38ac4172fafe87ecf0a7ea9609c30599b348b46df58cc27d6df110228e7ac61418a86f66342d30b5e32fb063d0fe40ded004034a22c8b780fce0ce1e15aace206f802e359dfa3f94ef64a1fbeb2972480e185e5d265f8bd1fc36aa2e45e24fa57c93a53384291f3cb0b5fdc3795c0772faf13f12f120e269a0c7d1a968977b84765df502f825ee466bde7959fce5037b93b3bb9a92c86b92cb2e17fe6eb92fcb1de3d4a8fb4263b9792d218471b7eb714706223382261e7fe09924990e0b2ca4bab9b7f8fa7b5ccf2bb322b9c8a44f291a9d89e4708321ccd16bfa4bfd6faeeaa371de22976b42cf5f84611d534532300030ffdae7cbb89b59fb5be1a4218b50a409375df78bd866175512705d5a2faf1881d029c08f5efc0d8413c181dc2c019e2da975d24141d7b8c17b4a743f15f017128cea591b69bdcf69027537d0948cf668b63d85a82724ab2b1c2343e5b995cecd1bf96a1c9c389943801cee1e1a972f1e2869a0ec9217a9c8b1588d552b0f94c9ce30b123d4249023415de44eb7d58f7bec2d1102e51aafa39983650f1475e25a2b61a78bb2e6b5b3a87025cc07a0cc89a632d7ae0a37d7642f9d5c64a25654de6fa5dcb1f653a1fcfc10d7af4b9b2e7408051fd2294b3db3fe5f342f5cf8f4b29cf1bb32e89a9358ad4713113cf4f3c5ff1f97f3d9f48dd33555199de3b40bb6aa58f5234fd5dd50c5821d52ce5ad943ee996e85eaa34180827c7f96d1e25d83a9a8c12ed1810465c10cb44e4daeda9ac7860694c44765f8840d0234bef0846824452de7ef9203f516508fe7bf2e20b8a6fa0500fe1c45cf50fd0ff6b8d4f22bb7c65bb08c4464829e977affed459e991132a01f4e3e67bc58662325bc1b09c054952a9d2c1ba93e791d7f655ffcf8de37afeecb74b032aad2aa88a6b97a4cd3595634f074422d3e90bc988ea517223bd1a8232ff1ef64a45daf6f3857b1cdaddb281b925f0c26af64ed603239244ae492d9723b08e61e6ce30bc1b84845bbc9a347fc2a8cebe1ae0b9ef7306c76683d15686aecf008e2d4628f012998436d57f3956927f34bfeadaa81fd6948c03fcc98733f7b494843f327a183289cd9dada860c2ff6b3d578f91d283ffe5dab1cc4d72c4273a6feb9ad5fd518ffa651d211fc223e54b53a684588d72e0554cb0615496e38da6ba77198a74f3a4dd1c62a4b91fbf4773401831d84003ac00ae035d849c5d5bd7145a180a8969aef012b29b0e4f4f003ed59261d508b92b3d94c3debda272cb9501bbed53aea5768dcded1a418824c1a81cf075aa83fa3f3276c216ce40d860c99a361076dcabb5cc0af9d6a223f39de79d6f113781312526144ae94df6f13276d9bf4fe465b90b6e9128504a4fc0f234b5531be0bc300a205974d50ed1876daf7e0e42e0a6c012b25707d40c091e9fdaa85d398e94bdb0b64cfe2a7ae317f50e495adea882ad8ff464ca18f1dc5dfc43d9187b9d3fba097cc7f67f43bcf4ddbfb54ac9b81d6d4da33ef68c9849eef5939db45afa5b185a399a99efd9ef3a35ca9710b52ffb13a0cac529f2ce18ded9f23d3d78a5cbcffeca7d3baa2ba554ddffe3a9daba210148bf6d6ad12cb0389bb022db595718cea2d939a2fd19108c627f0f74cc1a49a821f011f5690481a764b46101cb693d933181b65b3d239a188452d9ae58b9f97287db0869a8d3045396db7abd40f9a7bc9af03f6c1e5105cb8bb0ffb1157172fc97b3c0c0b67df3940d149c2a91c6cedd8e49124eea06ee0fad59739b97e7d12a4c9e2496b399b4543c710685683a34cb083073cb60071d2626574256b4011ca2d227a6cda772b35e89ab4444102677701f02425005868ee48ed04a5c448f4e3163b5a8ae7893ecb35bd0c0b9de9251a0cf680f5a9a6c42ad1a9bc06d141f4c4e9d9ec7b585b7ee8cb9b7cdaf4ec6de2d4c22e03f8bbe7ab7389c02ed51cb56ccd9d7c0f544edd9db983cbcee6518f2441ef36d0d47bf730e9e501867ed0294d04183bc47ec73a82883dc9c99287c319366f5df1c4a8c228f9d9f8a0b9ab75bd5446749e3d4bf9a36c00c0718597b5a1dbc09fbca5f86dfdb94e90402e65c9d3a70691d9ba1236ef40cbbabd0f5172c9b7eec01c9ae5e70ac3f8e6ca6d891b6088e761db5a086e67af6c4188d21cb894d6b4740083043741497eb6c505a6ebd586e3f157f99e076855b36c840ab9162f233ea19efe59f42cb329856dafd650f8d093f429002537e015e076cc1cdfe6e88714b39009ae7a67a37d27eb17f5681cd6393ddff3ff06709a56a8b8c14b3883d4eba5ee0567d38fb5376b4772f8aef01a2be9a857b7d37a7048b79503c794e928f0e6b1de06f1471efb7705e6be23006ed5246c2b76177a9d2d537c5397071dd7ab5065fd25a68951e503c937f0371a8215d632116ae5b8fe594c6edcceb00bd9704ca580192bc7917fb065d1969c353772eb5323d66900eecd71400d5362a81f2cfd2b7eed1fe629a7a5c28fceb72e2cc52aa9be9ba4dfdcf9afe8ca4c0f78a23f367766c34ee487a9b4f0edf272c0c5eef534514027a28a839d380c3edfe47a37529bc8e660d4f2e7490350b2278b196698f430722901c18f17b65317b7143c486007dfabacf38ae20662962126e3326a7cfdd8f510f9b9cee40b444cd3d8832e81255a80b1ff71a7ce092e530b8bcd12ead23824a327138cfb39caed067e12127992578740aa8e51421030b85554f50533486a65b4c15847deab30d40547001b206c4ec59dc5bd24c76167cd48db9fbba9dc7aea34ae87a1f7654cdab856a24c0c10bd556d467c5809c91c71282e5ed70b58a72c999417c03dfae0bf14d386e31d172d39b166cf2dad8e1b6d7d7be154b9e175202f1a01e2d23fd8c5a62244cd1d209d165180eb9a849d51a619e33600d0635ee206830067d4d590f5a696135405980ec801724a17e6633a0ed6c7f083a72a5e10fb7214e4f883c18178677d86bc01483e3cff73e8f0bae53cb9959899d10d627a4be47c675acc597bc3707354d2c1f750225ab152f91040c8ff592afa594e3555ca233b3bef11822fe1bb9f233c8736f8d019082550a9060655ecd8ba8a8ebaa4c22206b831096277dea8d6c0f6d3d632590583012769cc7236658b9d636c22e17dd55510e154c3e211b6c156410e31479fdb344d782566f8f4559ade7b909d4cef3260ce70bf5ef606cffe6325794836628f3e0d8d99420dd1c261b8fd5605f010f97385fe49b8516ba1747dbd41b1d028ff065ab289b097d529fb5e74afe39d7a9fc518da75ef23a5dc200689b70f4fde44924c9360df4d387de49d13ddd5479577642e51b1bda9c30a8772d6263a4fa50c8fe3716ff5b295c035ecd1d071dfe00429f757af30c1946333c271a0987d5d089e50ca170dfc48a2c05c7f9d7bc029232470634fc0dff0b3d1c85fd08f59ed3402c9c4af8066028be9449e17e6dc28d02b767bc597bff3d43ec29ae9ff8dc1e428cd3c74ee291dac9606802094432c3943b9b4a12b4a0c9c94ddd40358f4a4c5dcc089aa53d324729a2e580378fcd3ddff4d585835174dfe41a13251ebf8a4a3b68416fec49c1aae28fccd9ead21ee65bc85633a2b6e47af57d345cf25cf2bbfcb82da151b8e4567957b2695e31550f026674578f79fd62f7cc52f529e37c2e19e6f0b089369d8f0bb63f3d39143a0a706d2ee52df44e65b5bcf00581b7b9ba01da19d2a075b690edfc9145fc7aafc22bf6974b6d4006395d8c20c133b29030d4119cee8eeba89b27805d398b2aeab9502deec3259befd3e9230f0f50e5e33a529f67fbaf2154d54748dbcf0e43ee0dcea60bd6a9b69c0a883f1d28295302c33ec78b45293d35cc57bc0516d2002867ffcc365d47f68a0119d08383ddaa1d967f2b1adab821c9098556ecdd043e5e0a0aca39509d05166d022a847c102dcae77a2abcd442f82fbc7d286cf3a5eeb8a726fe42dedf01950faa7c758d425c315549dad6fb4db2759c7a7576f7ac4356847d0ebc04336a9f09bed0c03c305247fde08d966198baf17369e0fcca93cc7749a6eb1c6eb8b457adac24fdba9c766907f2b7c4c42e72b7bfc67fed61e4b9b0feead7f2372e3268dd995c3fbdf6ab061733e5a4dfd930bf3f0c5d91879c6b8cbe597533d7eca3338d51077a15cd5e6f063a17be324766c8c6a1d7e89cbe16eadd73bda395319fb6d1b72d92569a97074c026106cfa1fdb6fbcadaf17c2ccf751f368c02d393c79a7a03827e524b34be866d81005d41cc86f42e56e6af915e206ca1029939eb44955668cd0cdfbb7cb0adbf8b2ab92dca2570096d6ce63194d206aa36d60d631ee411879ef52b2991ca9fa15726b8be9280f2efe0542ddaef3139a645f860c6078d642985dc9010766b76d55eb87eae473fbfd83c1900936f62128e61fdcb0762f4172e587338c922c0421a836006b4100794ac447e9b7e4af4b344bfc5ee3d18c5a3ed09d72126485d687a97af817515ca9359f917300461635ed7e49d56cc8faec8ce8f0784c8eb08b109fb48d518d15859b93770ad792e1b88c363544051263f77f566283a21a8c9f3ba7a8f02d8eaab4fabedf3788b7f0a32914475bdbc6180cb6af173e3afb33c0bca67451f4a06af2ace7ab6d1e3be74a7bbeec85e60b15f17644dc8a3bd31dcfa28bfe1f965d8852b43dbdb01254a683ca9359c90181556d973969b7c1f104746d0d01d5382d620862957562d2849dd153adcde335abb60d9bc1ec9e5044837fa6812c360a36f3ea76bd72be5431a1a2bf476a2b2d56948058c6f1a3336c4dffdc518e0bee684355e79977cf7871db91f95f0879a8b2e8084649b188b7a87581994bba9d489ecd8abae5cdaf195ea9ea3a2cc1b90085900a897ecd1adab49836ee3709c0994ba361749f442bf0186d5479822a07ed8a7896532b60c03f3a7c1915d76cd416f3741836ea72c8d3d352af2cef15caa807431ead53bf06d986281548b37684c67c8cb725bf8842d474b7541483ff8b94fa5f03bce5a4e8499cf593c363e12de58e4ec408d3482d4d46822e604c30d9ba674470134cd68df2f72683ba44efecd1885050d94c8428a1addada56d2e87db8821427089cb1c9e283f5ee5d3fcebee17213f28d6b8dd3a591358fec9a3577f44818cafb85da0854df758880fb167021ca4a1a1397175f96b506544727fc75c5bd2a9946a3e2ac3056c92b038b9238d295f4676b66e9482f2e1e0f1f9ca5db7b7e175980ba2021b40d6be2d47b022d357c40e2741160ea0ca82d4b57ca7304a4de67ace6ba32e803957beea94d294063afcbc941d3518bff25805364cf5fc8ac1e0a51f6d2195fd9e5e17cae94d903e721f309579138b3a4046a60905475737fa072978653fa8e05e6f453f821917e0e8068082cf526d60e623c6d10c543dee76f35c633d2044996c3e6ceebc7178bba9e516816a608f1d6bd47a4f3d83c5eba04961907aa5bc32d1ee080bcd691e171b2bc62d5a632fbebcde9dc2ee3ea27c8cdb6f0c77a176478147879c0d9565978e5cb76e276d794935a98c4671d5a654d19f6e0f18708bf60250298cc3638bf61c2c50858eeabb3e6851d9f6ded37614378fba7552f61805f54c93614fbb895f153d99a863fca276ea15dda161b7e329e9c980f2c974179687bd282a26821fde9af6c4aa23a6470d746556115a067941e00b79f51f195fe8dd1f53f12b55d033a8f28ad9d9ec5bddad6c65e0dddfb029c54dfea05965bfb7a89a1e4819f85151d9b6e28690119684d8b0da824740833aab579f6bfd7628174a1998bab7c68955df6e1bf1c8865492ba0efd15151049d4f480f441d2688007629ea4a0a60ca341e186b0e6a6554b988c4660493987bbf814ad6723e82e5c8fb304c1a31ce7b10c01465f123ab03cd4e5bb8bcaf13d26ffc5200461e45abdfbcf0e9749722cff97fbe5f2bc6897e19d62bfb0d930db7c310e2ecb8e569551955e949a3a863de6649cfcf8f3f6161942bd68cb7e47f92d6511ba304bc44d1e5eff3b293a6a76debb2424455229bcebe1aba46351b09d567f902d7a2278b3470f7d6c0238ab74be0f1f683c07894a73cb65a16995ef8e4cf96bf46bd6d3df1aa8cec01084da19d18bf41c91326792abb254f91dc8caa383c74200c493a4c0701c3e0d2b63188529bb6eac19e29578421dd2648d74b2d0ef478c12b398203f5e5fe1ef06d251dc984b4cb47cbeeabdc94c09477903f9529fa003a0679664bd5c159f5acdd329b9cfcee4fc72406d67e977d2ef3ac787d4bdbc51a0da527305d270a0f262aa61dc7bfdf3d3566e94b4903aeedc4695dee043aab1cfa42383c5add94ae6e30b485576c6300fbc5f36ebc4707094d82944afc3784c6034321732edb779475d6a8cdfef833cbb872cee9731450e4149a3804740ffbaa50e39aaedbbed31d7c1fe9f437881fc6fff45dc84626325b05ef088c7b61afff4682a2f860d90977b3abbb20af00467b981ef27ec1724f0a0698b182ccc244b6ff139c53ab4b10ead1cb076e8de0090ff7b754e72d63cd80f8c28d0266d9aad32d414e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog, enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="AI指北" scheme="https://juoyo.github.io/categories/AI%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="指北" scheme="https://juoyo.github.io/tags/%E6%8C%87%E5%8C%97/"/>
    
    <category term="加密内容" scheme="https://juoyo.github.io/tags/%E5%8A%A0%E5%AF%86%E5%86%85%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>挑战Numpy100关答案</title>
    <link href="https://juoyo.github.io/posts/36f9f1c9.html"/>
    <id>https://juoyo.github.io/posts/36f9f1c9.html</id>
    <published>2019-09-16T16:51:28.000Z</published>
    <updated>2019-11-18T02:28:58.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="AI指北" scheme="https://juoyo.github.io/categories/AI%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="Numpy答案" scheme="https://juoyo.github.io/tags/Numpy%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>挑战NumPy100关</title>
    <link href="https://juoyo.github.io/posts/b8980d32.html"/>
    <id>https://juoyo.github.io/posts/b8980d32.html</id>
    <published>2019-09-16T16:21:11.000Z</published>
    <updated>2019-11-18T02:29:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>挑战NumPy100关，主要来自于NumPy邮件组，StackOverflow和NumPy文档。有题有答案，NumPy值得拥有。</p><a id="more"></a><ol><li> 使用名称<code>np</code>导入numpy包 (★☆☆)</li><li> 打印出numpy版本号和配置信息 (★☆☆)</li><li> 创建一个空向量, 尺寸为10 (★☆☆)</li><li> 查出一个数组占用的内存体积 (★☆☆)</li><li> 如何使用命令行来获得numpy中add这个函数的文档? (★☆☆)</li><li> 创建一个大小为10的空向量，但第五个值为1 (★☆☆)</li><li> 创建一个值为从10到49的向量[10,11,12…49] (★☆☆)</li><li> 反转一个向量（第一个元素变为最后一个） (★☆☆)</li><li> 创建一个3x3矩阵，其值范围为0到8 (★☆☆)</li><li> 从[1,2,0,0,4,0]中查找出所有非零元素 (★☆☆)</li><li> 创建一个 3 * 3单位矩阵 (★☆☆)</li><li> 使用随机值创建一个 $3<em>3</em>3$ 数组(★☆☆) </li><li> 使用随机值创建一个10x10数组，并找出其最小值和最大值 (★☆☆)</li><li> 创建一个大小为30的随机向量并找到平均值 (★☆☆)</li><li> 创建一个2维数组，边框元素都为1，内部元素都为0 (★☆☆)</li><li> 如何在一个既有数组周围添加边框（用0填充） (★☆☆)</li><li> 下方表达式的结果是什么? (★☆☆)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> * np.nan</span><br><span class="line">np.nan == np.nan</span><br><span class="line">np.inf &gt; np.nan</span><br><span class="line">np.nan - np.nan</span><br><span class="line">np.nan <span class="keyword">in</span> <span class="built_in">set</span>([np.nan])</span><br><span class="line"><span class="number">0.3</span> == <span class="number">3</span> * <span class="number">0.1</span></span><br></pre></td></tr></table></figure></li><li>创建一个5x5矩阵, 其对角线下方的数值正好是1,2,3,4 (★☆☆)</li><li>创建一个8x8矩阵并用棋盘图案填充它 (★☆☆)</li><li>假设有一个（6,7,8）形状的三维数组，那么其中第100个元素的索引（x，y，z）是什么?</li><li>使用tile函数创建棋盘格8x8矩阵 (★☆☆)</li><li>把一个5x5随机矩阵归一化 (★☆☆)</li><li>创建一个自定义dtype，用这个数据类型可以将颜色描述为四个无符号字节（RGBA）(★☆☆)</li><li>5x3矩阵乘以3x2矩阵（实矩阵乘积） (★☆☆)</li><li>给定一维数组，所有在3到8之间的元素都变成其负数(正-&gt;负, 负-&gt;正). (★☆☆)</li><li>这段脚本的输出是什么？(★☆☆)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author: Jake VanderPlas</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">5</span>),-<span class="number">1</span>))</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">print(<span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">5</span>),-<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li><li>设有整数向量Z，这些表达式中的哪些是合法的(★☆☆)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Z**Z</span><br><span class="line"><span class="number">2</span> &lt;&lt; Z &gt;&gt; <span class="number">2</span></span><br><span class="line">Z &lt;- Z</span><br><span class="line"><span class="number">1j</span>*Z</span><br><span class="line">Z/<span class="number">1</span>/<span class="number">1</span></span><br><span class="line">Z&lt;Z&gt;Z</span><br></pre></td></tr></table></figure><ol start="28"><li>以下表达式的结果是什么？</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.array(<span class="number">0</span>) / np.array(<span class="number">0</span>)</span><br><span class="line">np.array(<span class="number">0</span>) /np.array(<span class="number">0</span>)</span><br><span class="line">np.array([np.nan]).astype(<span class="built_in">int</span>).astype(<span class="built_in">float</span>)</span><br></pre></td></tr></table></figure><ol start="29"><li>如何让一个浮点类型数组里面的值全部取整? (★☆☆)</li><li>如何在两个数组之间找到相同的值? (★☆☆)</li><li>如何忽略所有的numpy警告（真正干活的时候不推荐这么干哈）？? (★☆☆)</li><li>以下表达式为真吗？(★☆☆)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sqrt(-<span class="number">1</span>) == np.emath.sqrt(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol start="33"><li> 如何获取昨天，今天和明天的日期? (★☆☆)</li><li> 如何获得与2016年7月里的所有日期? (★★☆)</li><li> 如何原地计算 ((A+B)*(-A/2)) (不做copy动作)? (★★☆)</li><li> 使用5种不同的方法提取一个随机数组里的整型数据部分 (★★☆)</li><li> 创建一个5x5矩阵，行值从0到4 (★★☆)</li><li> 已知一个生成器函数, 可以生成10个整数. 用它来构建数组 (★☆☆)</li><li> 创建一个大小为10的向量，值为0到1的小数(不包含0和1) (★★☆)</li><li> 创建一个大小为10的随机向量并对其进行排序 (★★☆)</li><li> 如何比np.sum更快地对一个小数组求和？(★★☆)</li><li> 设有两个随机数组A和B，检查它们是否相等 (★★☆)</li><li> 使数组不可变（只读） (★★☆)</li><li> 设有一个随机10x2矩阵, 其中的值代表笛卡尔坐标，现需将它们转换为极坐标 (★★☆)</li><li> 创建大小为10的随机向量，并将最大值替换为0 (★★☆)</li><li> 创建一个结构化数组，其x和y坐标覆盖[0,1] x [0,1]区域 (★★☆)</li><li> 打印每个numpy标量类型的最小和最大可表示值 (★★☆)</li><li> 如何打印数组的所有值？(★★☆)</li><li> 如何在向量中找到最接近的值（给定标量）？(★★☆)</li><li> 创建一个表示位置（x，y）和颜色（r，g，b）的结构化数组（★★☆）</li><li> 设有一个(100,2)的随机向量, 每组值代表一个坐标, 求点与点之间的距离 (★★☆)</li><li> 如何就地将float（32位）数组转换为整型（32位）数组?</li><li> 如何读取以下文件？? (★★☆)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="number">6</span>,  ,  , <span class="number">7</span>, <span class="number">8</span></span><br><span class="line"> ,  , <span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span></span><br></pre></td></tr></table></figure></li><li>什么东西与numpy数组的枚举等价？(★★☆)</li><li>生成一个通用的二维高斯型数组 (★★☆)</li><li>如何将p个元素随机放置在二维数组中 (★★☆)</li><li>减去矩阵每行的均值 (★★☆)</li><li>如何按第n列排序数组？(★★☆)</li><li>如何判断一个二维数组里是否有空列? (★★☆)</li><li>有一个给定值, 从数组中找出最接近的值 (★★☆)</li><li>设有两个形状为（1,3）和（3,1）的数组，如何使用迭代器计算它们的总和？(★★☆)</li><li>创建一个具有name属性的数组类(★★☆)</li><li>设有一个给定的向量，如何让每个能被第二个向量索引的元素加1（注意重复索引的情况）？（★★★）</li><li>如何根据索引列表（I）将向量（X）的指定元素转移到到数组（F）？（★★★）</li><li>设有一个（dtype = ubyte）的（w，h，3）图像，计算内部不同颜色的数量（★★★）</li><li>设有一个四维数组，如何一次获取最后两个轴上元素的总和？（★★★） </li><li>设有一个单一维度的向量D, 如何计算D的一个子集的平均值 (该子集使用一个和D相同大小的向量S来存子集元素的索引? (★★★)</li><li>如何获得两个向量的点积? (★★★)</li></ol><blockquote><p>点积就是两个向量对应位置一一相乘后求和的操作，最后结果是一个标量，是一个实数值。<br>两个向量a = [a1, a2,…, an]和b = [b1, b2,…, bn]的点积定义为：<br>a·b = a1b1 + a2b2 + …… + anbn。<br>使用矩阵乘法并把（纵列）向量当作n×1 矩阵，点积还可以写为：<br>a·b=a^T*b ，这里的a^T指示矩阵a的转置</p></blockquote><ol start="70"><li><p> 设有考虑向量A [1,2,3,4,5]，构建一个新向量, 在A的每个值之间插入3个连续零? (★★★)</p></li><li><p> 设有一个维度(5,5,3)的数组, 如何与维度(5,5)的数组相乘? (★★★)</p></li><li><p> 如何让数组里面的两行互换? (★★★)</p></li><li><p> 设有10个三元组(例如[x1, y1, z1]), 每个三元组代表一个三角形. 这些三角形可能还有共同的顶点. 现在需要找出组成这10个三角形的所有线段的合(还要去重哦) (★★★)</p></li><li><p> 设有一个bincount数组C, 请生成一个数组A, 使得np.bincount(A) == C? (★★★)<br>解释一下什么叫bincount</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># x里最大的数为10，那么它的索引值为0到10, 因此bin的数量为11</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>])</span><br><span class="line"><span class="comment"># 0出现了2次，1出现了3次......10出现了1次......</span></span><br><span class="line">print(np.bincount(x))</span><br><span class="line"><span class="comment">#因此，输出结果为：[2 3 0 0 2 0 1 0 0 0 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到x中最大的数为18，那么它的索引值为0到18, 因此bin的数量为19</span></span><br><span class="line">x = np.array([<span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># 0出现了0次，索引1出现了1次......索引10出现了2次......</span></span><br><span class="line">print(np.bincount(x))</span><br><span class="line"><span class="comment">#输出结果为：[0 1 1 0 1 0 0 0 0 0 2 0 0 0 0 0 0 0 1]</span></span><br></pre></td></tr></table></figure></li><li><p> 如何使用数组上的滑动窗口计算平均值？(★★★)</p></li><li><p> 设有一个一维数组Z，请构建一个二维数组，其第一行为（Z [0]，Z [1]，Z [2]），每个后续行都要移1单位（最后一行应为（Z [ -3]，Z [-2]，Z [-1]） (★★★)</p></li><li><p> 如何反转一个布尔值(true-&gt;false或false-&gt;true), 或改变浮点值前面的正负号(正浮点数变成负浮点数, 或负浮点数变正浮点数)? (★★★)</p></li><li><p> 设有两组的 点 数据, 这些点 两两可以构建成一个线段. 同时设有一个点p, 如何计算从p到每个线段的垂直距离?(★★★)</p><blockquote><p>下图为一个样例<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/7jnsg27ZEVESibqMH2j76r8kQQ0hWFuBQm1DDR37mMO9N6VwScFOdQ1QtFLfz6z2ua8MSJW6zJS9rgQ7xAytNzA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p></blockquote></li><li><p> 设有两组的 点 数据, 这些点 两两可以构建成一个线段. 同时设有一系列点P, 如何计算从P[j]到每个线段的垂直距离? (★★★)<br>可参考上一道题</p></li><li><p> 设有一个任意数组，编写一个函数，以给定元素为中心, 提取具有固定形状的子部分（必要时可以用固定值来做填充）(★★★)<br><img src="https://mmbiz.qpic.cn/mmbiz_jpg/7jnsg27ZEVESibqMH2j76r8kQQ0hWFuBQg7ywv3klmMo08Ax2xMPfRFHgZicIkUj6aN1PTc4t4xLe6eXtU6gKGHw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p></li><li><p> 设有一个Z = [1,2,3,4,5,6,7,8,9,10,11,12,13,14], 求一个数组R = [[1,2,3,4], [2,3,4,5], [3,4,5,6], …, [11,12,13,14]]? (★★★)</p></li><li><p> 求一个矩阵的秩 (★★★)</p><blockquote><p>秩(RANK), 我们知道线性代数中的矩阵, 有一种含义就是代表一个方程组, 矩阵的秩就是这个方程组中那些原有的成员的数量</p></blockquote></li><li><p>如何找出一个数组里出现次数最多的元素?</p><blockquote><ol start="84"><li> 从一个随机的10x10矩阵中提取所有连续的3x3块(★★★)</li><li> 创建一个二维数组子类，使Z [i，j] == Z [j，i] (★★★)</li><li> 设有P个矩阵, 形状为(n,n); 以及p个向量, 形状为(n,1). 问题是, 如何一次就算出p矩阵乘积之和(结果的形状应该是(n,1)) (★★★)</li><li> 设有一个16x16的数组, 如何获得分块加总 (每个块都是4* 4)? (★★★)</li><li> 如何使用numpy数组实现the Game of Life？(★★★)</li><li> 如何获取一个数组里面前N大 (the largest n) 的元素? (★★★)</li><li> 给定任意数量的向量，请用它们构建笛卡尔积（每个项的每个组合）(★★★)</li><li> 如何使用一个常规数组创建一个记录数组(record array)? (★★★)</li><li> 设有一个很大的向量 Z, 求Z的3次幂(至少尝试3种不同的方法) (★★★)</li><li> 设有两个数组A和B, A的形状（8,3）, B的形状是（2,2). 请找出A的某些行, 该行内包含B的整行元素(不在意元素顺序). (★★★)</li><li> 设有一个10x3矩阵，请找出其中数值不完全相等的行 (e.g. [2,2,3]) (★★★)</li><li> 将int的向量转换为二元矩阵来表示(★★★)</li><li> 设有一个二维数组，如何提取值和其他行都不同的行？(★★★)</li><li> 设有两个向量A和B, 请写出AB求inner, outer, sum和mul运算的爱因斯坦求和约定(einsum)等效形式. (★★★)</li><li> 设有两个矢量（X，Y）描述的一条路径，如何使用等距样本法对其进行采样</li><li> 给定整数n和2维数组X，从X中选择可以解释为具有n度的多项分布的行，即，仅包含整数并且总和为n的行。(★★★)</li><li> 计算一个1维数组X的平均值, 要求使用自展法求95%的置信区间. （即，对数组重复N次采样, 每次采样更换部分元素, 然后计算每个样本的平均值，最后计算均值上的百分位数） (★★★)</li></ol></blockquote></li></ol><p><strong>答案：<a href="https://aistudio.baidu.com/aistudio/projectDetail/118377">https://aistudio.baidu.com/aistudio/projectDetail/118377</a></strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;挑战NumPy100关，主要来自于NumPy邮件组，StackOverflow和NumPy文档。有题有答案，NumPy值得拥有。&lt;/p&gt;</summary>
    
    
    
    <category term="AI指北" scheme="https://juoyo.github.io/categories/AI%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="NumPy" scheme="https://juoyo.github.io/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch11 IO</title>
    <link href="https://juoyo.github.io/posts/9d0114be.html"/>
    <id>https://juoyo.github.io/posts/9d0114be.html</id>
    <published>2019-09-07T08:46:01.000Z</published>
    <updated>2019-09-14T16:36:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>IO流顺序读写数据，单向流动，称IO流。IO流以<code>byte</code>（字节）为最小单位，因此也称为<em>字节流</em>。</p><a id="more"></a><h2 id="快速引入"><a href="#快速引入" class="headerlink" title="快速引入"></a>快速引入</h2><h3 id="InputStream-OutputStream"><a href="#InputStream-OutputStream" class="headerlink" title="InputStream / OutputStream"></a>InputStream / OutputStream</h3><p>在Java中，<code>InputStream</code>代表输入字节流，<code>OuputStream</code>代表输出字节流，这是最基本的两种IO流。</p><p>IO流以<font color="red"><code>byte</code></font>（字节）为最小单位，因此也称为<em>字节流</em>。</p><h3 id="Reader-Writer"><a href="#Reader-Writer" class="headerlink" title="Reader / Writer"></a>Reader / Writer</h3><p>Java提供了<code>Reader</code>和<code>Writer</code>表示字符流，字符流传输的最小数据单位是<font color="red"><code>char</code></font>。</p><p><code>Reader</code>和<code>Writer</code>本质上是一个能自动编解码的<code>InputStream</code>和<code>OutputStream</code>。</p><p><font color="red"><strong>究竟使用<code>Reader</code>还是<code>InputStream</code>，要取决于具体的使用场景。如果数据源不是文本，就只能使用<code>InputStream</code>，如果数据源是文本，使用Reader更方便一些。<code>Writer</code>和<code>OutputStream</code>是类似的。</strong></font></p><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>同步IO是，读写IO时代码必须等待数据返回后才继续执行后续代码，优点是代码编写简单，缺点是CPU执行效率低。</p><p>异步IO是，读写IO时仅发出请求，然后立刻执行后续代码，优点是CPU执行效率高，缺点是代码编写复杂。</p><p>Java标准库的包<code>java.io</code>提供了同步IO，而<code>java.nio</code>则是异步IO。</p><p><code>InputStream</code>、<code>OutputStream</code>、<code>Reader</code>和<code>Writer</code>都是同步IO的抽象类，对应的具体实现类，以文件为例，有<code>FileInputStream</code>、<code>FileOutputStream</code>、<code>FileReader</code>和<code>FileWriter</code>。</p><hr><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>Java的标准库<code>java.io</code>提供了<code>File</code>对象来操作文件和目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;C:\\windows&quot;</span>);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造File对象时，既可以传入绝对路径，也可以传入相对路径。</p><p>Windows平台使用<code>\</code>作为路径分隔符，在Java字符串中需要用<code>\\</code>表示一个<code>\</code>，前一个\表示转义。</p><p>Linux平台使用<code>/</code>作为路径分隔符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(<span class="string">&quot;/usr/bin/javac&quot;</span>);</span><br></pre></td></tr></table></figure><p>File对象有3种形式表示的路径，一种是<code>getPath()</code>，返回构造方法传入的路径，一种是<code>getAbsolutePath()</code>，返回绝对路径，一种是<code>getCanonicalPath</code>，它和绝对路径类似，但是返回的是规范路径。</p><p>规范路径就是把<code>.</code>和<code>..</code>转换成标准路径</p><p>因为Windows和Linux的路径分隔符不同，File对象有一个静态变量用于表示当前平台的系统分隔符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(File.separator); <span class="comment">// 根据当前平台打印&quot;\&quot;或&quot;/&quot;</span></span><br></pre></td></tr></table></figure><h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><p>调用<code>isFile()</code>，判断该<code>File</code>对象是否是一个已存在的文件，调用<code>isDirectory()</code>，判断该<code>File</code>对象是否是一个已存在的目录。</p><p>用<code>File</code>对象获取到一个文件时，还可以进一步判断文件的权限和大小：</p><ul><li><code>boolean canRead()</code>：是否可读；</li><li><code>boolean canWrite()</code>：是否可写；</li><li><code>boolean canExecute()</code>：是否可执行；</li><li><code>long length()</code>：文件字节大小。</li></ul><p>对目录而言，是否可执行表示能否列出它包含的文件和子目录。</p><h3 id="创建和删除文件"><a href="#创建和删除文件" class="headerlink" title="创建和删除文件"></a>创建和删除文件</h3><p>createNewFile()创建新文件，delete()删除文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">&quot;/path/file&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (file.createNewFile()) &#123;</span><br><span class="line">    <span class="comment">// 创建文件已成功</span></span><br><span class="line">    <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">        <span class="comment">// 删除文件已成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>File对象提供了<code>createTempFile()</code>来创建一个临时文件，以及<code>deleteOnExit()</code>在JVM退出时自动删除该文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f = File.createTempFile(<span class="string">&quot;tmp-&quot;</span>, <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        f.deleteOnExit();  <span class="comment">// JVM退出时自动删除</span></span><br><span class="line">        System.out.println(f.isFile());</span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历文件和目录"><a href="#遍历文件和目录" class="headerlink" title="遍历文件和目录"></a>遍历文件和目录</h3><p>File对象表示一个目录时，可以使用<code>list()</code>和<code>listFiles()</code>列出目录下的文件和子目录名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Windows&quot;</span>);</span><br><span class="line">        File[] fs1 = f.listFiles();  <span class="comment">// 列出所有文件和子目录</span></span><br><span class="line">        printFiles(fs1);</span><br><span class="line">        File[] fs2 = f.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;  <span class="comment">// 列出.exe文件</span></span><br><span class="line">                <span class="keyword">return</span> name.endsWith(<span class="string">&quot;.exe&quot;</span>);  <span class="comment">// 返回true表示接受该文件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        printFiles(fs2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFiles</span><span class="params">(File[] files)</span> </span>&#123;</span><br><span class="line">        System.out.pringln(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>File对象如果表示一个目录，可以通过以下方法创建和删除目录：</p><ul><li><code>boolean mkdir()</code>：创建当前File对象表示的目录；</li><li><code>boolean mkdirs()</code>：创建当前File对象表示的目录，并在必要时将不存在的父目录也创建出来；</li><li><code>boolean delete()</code>：删除当前File对象表示的目录，当前目录必须为空才能删除成功。</li></ul><hr><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>位于<code>java.nio.file</code>包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Path p1 = Paths.get(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;project&quot;</span>, <span class="string">&quot;study&quot;</span>); <span class="comment">// 构造一个Path对象</span></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        Path p2 = p1.toAbsolutePath(); <span class="comment">// 转换为绝对路径</span></span><br><span class="line">        System.out.println(p2);</span><br><span class="line">        Path p3 = p2.normalize(); <span class="comment">// 转换为规范路径</span></span><br><span class="line">        System.out.println(p3);</span><br><span class="line">        File f = p3.toFile(); <span class="comment">// 转换为File对象</span></span><br><span class="line">        System.out.println(f);</span><br><span class="line">        <span class="keyword">for</span> (Path p : Paths.get(<span class="string">&quot;..&quot;</span>).toAbsolutePath()) &#123; <span class="comment">// 可以直接遍历Path</span></span><br><span class="line">            System.out.println(<span class="string">&quot;  &quot;</span> + p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用path适用于目录复杂的拼接、遍历等。</p><hr><h2 id="inputStream"><a href="#inputStream" class="headerlink" title="inputStream"></a>inputStream</h2><p><code>java.io</code>包提供了所有同步IO的功能。<code>InputStream</code>就是Java标准库提供的最基本的输入流。</p><p><code>FileInputStream</code>就是从文件流中读取数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = input.read();  <span class="comment">// 反复调用read()方法，直到返回-1</span></span><br><span class="line">        <span class="keyword">if</span> (n == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">    input.close();  <span class="comment">//关闭流</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InputStream</code>和<code>OutputStream</code>都是通过<code>close()</code>方法来关闭流。</p><p>所有与IO操作相关的代码都必须正确处理<code>IOException</code>。</p><p>需要用<code>try ... finally</code>来保证<code>InputStream</code>在无论是否发生IO错误的时候都能够正确地关闭：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream input = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        input = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/readme.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> ((n = input.read()) != -<span class="number">1</span>) &#123; <span class="comment">// 利用while同时读取并判断</span></span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123; input.close(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用Java 7引入的新的<code>try(resource)</code>的语法，只需要编写<code>try</code>语句，让编译器自动为我们关闭资源。推荐的写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (InputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/readme.txt&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> ((n = input.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// 编译器在此自动为我们写入finally并调用close()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>try(resource = ...)</code>中的对象是否实现了<code>java.lang.AutoCloseable</code>接口，如果实现了，就自动加上<code>finally</code>语句并调用<code>close()</code>方法。<code>InputStream</code>和<code>OutputStream</code>都实现了这个接口。</p><h3 id="InputStream实现类"><a href="#InputStream实现类" class="headerlink" title="InputStream实现类"></a>InputStream实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = &#123; <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">33</span> &#125;;</span><br><span class="line">        <span class="keyword">try</span> (InputStream input = <span class="keyword">new</span> ByteArrayInputStream(data)) &#123;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = input.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println((<span class="keyword">char</span>)n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><p><code>OutputStream</code>还提供了一个<code>flush()</code>方法，它的目的是将缓冲区的内容真正输出到目的地，能强制把缓冲区内容输出。</p><h3 id="OutputStream实现类"><a href="#OutputStream实现类" class="headerlink" title="OutputStream实现类"></a>OutputStream实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data;</span><br><span class="line">        <span class="keyword">try</span> (ByteArrayOutputStream output = <span class="keyword">new</span> ByteArrayOutputStream()) &#123;</span><br><span class="line">            output.write(<span class="string">&quot;Hello &quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            output.write(<span class="string">&quot;world!&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            data = output.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(data, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="操作zip文件"><a href="#操作zip文件" class="headerlink" title="操作zip文件"></a>操作zip文件</h2><p><code>ZipInputStream</code>是一种<code>FilterInputStream</code>，它可以直接读取zip包的内容，<code>JarInputStream</code>是从<code>ZipInputStream</code>派生，它增加的主要功能是直接读取jar文件里面的<code>MANIFEST.MF</code>文件。</p><h3 id="读取zip包"><a href="#读取zip包" class="headerlink" title="读取zip包"></a>读取zip包</h3><p>我们要创建一个<code>ZipInputStream</code>，通常是传入一个<code>FileInputStream</code>作为数据源，然后，循环调用<code>getNextEntry()</code>，直到返回<code>null</code>，表示zip流结束。</p><p>一个<code>ZipEntry</code>表示一个压缩文件或目录，如果是压缩文件，我们就用<code>read()</code>方法不断读取，直到返回<code>-1</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (ZipInputStream zip = <span class="keyword">new</span> ZipInputStream(<span class="keyword">new</span> FileInputStream(...))) &#123;</span><br><span class="line">    ZipEntry entry = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((entry = zip.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String name = entry.getName();</span><br><span class="line">        <span class="keyword">if</span> (!entry.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = zip.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入zip包"><a href="#写入zip包" class="headerlink" title="写入zip包"></a>写入zip包</h3><p><code>ZipOutputStream</code>是一种<code>FilterOutputStream</code>，它可以直接写入内容到zip包。我们要先创建一个<code>ZipOutputStream</code>，通常是包装一个<code>FileOutputStream</code>，然后，每写入一个文件前，先调用<code>putNextEntry()</code>，然后用<code>write()</code>写入<code>byte[]</code>数据，写入完毕后调用<code>closeEntry()</code>结束这个文件的打包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (ZipOutputStream zip = <span class="keyword">new</span> ZipOutputStream(<span class="keyword">new</span> FileOutputStream(...))) &#123;</span><br><span class="line">    File[] files = ...</span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        zip.putNextEntry(<span class="keyword">new</span> ZipEntry(file.getName()));</span><br><span class="line">        zip.write(getFileDataAsBytes(file));</span><br><span class="line">        zip.closeEntry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="读取classpath资源"><a href="#读取classpath资源" class="headerlink" title="读取classpath资源"></a>读取classpath资源</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (InputStream input = getClass().getResourceAsStream(<span class="string">&quot;/default.properties&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (input != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>getResourceAsStream()</code>就可以直接从classpath读取任意的资源文件。</p><hr><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列化是指把一个Java对象变成二进制内容，本质上就是一个<span class="keyword">byte</span>[]数组。</span><br></pre></td></tr></table></figure><p>一个Java对象要能序列化，必须实现一个特殊的<code>java.io.Serializable</code>接口，它的定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public interface Serializable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Serializable</code>接口没有定义任何方法，它是一个空接口。</p><h3 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream buffer = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> (ObjectOutputStream output = <span class="keyword">new</span> ObjectOutputStream(buffer)) &#123;</span><br><span class="line">            <span class="comment">// 写入int:</span></span><br><span class="line">            output.writeInt(<span class="number">12345</span>);</span><br><span class="line">            <span class="comment">// 写入String:</span></span><br><span class="line">            output.writeUTF(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">            <span class="comment">// 写入Object:</span></span><br><span class="line">            output.writeObject(Double.valueOf(<span class="number">123.456</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(buffer.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(...)) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = input.readInt();</span><br><span class="line">    String s = input.readUTF();</span><br><span class="line">    Double d = (Double) input.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java的序列化允许class定义一个特殊的<code>serialVersionUID</code>静态变量，用于标识Java类的序列化“版本”，通常可以由IDE自动生成。如果增加或修改了字段，可以改变<code>serialVersionUID</code>的值，这样就能自动阻止不匹配的class版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2709425275741743919L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要特别注意反序列化的几个重要特点：</p><p><font color="green">反序列化时，由JVM直接构造出Java对象，不调用构造方法，构造方法内部的代码，在反序列化时根本不可能执行。</font></p><p>通用的序列化方法，例如JSON。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;IO流顺序读写数据，单向流动，称IO流。IO流以&lt;code&gt;byte&lt;/code&gt;（字节）为最小单位，因此也称为&lt;em&gt;字节流&lt;/em&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="IO" scheme="https://juoyo.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>P4 LRU缓存机制 LeetCode146</title>
    <link href="https://juoyo.github.io/posts/a89a7d98.html"/>
    <id>https://juoyo.github.io/posts/a89a7d98.html</id>
    <published>2019-09-07T07:12:28.000Z</published>
    <updated>2019-09-22T14:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>P4 LRU缓存机制，难度中等，主要标签为LRU设计。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>运用你所掌握的数据结构，设计和实现一个  <a href="https://baike.baidu.com/item/LRU">LRU (最近最少使用) 缓存机制</a>。它应该支持以下操作： 获取数据 <code>get</code> 和 写入数据 <code>put</code> 。</p><p>获取数据 <code>get(key)</code> - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 <code>put(key, value)</code> - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p><p><strong>进阶:</strong></p><p>你是否可以在 <strong>O(1)</strong> 时间复杂度内完成这两种操作？</p><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LRUCache cache = <span class="keyword">new</span> LRUCache( <span class="number">2</span> <span class="comment">/* 缓存容量 */</span> );</span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">cache.get(<span class="number">1</span>);       <span class="comment">// 返回  1</span></span><br><span class="line">cache.put(<span class="number">3</span>, <span class="number">3</span>);    <span class="comment">// 该操作会使得密钥 2 作废</span></span><br><span class="line">cache.get(<span class="number">2</span>);       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">cache.put(<span class="number">4</span>, <span class="number">4</span>);    <span class="comment">// 该操作会使得密钥 1 作废</span></span><br><span class="line">cache.get(<span class="number">1</span>);       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">cache.get(<span class="number">3</span>);       <span class="comment">// 返回  3</span></span><br><span class="line">cache.get(<span class="number">4</span>);       <span class="comment">// 返回  4</span></span><br></pre></td></tr></table></figure><p>LeetCode题目链接<a href="https://leetcode-cn.com/problems/lru-cache/">https://leetcode-cn.com/problems/lru-cache/</a></p><hr><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="20190907记录"><a href="#20190907记录" class="headerlink" title="20190907记录"></a>20190907记录</h3><p>主要思想为，维护一个有序字典，最近最久未使用的处于字典首部。</p><p><font color="blue">获取数据get(self, key)</font>判断key是否存在，如存在，在字典中弹出已存在的key-value，再向字典中重新添加key-value，并返回value。（此时，key-value最近被使用，处在字典尾部）。</p><p><font color="blue">写入数据put(self, key, value)</font>判断key是否存在，如存在，在字典中弹出已存在的key-value，如果key不在缓存字典中，且字典达到上限，弹出最近最久未使用字典首元素。最后向字典中添加新提供的key-value。（此时，新提供的key-value新加入字典，属于最近被使用，处于字典尾部）。</p><p>解题代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, capacity</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type capacity: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.<span class="built_in">dict</span> = collections.OrderedDict()  <span class="comment"># 有序字典</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type key: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:  <span class="comment"># 如果key在缓存字典中</span></span><br><span class="line">            value = self.<span class="built_in">dict</span>.pop(key)  <span class="comment"># 弹出key-value对</span></span><br><span class="line">            self.<span class="built_in">dict</span>[key] = value  <span class="comment"># 重新加入key-value对，此时处于有序字典尾部</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type key: int</span></span><br><span class="line"><span class="string">        :type value: int</span></span><br><span class="line"><span class="string">        :rtype: None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果key在缓存字典中，弹出</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:</span><br><span class="line">            self.<span class="built_in">dict</span>.pop(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果key不在缓存字典中，且字典达到上限，弹出最近最久未使用字典首元素</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">dict</span>) &gt;= self.capacity:</span><br><span class="line">                self.<span class="built_in">dict</span>.popitem(last=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 加入key-value</span></span><br><span class="line">        self.<span class="built_in">dict</span>[key] = value</span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line">obj = LRUCache(<span class="number">2</span>)</span><br><span class="line">obj.put(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">obj.put(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">print(obj.get(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h3><p>Python collections有序字典（OrderedDict）</p><p>OrderedDict记录了字典元素的添加顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span>(<span class="params">self</span>):</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">　　　　od.clear() -&gt; None.  Remove all items from od. </span></span><br><span class="line"><span class="string">　　　　清除有序字典中的元素</span></span><br><span class="line"><span class="string">　　&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy</span>(<span class="params">self</span>):</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">　　　　od.copy() -&gt; a shallow copy of od </span></span><br><span class="line"><span class="string">　　　　有序字典的浅拷贝</span></span><br><span class="line"><span class="string">　　&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">items</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">    <span class="comment"># 取有序字典的元素</span></span><br><span class="line">　　 <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keys</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">　　<span class="comment"># 取key</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_end</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Move an existing element to the end (or beginning if last==False).</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">            Raises KeyError if the element does not exist.</span></span><br><span class="line"><span class="string">            When last=True, acts like a fast version of self[key]=self.pop(key).</span></span><br><span class="line"><span class="string">　　把指定的元素放到尾部</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self, k, d=<span class="literal">None</span></span>):</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    od.pop(k[,d]) -&gt; v, remove specified key and return the corresponding</span></span><br><span class="line"><span class="string">            value.  If key is not found, d is returned if given, otherwise KeyError</span></span><br><span class="line"><span class="string">            is raised.</span></span><br><span class="line"><span class="string">　　弹出指定的key</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">popitem</span>(<span class="params">self</span>):</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    od.popitem() -&gt; (k, v), return and remove a (key, value) pair.</span></span><br><span class="line"><span class="string">            Pairs are returned in LIFO order if last is true or FIFO order if false.</span></span><br><span class="line"><span class="string">　　从尾部开始弹出</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;P4 LRU缓存机制，难度中等，主要标签为LRU设计。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="LRU缓存" scheme="https://juoyo.github.io/tags/LRU%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>P3 第k个排列 LeetCode60</title>
    <link href="https://juoyo.github.io/posts/f46c16da.html"/>
    <id>https://juoyo.github.io/posts/f46c16da.html</id>
    <published>2019-08-30T17:13:23.000Z</published>
    <updated>2019-09-07T08:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>P3第k个排列，难度中等，主要标签为回溯算法。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出集合 <code>[1,2,3,…,n]</code>，其所有元素共有 <em>n</em>! 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 <em>n</em> = 3 时, 所有排列如下：</p><ol><li><code>&quot;123&quot;</code></li><li><code>&quot;132&quot;</code></li><li><code>&quot;213&quot;</code></li><li><code>&quot;231&quot;</code></li><li><code>&quot;312&quot;</code></li><li><code>&quot;321&quot;</code></li></ol><p>给定 <em>n</em> 和 <em>k</em>，返回第 <em>k</em> 个排列。</p><p><strong>说明：</strong></p><ul><li>给定 <em>n</em> 的范围是 [1, 9]。</li><li>给定 <em>k</em> 的范围是[1,  <em>n</em>!]。</li></ul><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: n &#x3D; 3, k &#x3D; 3</span><br><span class="line">输出: &quot;213&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: n &#x3D; 4, k &#x3D; 9</span><br><span class="line">输出: &quot;2314&quot;</span><br></pre></td></tr></table></figure><p>LeetCode题目链接<a href="https://leetcode-cn.com/problems/permutation-sequence/">https://leetcode-cn.com/problems/permutation-sequence/</a></p><hr><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>解题代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="comment">//nums[]存储1，2，3...n，最高位数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    nums.add(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getAns(nums, n, k);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getAns</span><span class="params">(List&lt;Integer&gt; nums, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums.get(<span class="number">0</span>) + <span class="string">&quot;&quot;</span>;  <span class="comment">// nums.get(0) 获取数组下标为0的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> perGroupNum = factorial(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> groupNum = (k - <span class="number">1</span>) / perGroupNum;  <span class="comment">// 计算第k个数在第几组</span></span><br><span class="line">    <span class="keyword">int</span> num = nums.get(groupNum);  <span class="comment">// 获取当前最高位</span></span><br><span class="line">    nums.remove(groupNum);  <span class="comment">//最高位列表中去除当前最高位数字</span></span><br><span class="line">    k = k % perGroupNum;  <span class="comment">// 计算余数，即下一组中位置</span></span><br><span class="line">    k = (k == <span class="number">0</span> ? perGroupNum : k);  <span class="comment">//  计算余数为0，则为本组最后的位置，更新k=每组的个数</span></span><br><span class="line">    <span class="keyword">return</span> num + getAns(nums, n-<span class="number">1</span>, k);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 斐波拉切数列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number * factorial(number - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试主函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermutationSequence</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Solution s = <span class="keyword">new</span> Solution();</span><br><span class="line">System.out.print(s.getPermutation(<span class="number">4</span>, <span class="number">9</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2314</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;P3第k个排列，难度中等，主要标签为回溯算法。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="回溯算法" scheme="https://juoyo.github.io/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>P2 最长连续序列 LeetCode128</title>
    <link href="https://juoyo.github.io/posts/30288ee6.html"/>
    <id>https://juoyo.github.io/posts/30288ee6.html</id>
    <published>2019-08-28T16:39:05.000Z</published>
    <updated>2019-08-31T01:21:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>P2最长连续序列，难度困难，主要标签为并查集、数组。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 *O(n)*。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [100, 4, 200, 1, 3, 2]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure><p>LeetCode题目链接<a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/">https://leetcode-cn.com/problems/longest-consecutive-sequence/</a></p><hr><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>具体思想见注释。</p><ol><li>将输入的数组加入到集合中去重。</li><li>遍历数组，当前为num，判断num-1是否在集合中，当num-1不在集合中，num则为连续序列第一个数，开始计数，直到num+1不在集合中，此时count计数器的值即为从num开始的连续最长序列的长度。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;  <span class="comment">//去重</span></span><br><span class="line">        set.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> seqlen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = nums[i];</span><br><span class="line">        <span class="keyword">if</span> (set.contains(num-<span class="number">1</span>) == <span class="keyword">false</span>) &#123;  <span class="comment">//对num，如果num-1不在set中，从num开始计数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (set.contains(num+<span class="number">1</span>)) &#123;  <span class="comment">//num+1在set中，count++</span></span><br><span class="line">        count++;</span><br><span class="line">        num = num + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        seqlen = Math.max(seqlen, count);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> seqlen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试主函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Solution s = <span class="keyword">new</span> Solution();</span><br><span class="line"><span class="keyword">int</span>[] nums = &#123;<span class="number">100</span>, <span class="number">4</span>, <span class="number">200</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n = s.longestConsecutive(nums);</span><br><span class="line">System.out.print(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;P2最长连续序列，难度困难，主要标签为并查集、数组。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="https://juoyo.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="并查集" scheme="https://juoyo.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Python数据科学速查表 importing Data</title>
    <link href="https://juoyo.github.io/posts/285f84e1.html"/>
    <id>https://juoyo.github.io/posts/285f84e1.html</id>
    <published>2019-08-24T15:04:28.000Z</published>
    <updated>2019-08-24T15:42:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python数据科学速查表 importing Data覆盖Python获取数据的各种方式，从纯文本文件，如txt和csv文件，到其他软件原生文件，如Excel，SAS，MATLAB，包括关系型数据库，如SQLite，PostgreSQL。</p><a id="more"></a><h2 id="Importing-Data-Cheat-Sheet-GitHub"><a href="#Importing-Data-Cheat-Sheet-GitHub" class="headerlink" title="Importing Data Cheat Sheet GitHub"></a><a href="https://github.com/yaozhu008/Data-Science-with-Python-Cheat-Sheets">Importing Data Cheat Sheet GitHub</a></h2><p><img src="/posts/285f84e1.htm/ImportingData.bmp"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python数据科学速查表 importing Data覆盖Python获取数据的各种方式，从纯文本文件，如txt和csv文件，到其他软件原生文件，如Excel，SAS，MATLAB，包括关系型数据库，如SQLite，PostgreSQL。&lt;/p&gt;</summary>
    
    
    
    <category term="Python For Data Science" scheme="https://juoyo.github.io/categories/Python-For-Data-Science/"/>
    
    
    <category term="Cheat Sheet" scheme="https://juoyo.github.io/tags/Cheat-Sheet/"/>
    
    <category term="导入数据" scheme="https://juoyo.github.io/tags/%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Python数据科学速查表 Python Basics</title>
    <link href="https://juoyo.github.io/posts/54975c9c.html"/>
    <id>https://juoyo.github.io/posts/54975c9c.html</id>
    <published>2019-08-24T00:26:57.000Z</published>
    <updated>2019-08-24T15:40:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python数据科学速查表Python基础部分。</p><a id="more"></a><h2 id="Python-Basics-Cheat-Sheet-GitHub"><a href="#Python-Basics-Cheat-Sheet-GitHub" class="headerlink" title="Python Basics Cheat Sheet GitHub"></a><a href="https://github.com/yaozhu008/Data-Science-with-Python-Cheat-Sheets">Python Basics Cheat Sheet GitHub</a></h2><p><img src="/posts/54975c9c.htm/PythonBasics.bmp"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python数据科学速查表Python基础部分。&lt;/p&gt;</summary>
    
    
    
    <category term="Python For Data Science" scheme="https://juoyo.github.io/categories/Python-For-Data-Science/"/>
    
    
    <category term="Cheat Sheet" scheme="https://juoyo.github.io/tags/Cheat-Sheet/"/>
    
    <category term="Python基础" scheme="https://juoyo.github.io/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>P1 三数之和 LeetCode15</title>
    <link href="https://juoyo.github.io/posts/c415b63f.html"/>
    <id>https://juoyo.github.io/posts/c415b63f.html</id>
    <published>2019-08-20T15:23:12.000Z</published>
    <updated>2019-12-21T14:12:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>P1三数之和，难度中等，相关标签为数组、双指针。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</span><br><span class="line"></span><br><span class="line">注意：答案中不可以包含重复的三元组。</span><br><span class="line"></span><br><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>LeetCode题目链接<a href="https://leetcode-cn.com/problems/3sum/">https://leetcode-cn.com/problems/3sum/</a></p><hr><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="暴力解法三重循环"><a href="#暴力解法三重循环" class="headerlink" title="暴力解法三重循环"></a>暴力解法三重循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        result = []</span><br><span class="line">        ls = []</span><br><span class="line">        <span class="keyword">for</span> i, a <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">for</span> j, b <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums[i+<span class="number">1</span>:]):</span><br><span class="line">                <span class="keyword">for</span> _, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums[j+i+<span class="number">2</span>:]):</span><br><span class="line">                    <span class="keyword">if</span> a + b + c == <span class="number">0</span> <span class="keyword">and</span> Counter([a, b, c]) <span class="keyword">not</span> <span class="keyword">in</span> ls:</span><br><span class="line">                            ls.append(Counter([a, b, c]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">            result.append(<span class="built_in">list</span>(i.elements()))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            i.sort()</span><br><span class="line">        result.sort()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">ss = s.threeSum([-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">4</span>])</span><br><span class="line">print(ss)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p>时间复杂度为<br>$$<br>O(n^3)<br>$$</p><hr><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span>(<span class="params">self, nums</span>):</span></span><br><span class="line">        nums_hash = &#123;&#125;</span><br><span class="line">        result = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:  <span class="comment"># 计算列表中每个值出现次数</span></span><br><span class="line">            nums_hash[num] = nums_hash.get(num, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> nums_hash <span class="keyword">and</span> nums_hash[<span class="number">0</span>] &gt;= <span class="number">3</span>:  <span class="comment"># 0的次数大于3，追加</span></span><br><span class="line">            result.append([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        neg = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x&lt;<span class="number">0</span>, nums_hash))  <span class="comment"># 存储&lt;0</span></span><br><span class="line">        pos = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x&gt;=<span class="number">0</span>, nums_hash))  <span class="comment"># 存储&gt;=0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> neg:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> pos:</span><br><span class="line">                dif = <span class="number">0</span> - i - j</span><br><span class="line">                <span class="keyword">if</span> dif <span class="keyword">in</span> nums_hash:  <span class="comment"># 目标出现在nums_hash中</span></span><br><span class="line">                    <span class="keyword">if</span> dif <span class="keyword">in</span> (i, j) <span class="keyword">and</span> nums_hash[dif] &gt;= <span class="number">2</span>:</span><br><span class="line">                        result.append([i, j, dif])</span><br><span class="line">                    <span class="keyword">if</span> dif &lt; i <span class="keyword">or</span> dif &gt; j:</span><br><span class="line">                        result.append([i, j, dif])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">ss = s.threeSum([-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">4</span>])</span><br><span class="line">print(ss)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p>时间复杂度为<br>$$<br>O(n^2)<br>$$</p><hr><h2 id="积累"><a href="#积累" class="headerlink" title="积累"></a>积累</h2><ol><li>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enumerate</span>(sequence, [start=<span class="number">0</span>])</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>seasons = [‘Spring’, ‘Summer’, ‘Fall’, ‘Winter’]</p><p>list(enumerate(seasons))<br>[(0, ‘Spring’), (1, ‘Summer’), (2, ‘Fall’), (3, ‘Winter’)]</p><p>list(enumerate(seasons, start=1))       # 下标从 1 开始<br>[(1, ‘Spring’), (2, ‘Summer’), (3, ‘Fall’), (4, ‘Winter’)]</p></blockquote></blockquote></blockquote><ol start="2"><li><p>class collections.Counter([iterable-or-mapping])</p><p>Counter 集成于 dict 类，因此也可以使用字典的方法，此类返回一个以元素为 key 、元素个数为 value 的 Counter 对象集合。</p></li></ol><blockquote><blockquote><blockquote><p>from collections import Counter<br>s = “hello pinsily”<br>d = Counter(s)</p><p>d<br>Counter({‘l’: 3, ‘i’: 2, ‘h’: 1, ‘e’: 1, ‘o’: 1, ‘ ‘: 1, ‘p’: 1, ‘n’: 1, ‘s’: 1, ‘y’: 1})</p></blockquote></blockquote></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;P1三数之和，难度中等，相关标签为数组、双指针。&lt;/p&gt;</summary>
    
    
    
    <category term="基础算法" scheme="https://juoyo.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数组" scheme="https://juoyo.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="三数之和" scheme="https://juoyo.github.io/tags/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    
    <category term="双指针" scheme="https://juoyo.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="哈希" scheme="https://juoyo.github.io/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>JS教程ch0 快速入门</title>
    <link href="https://juoyo.github.io/posts/45dca069.html"/>
    <id>https://juoyo.github.io/posts/45dca069.html</id>
    <published>2019-08-18T15:24:44.000Z</published>
    <updated>2019-08-20T15:28:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript代码可以直接嵌在网页的任何地方，也可以把JavaScript代码放到一个单独的<code>.js</code>文件。</p><a id="more"></a><p>第一种方法，通常我们都把JavaScript代码放到<code>&lt;head&gt;</code>中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;Hello, world&#x27;</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><script>...</script>包含的代码就是JavaScript代码，它将直接被浏览器执行。<p>第二种方法，把JavaScript代码放到一个单独的<code>.js</code>文件，然后在HTML中通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>引入这个文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/abc.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，<code>/static/js/abc.js</code>就会被浏览器执行。</p><script>标签可以设置一个type属性：<script type="text/javascript">  ...</script><p>但这是没有必要的，因为默认的type就是JavaScript，所以不必显式地把type指定为JavaScript。</p><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>JavaScript的语法和Java语言类似，每个语句以<code>;</code>结束，语句块用<code>&#123;...&#125;</code>。但是，JavaScript并不强制要求在每个语句的结尾加<code>;</code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上<code>;</code>。</p><p><code>&#123;...&#125;</code>还可以嵌套，形成层级结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">2</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    y = <span class="number">2</span>;</span><br><span class="line">    z = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">        z = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">        z = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>以<code>//</code>开头直到行末的字符被视为行注释</p><p>块注释是用<code>/*...*/</code>把多行字符包裹起来，把一大“块”视为一个注释</p><hr><h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><p>请注意，JavaScript严格区分大小写，如果弄错了大小写，程序将报错或者运行不正常。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;JavaScript代码可以直接嵌在网页的任何地方，也可以把JavaScript代码放到一个单独的&lt;code&gt;.js&lt;/code&gt;文件。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://juoyo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://juoyo.github.io/tags/JavaScript/"/>
    
    <category term="快速入门" scheme="https://juoyo.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch10 集合</title>
    <link href="https://juoyo.github.io/posts/c9981ec.html"/>
    <id>https://juoyo.github.io/posts/c9981ec.html</id>
    <published>2019-08-18T08:00:46.000Z</published>
    <updated>2019-08-31T03:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果一个Java对象可以在内部持有若干其他Java对象，并对外提供访问接口，我们把这种Java对象称为集合。</p><a id="more"></a><h2 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif" alt="img"></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Java标准库自带的<code>java.util</code>包提供了集合类：<code>Collection</code>，它是所有其他集合类的根接口。在<code>Collection</code>的基础上，Java的<code>java.util</code>包主要提供了以下三种类型的集合：</p><ul><li><code>List</code>：一种有序列表的集合，例如，按索引排列的<code>Student</code>的<code>List</code>；</li><li><code>Set</code>：一种保证没有重复元素的集合，例如，所有无重复名称的<code>Student</code>的<code>Set</code>；</li><li><code>Map</code>：一种通过键值（key-value）查找的映射表集合，例如，根据<code>Student</code>的<code>name</code>查找对应<code>Student</code>的<code>Map</code>。</li></ul><p>Java访问集合总是通过统一的方式——迭代器（Iterator）来实现，好处在于无需知道集合内部元素是按什么方式存储的。</p><p><font color="red">遗留类、遗留接口不应该继续使用：</font></p><ul><li><code>Hashtable</code>：一种线程安全的<code>Map</code>实现；</li><li><code>Vector</code>：一种线程安全的<code>List</code>实现；</li><li><code>Stack</code>：基于<code>Vector</code>实现的<code>LIFO</code>的栈。</li><li><code>Enumeration&lt;E&gt;</code>：已被<code>Iterator&lt;E&gt;</code>取代。</li></ul><hr><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List是一种有序链表，有序结构，类似数组。</p><p>需要增删元素的有序列表，使用最多的是<code>ArrayList</code>，<code>ArrayList</code>在内部使用了数组来存储所有元素。</p><p><code>ArrayList</code>把添加和删除的操作封装起来，操作<code>List</code>类似于操作数组，却不用关心内部元素如何移动。</p><p>考察<code>List&lt;E&gt;</code>接口，可以看到几个主要的接口方法：</p><ul><li>在末尾添加一个元素：<code>void add(E e)</code></li><li>在指定索引添加一个元素：<code>void add(int index, E e)</code></li><li>删除指定索引的元素：<code>int remove(int index)</code></li><li>删除某个元素：<code>int remove(Object e)</code></li><li>获取指定索引的元素：<code>E get(int index)</code></li><li>获取链表大小（包含元素的个数）：<code>int size()</code></li></ul><p><code>LinkedList</code>通过“链表”也实现了List接口。</p><p>比较<code>ArrayList</code>和<code>LinkedList</code>：</p><table><thead><tr><th align="left"></th><th align="left">ArrayList</th><th align="left">LinkedList</th></tr></thead><tbody><tr><td align="left">访问指定元素</td><td align="left">速度很快</td><td align="left">需要从头开始查找元素</td></tr><tr><td align="left">添加元素到末尾</td><td align="left">速度很快</td><td align="left">速度很快</td></tr><tr><td align="left">在指定位置添加/删除</td><td align="left">需要移动元素</td><td align="left">不需要移动元素</td></tr><tr><td align="left">内存占用</td><td align="left">少</td><td align="left">较大</td></tr></tbody></table><hr><h3 id="创建List"><a href="#创建List" class="headerlink" title="创建List"></a>创建List</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>根据给定元素快速创建<code>List</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><code>List.of()</code>方法不接受<code>null</code>值，如果传入<code>null</code>，会抛出<code>NullPointerException</code>异常。</p><hr><h3 id="遍历List"><a href="#遍历List" class="headerlink" title="遍历List"></a>遍历List</h3><p>和数组类型，我们要遍历一个List，完全可以用for循环根据索引配合<code>get(int)</code>方法遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>List</code>内部并不是通过<code>==</code>判断两个元素是否相等，而是使用<code>equals()</code>方法判断两个元素是否相等。</p><p><code>equals()</code>方法要求我们必须满足以下条件：</p><ul><li><p>自反性（Reflexive）：对于非<code>null</code>的<code>x</code>来说，<code>x.equals(x)</code>必须返回<code>true</code>；</p></li><li><p>对称性（Symmetric）：对于非<code>null</code>的<code>x</code>和<code>y</code>来说，如果<code>x.equals(y)</code>为<code>true</code>，则<code>y.equals(x)</code>也必须为<code>true</code>；</p></li><li><p>传递性（Transitive）：对于非<code>null</code>的<code>x</code>、<code>y</code>和<code>z</code>来说，如果<code>x.equals(y)</code>为<code>true</code>，<code>y.equals(z)</code>也为<code>true</code>，那么<code>x.equals(z)</code>也必须为<code>true</code>；</p></li><li><p>一致性（Consistent）：对于非<code>null</code>的<code>x</code>和<code>y</code>来说，只要<code>x</code>和<code>y</code>状态不变，则<code>x.equals(y)</code>总是一致地返回<code>true</code>或者<code>false</code>；</p></li><li><p>对<code>null</code>的比较：即<code>x.equals(null)</code>永远返回<code>false</code>。</p></li></ul><p>一般遍历数组都是采用for循环，推荐用迭代器<code>Iterator</code>来访问<code>List</code>，采用迭代器遍历集合框架，它是一个对象，实现了Iterator 接口或ListIterator接口。</p><p>迭代器，使你能够通过循环来得到或删除集合的元素。ListIterator 继承了Iterator，以允许双向遍历列表和修改元素。</p><h3 id="遍历-ArrayList"><a href="#遍历-ArrayList" class="headerlink" title="遍历 ArrayList"></a>遍历 ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">     list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;HAHAHAHA&quot;</span>);</span><br><span class="line">     <span class="comment">//第一种遍历方法使用 For-Each 遍历 List</span></span><br><span class="line">     <span class="keyword">for</span> (String str : list) &#123;            <span class="comment">//也可以改写 for(int i=0;i&lt;list.size();i++) 这种形式</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//第二种遍历，把链表变为数组相关的内容进行遍历</span></span><br><span class="line">     String[] strArray=<span class="keyword">new</span> String[list.size()];</span><br><span class="line">     list.toArray(strArray);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strArray.length;i++) <span class="comment">//这里也可以改写为  for(String str:strArray) 这种形式</span></span><br><span class="line">     &#123;</span><br><span class="line">        System.out.println(strArray[i]);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//第三种遍历 使用迭代器进行相关遍历</span></span><br><span class="line">     </span><br><span class="line">     Iterator&lt;String&gt; ite=list.iterator();</span><br><span class="line">     <span class="keyword">while</span>(ite.hasNext())<span class="comment">//判断下一个元素之后有值</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(ite.next());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="green">第三种方法是采用迭代器的方法，该方法可以不用担心在遍历的过程中超出集合的长度。</font></p><h2 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第一种：普遍使用，二次取值</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.keySet遍历key和value：&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span>+ key + <span class="string">&quot; and value= &quot;</span> + map.get(key));</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第二种</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.entrySet使用iterator遍历key和value：&quot;</span>);</span><br><span class="line">      Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">      <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">       Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//第三种：推荐，尤其是容量大时</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.entrySet遍历key和value&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//第四种</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set<K> keySet()    //返回值是个只存放key值的Set集合（集合中无序存放的）<br>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()    //返回映射所包含的映射关系的Set集合（一个关系就是一个键-值对），就是把(key-value)作为一个整体一对一对地存放到Set集合当中的。正确使用<code>Map</code>必须保证：</K></p><ol><li>作为<code>key</code>的对象必须正确覆写<code>equals()</code>方法，相等的两个<code>key</code>实例调用<code>equals()</code>必须返回<code>true</code>；</li><li>作为<code>key</code>的对象还必须正确覆写<code>hashCode()</code>方法，且<code>hashCode()</code>方法要严格遵循以下规范：</li></ol><ul><li>如果两个对象相等，则两个对象的<code>hashCode()</code>必须相等；</li><li>如果两个对象不相等，则两个对象的<code>hashCode()</code>尽量不要相等。</li></ul><hr><h2 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h2><p>如果作为key的对象是<code>enum</code>类型，那么，还可以使用Java集合库提供的一种<code>EnumMap</code>，它在内部以一个非常紧凑的数组存储value，并且根据<code>enum</code>类型的key直接定位到内部数组的索引，并不需要计算<code>hashCode()</code>，不但效率最高，而且没有额外的空间浪费。</p><p>如果<code>Map</code>的key是<code>enum</code>类型，推荐使用<code>EnumMap</code>，既保证速度，也不浪费空间。</p><p>使用<code>EnumMap</code>的时候，根据面向抽象编程的原则，应持有<code>Map</code>接口。</p><hr><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>一种<code>Map</code>，它在内部会对Key进行排序，这种<code>Map</code>就是<code>SortedMap</code>。注意到<code>SortedMap</code>是接口，它的实现类是<code>TreeMap</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">       ┌───┐</span><br><span class="line">       │Map│</span><br><span class="line">       └───┘</span><br><span class="line">         ▲</span><br><span class="line">    ┌────┴─────┐</span><br><span class="line">    │          │</span><br><span class="line">┌───────┐ ┌─────────┐</span><br><span class="line">│HashMap│ │SortedMap│</span><br><span class="line">└───────┘ └─────────┘</span><br><span class="line">               ▲</span><br><span class="line">               │</span><br><span class="line">          ┌─────────┐</span><br><span class="line">          │ TreeMap │</span><br><span class="line">          └─────────┘</span><br></pre></td></tr></table></figure><p><code>SortedMap</code>保证遍历时以Key的顺序来进行排序。例如，放入的Key是<code>&quot;apple&quot;</code>、<code>&quot;pear&quot;</code>、<code>&quot;orange&quot;</code>，遍历的顺序一定是<code>&quot;apple&quot;</code>、<code>&quot;orange&quot;</code>、<code>&quot;pear&quot;</code>，因为<code>String</code>默认按字母排序。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果一个Java对象可以在内部持有若干其他Java对象，并对外提供访问接口，我们把这种Java对象称为集合。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="集合" scheme="https://juoyo.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>HTML快速入门</title>
    <link href="https://juoyo.github.io/posts/f09037a3.html"/>
    <id>https://juoyo.github.io/posts/f09037a3.html</id>
    <published>2019-08-18T07:48:08.000Z</published>
    <updated>2019-08-18T15:16:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于传智播客《Web前端入门教程》整合而成，详细视频教程可参考<a href="http://yun.itheima.com/course/267.html">http://yun.itheima.com/course/267.html</a></p><a id="more"></a><h2 id="一、浏览器内核分类"><a href="#一、浏览器内核分类" class="headerlink" title="一、浏览器内核分类"></a>一、浏览器内核分类</h2><ul><li>Trident——IE/Edge浏览器使用</li><li>Gecko——火狐浏览器使用</li><li>Webkit——safari浏览器使用</li><li>Chromium/Blink——Chrome浏览器使用</li><li>Presto——Opera浏览器使用（新版Opera已经使用Blink内核）</li></ul><hr><h2 id="二、Web标准构成"><a href="#二、Web标准构成" class="headerlink" title="二、Web标准构成"></a>二、Web标准构成</h2><p>Web标准是由W3C及其他标准化资质制定的标准集合。包括：结构（Structure）、表现（Presentation）、行为（Behavior）</p><ul><li>结构标准：用于对网页元素进行整理和分类，包括 xml、xhtml 两部分</li><li>样式标准：用于设置网页元素的版式、颜色、大小等外观，主要指 Css</li><li>行为标准：网页模型的定义及交互的编写。包括 DOM和ECMAScript两部分</li></ul><p>所以，理想状态下，一个网页的源码中需要包含：.html、.css、.js</p><hr><h2 id="三、HTML开发工具"><a href="#三、HTML开发工具" class="headerlink" title="三、HTML开发工具"></a>三、HTML开发工具</h2><p>Dreamweaver、Sublime、WebStorm、HBuilder、Visual Studio Code</p><hr><h2 id="四、html基本骨架"><a href="#四、html基本骨架" class="headerlink" title="四、html基本骨架"></a>四、html基本骨架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、HTML标签"><a href="#五、HTML标签" class="headerlink" title="五、HTML标签"></a>五、HTML标签</h2><h3 id="1、排版标签"><a href="#1、排版标签" class="headerlink" title="1、排版标签"></a>1、排版标签</h3><h4 id="（1）标题标签"><a href="#（1）标题标签" class="headerlink" title="（1）标题标签 "></a>（1）标题标签 <h1></h1></h4><ul><li><p>h 即 head 的简写</p></li><li><p>有</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>、<span class="tag">&lt;<span class="name">h2</span>&gt;</span>、<span class="tag">&lt;<span class="name">h3</span>&gt;</span>、<span class="tag">&lt;<span class="name">h4</span>&gt;</span>、<span class="tag">&lt;<span class="name">h5</span>&gt;</span>、<span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 6种，从左到右字号依次变小。</p></li><li><p>基本格式<code>&lt;h1&gt;&lt;/h1&gt;</code> </p></li><li><p>像<h7>这种错误的标签在展示时不起作用</h7></p></li></ul><h4 id="（2）段落标签"><a href="#（2）段落标签" class="headerlink" title="（2）段落标签"></a>（2）段落标签<p></p></h4><ul><li>p 即 paragraph 的简写</li><li>基本格式<code>&lt;p&gt;段落内容&lt;/p&gt;</code> </li><li>段落中的文本内容超出浏览器宽度之后会执行自动换行</li></ul><h4 id="（3）水平线标签"><a href="#（3）水平线标签" class="headerlink" title="（3）水平线标签"></a>（3）水平线标签<hr></h4><ul><li>hr 即 horizontal  的缩写</li><li>其作用是在页面中插入一条水平线</li><li>基本格式<code>&lt;hr /&gt;</code> </li><li>这是一个自闭合标签。（普通标签成对出现；自闭合标签不需要包裹内容，自己就执行了开始和结束的操作）</li></ul><h4 id="（4）容器标签-和"><a href="#（4）容器标签-和" class="headerlink" title="（4）容器标签  和 "></a>（4）容器标签 <div></div> 和 <span></span></h4><ul><li>div 即 division 的缩写，分割、区分的意思</li><li>span 即 span ，跨度、范围的意思</li><li>这俩本质上是一个容器，类似于 Android 中的ViewGroup</li><li>基本格式<code>&lt;div&gt;这是div标签中的内容&lt;/div&gt; &lt;span&gt;这是span标签中的内容&lt;/span&gt;</code></li></ul><h3 id="2、文本格式化标签"><a href="#2、文本格式化标签" class="headerlink" title="2、文本格式化标签"></a>2、文本格式化标签</h3><blockquote><table><thead><tr><th>标签</th><th>效果</th></tr></thead><tbody><tr><td><b></b>、<strong></strong></td><td>加粗，XHTML推荐使用<strong></strong></td></tr><tr><td><i></i>、<em></em></td><td>斜体，XHTML推荐使用<em></em></td></tr><tr><td><s></s>、<del></del></td><td>删除线，XHTML推荐使用<del></del></td></tr><tr><td><u></u>、<ins></ins></td><td>下划线，XHTML推荐使用<ins></ins></td></tr></tbody></table></blockquote><h3 id="3、标签的属性"><a href="#3、标签的属性" class="headerlink" title="3、标签的属性"></a>3、标签的属性</h3><ul><li>基本格式：<code>&lt;标签名 属性1=”属性值1“ 属性2=”属性值2“&gt;&lt;/标签名&gt;</code> </li><li>标签可以拥有多个属性</li><li>属性必须写在开始标签中，位于标签名后面</li><li>属性之间不区分顺序</li><li>标签名与属性、属性与属性之间使用空格隔开</li><li>任何属性都有默认值，省略该属性表示使用默认值</li></ul><h3 id="4、图像标签"><a href="#4、图像标签" class="headerlink" title="4、图像标签 "></a>4、图像标签 <img></h3><ul><li>img 即 image 的缩写</li><li>基本格式<code>&lt;img src=&quot;图片URI/URL&quot; /&gt;</code> </li><li><img>常用属性如下：</li></ul><table><thead><tr><th>属性</th><th>属性值</th><th>属性含义</th></tr></thead><tbody><tr><td>src</td><td>URI/URL</td><td>图像的路径</td></tr><tr><td>alt</td><td>文本</td><td>图像无法正常显示时的提示文本</td></tr><tr><td>title</td><td>文本</td><td>鼠标悬停于图像时显示的文本</td></tr><tr><td>width</td><td>像素（XHTML 不支持按页面百分比显示）</td><td>图像的宽度</td></tr><tr><td>height</td><td>像素（XHTML 不支持按页面百分比显示）</td><td>图像的高度</td></tr><tr><td>border</td><td>数字</td><td>设置图像边框的宽度</td></tr></tbody></table><ul><li>设置图像的宽高时，如果想等比缩放，则只设置其中一个即可。</li></ul><h3 id="5、超链接标签"><a href="#5、超链接标签" class="headerlink" title="5、超链接标签"></a>5、超链接标签</h3><h4 id="（1）超链接标签"><a href="#（1）超链接标签" class="headerlink" title="（1）超链接标签"></a>（1）超链接标签<a></a></h4><ul><li><p>anchor 的缩写</p></li><li><p>基本格式 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>超链接文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>href 即 HyperText Reference , 指定要跳转的URL地址</li><li>target , 指定目标窗口的打开方式。取值为 self / blank , self 为默认值，blank 表示新窗口打开</li></ul></li></ul><p>注意：</p><blockquote><ul><li>外链需要添加 http:// 或 https:// 前缀</li><li>内部链接 直接链接内部页面名称即可，如 <code>&lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt;</code> </li><li>如果当时没有确定链接目标时，可以为 href 赋值 为 “#” ,即 <code>href=&quot;#&quot;</code>,表示一个空连接</li><li>各种网页元素，如 文本、图像、表格、音频、视频等都可以作为超链接的载体</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>超链接文本示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.csdn.net&quot;</span>&gt;</span>CSDN<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;aTag.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>内部链接--再打开一个aTag.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>空的超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（2）锚点"><a href="#（2）锚点" class="headerlink" title="（2）锚点"></a>（2）锚点</h4><ul><li>通过创建锚点，可以快速定位到目标内容区域</li><li>创建锚点分为两步 <ul><li>为目标内容（即锚点）创建id 并赋值</li><li>将超链接文本与锚点的id 关联，<code>&lt;a href=&quot;#id名称&quot;&gt; 超链接文本 &lt;/a&gt;</code> </li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#createAnchor&quot;</span>&gt;</span>点击跳转到锚点位置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    通过创建锚点，</span><br><span class="line">    可以快速定位到目标内容区域</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加这一堆br是为了增加页面高度，不然显示不出锚点效果--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;createAnchor&quot;</span>&gt;</span>创建锚点分为两步<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        为目标内容（即锚点）创建id 并赋值</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        将超链接文本与锚点的id 关联，<span class="symbol">&amp;lt;</span>a href=&quot;#id名称&quot;<span class="symbol">&amp;gt;</span> 超链接文本 <span class="symbol">&amp;lt;</span>/a<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6、base标签"><a href="#6、base标签" class="headerlink" title="6、base标签"></a>6、base标签</h3><ul><li><base> 标签可以限定同一页面内所有 超链接 的打开方式。`<base target="_blank">` </li><li><p>设置 <base> 之后依旧可以为某个单独的超链接设置打开方式。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>base 标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定页面中所有超链接的默认打开方式为 blank --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jianshu.com&quot;</span> &gt;</span>简书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--虽然 head 中设置了base,但此处依旧可以单独指定打开方式为 self,实现重载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.csdn.net&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>CSDN<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;aTag.html&quot;</span>&gt;</span>内部链接--再打开一个aTag.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>空的超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> /&gt;</span>  、 &lt; br/&gt;、 <span class="tag">&lt;<span class="name">hr</span> /&gt;</span>、<span class="tag">&lt;<span class="name">base</span>/&gt;</span> </span><br></pre></td></tr></table></figure><p>都是自闭合标签</p></blockquote><h3 id="7、转义字符"><a href="#7、转义字符" class="headerlink" title="7、转义字符"></a>7、转义字符</h3><p><img src="https://upload-images.jianshu.io/upload_images/2551993-296a9795ceb494e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><h3 id="8、注释标签"><a href="#8、注释标签" class="headerlink" title="8、注释标签"></a>8、注释标签</h3><ul><li>格式为 <code>&lt; !-- 注释内容 -- &gt;</code></li></ul><h3 id="9、路径"><a href="#9、路径" class="headerlink" title="9、路径"></a>9、路径</h3><h4 id="（1）相对路径"><a href="#（1）相对路径" class="headerlink" title="（1）相对路径"></a>（1）相对路径</h4><ul><li><p>图像文件和HTML文件位于同一文件夹中，只需要输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;E:&#x2F;A_JS&#x2F;hexo&#x2F;source&#x2F;_posts&#x2F;logo.gif&quot;&#x2F;&gt;&#96; </span><br></pre></td></tr></table></figure></li><li><p>图像文件位于Html文件的下一级文件夹，输入文件夹名和文件名，二者之间用“/” 隔开，<code>&lt;img src=&quot;image/logo.gif&quot;/&gt;</code> </p></li><li><p>图像文件位于HTML文件的上一级，在文件名之前加 “ <strong>../</strong> “, 上两级则使用 “ <strong>../../</strong> “,依次类推。<code>&lt;img src=&quot;../image/logo.gif&quot;/&gt;</code> </p></li></ul><h4 id="（2）绝对路径"><a href="#（2）绝对路径" class="headerlink" title="（2）绝对路径"></a>（2）绝对路径</h4><ul><li>本地绝对路径：    <code>D:\web\img\logo.gif</code> </li><li>网络绝对路径</li></ul><h3 id="10、列表标签"><a href="#10、列表标签" class="headerlink" title="10、列表标签"></a>10、列表标签</h3><h4 id="（1）无序列表"><a href="#（1）无序列表" class="headerlink" title="（1）无序列表 "></a>（1）无序列表 <ul></ul></h4><ul><li>所谓无序列表就是以小圆点或者小方块作为行首标志的列表</li><li>无序列表的各项之间是并列的，没有顺序级别的区分</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>无序列表 ul<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> 之间只能嵌套 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>,不允许嵌套其他标签</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> 之间相当于一个容器，可以嵌套任意标签</span><br></pre></td></tr></table></figure></blockquote><h4 id="（2）有序列表"><a href="#（2）有序列表" class="headerlink" title="（2）有序列表 "></a>（2）有序列表 <ol></ol></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有序列表 <span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">- 内部也是嵌套<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">- 默认以 1、2、3...作为行首排序标志</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>有序列表ol<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（3）自定义列表"><a href="#（3）自定义列表" class="headerlink" title="（3）自定义列表 "></a>（3）自定义列表 <dl></dl></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span>为外层标签、<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span>为内层标签、<span class="tag">&lt;<span class="name">dt</span>&gt;</span>下还可以嵌套 <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自定义列表项前不具有任何项目符号，既没有小圆点也没有1234</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>自定义列表项1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表项1 的内容解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表项1 的内容解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>自定义列表项2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表项2 的内容解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表项2 的内容解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11、表格标签-table"><a href="#11、表格标签-table" class="headerlink" title="11、表格标签 table"></a>11、表格标签 table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span> 用来定义表格</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> 用来定义行，嵌套在 <span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span> 中</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> 用来定义行中的单元格，嵌套在 <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> 中</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> 中只能嵌套<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> , 但 <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span> 相当于一个容器，可以嵌套任意元素</span><br></pre></td></tr></table></figure><p>表格相关的属性如下：</p><table><thead><tr><th>属性名称</th><th>含义</th><th>属性取值</th></tr></thead><tbody><tr><td>border</td><td>表格的边框。默认 border=”0”,即无边框</td><td>像素值</td></tr><tr><td>cellspacing</td><td>单元格与单元格边框之间的间距。  默认 cellspacing=”2”</td><td>像素值</td></tr><tr><td>cellpadding</td><td>单元格内容与单元格边框的间距。  默认 cellpadding=”1”</td><td>像素值</td></tr><tr><td>width</td><td>表格的宽度</td><td>像素值</td></tr><tr><td>height</td><td>表格的高度</td><td>像素值</td></tr><tr><td>align</td><td>表格在页面中的水平对齐方式</td><td>left 、center 、right</td></tr><tr><td>caption</td><td>标题</td><td>文本</td></tr><tr><td>colspan</td><td>从当前列向后 横跨几列, 应用于td、th</td><td>数字</td></tr><tr><td>rowspan</td><td>从当前行向下 竖跨几行, 应用于td、th</td><td>数字</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;2&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第一行第1列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第一行第2列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第一行第3列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第二行第1列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第二行第2列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第二行第3列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12、表头标签"><a href="#12、表头标签" class="headerlink" title="12、表头标签"></a>12、表头标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 表头一般位于表格的第一行或者第一列。</span><br><span class="line">- 表头标签为 <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span>，在显示的时候默认会显示为加粗的效果</span><br><span class="line">- 增加表头时，使用 <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span> 替代对应位置的 <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>即可</span><br></pre></td></tr></table></figure><p>下图即是设置了表头的表格：</p><p><img src="https://upload-images.jianshu.io/upload_images/2551993-0e7b366cb852b7db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>caption标签是啥？标题？<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>属性<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>含义<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>取值<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>border<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格边框<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>像素值，默认0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span>rowspan从当前单元格向下跨三行<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>cellspacing<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格与单元格边框的间距<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>像素值，默认2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>cellpadding<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内容与单元格边框的间距<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>像素值，默认1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13、表格结构"><a href="#13、表格结构" class="headerlink" title="13、表格结构"></a>13、表格结构</h3><p>使用表格时，可以将表格分为头部、主体、页脚</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span> 用来定义头部。必须位于 <span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span> 中，一般包含网页的logo和导航等头部信息。</span><br><span class="line">- <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> 用来定义表格的主体，一般包含网页中除头部和底部之外的其他内容。</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2551993-9ec8e0170398feef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/578/format/webp" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>thead+tbody<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>属性名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>含义<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>取值<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>colspan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>向右横跨几列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>数值<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>rowspan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>向下竖跨几行<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>数值<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="14、网页元素检查（开发者模式）"><a href="#14、网页元素检查（开发者模式）" class="headerlink" title="14、网页元素检查（开发者模式）"></a>14、网页元素检查（开发者模式）</h3><ul><li>基于 chrome 浏览器，在页面中右击，然后选择 “检查”</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2551993-dfc888b34c57990c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><h3 id="15、表格标题标签-caption"><a href="#15、表格标题标签-caption" class="headerlink" title="15、表格标题标签 caption"></a>15、表格标题标签 caption</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span> 标签用来定义标题的标签</span><br><span class="line">- 必须写在 <span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span> 中，和 <span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span>平级</span><br></pre></td></tr></table></figure><h3 id="16、单元格合并"><a href="#16、单元格合并" class="headerlink" title="16、单元格合并"></a>16、单元格合并</h3><ul><li><p>```html<br>适用于 <td></td>、<th></th></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- colspan 跨列合并（水平合并）</span><br><span class="line"></span><br><span class="line">- rowspan 跨行合并（垂直合并）</span><br><span class="line"></span><br><span class="line">### 17、表单标签</span><br><span class="line"></span><br><span class="line">html 中一个完整的表单通常由 表单元素、提示信息、表单域（即多个表单的父容器）三部分组成。</span><br><span class="line"></span><br><span class="line">![img](https:&#x2F;&#x2F;&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2551993-e193208e3928495d.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;974&#x2F;format&#x2F;webp)</span><br><span class="line"></span><br><span class="line">#### （1）input 输入标签</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;html</span><br><span class="line">  &lt;input&#x2F;&gt; 为单标签（自闭合标签）</span><br></pre></td></tr></table></figure></li><li><input> </li><li><p>type 是其基本属性，用来控制输入的类型</p></li></ul><blockquote><p>input 、br、hr 、img、 base 都是单标签</p></blockquote><table><thead><tr><th>属性</th><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>type</td><td>text</td><td><strong>单行</strong>文本输入框（不换行的）</td></tr><tr><td>type</td><td>password</td><td>密码输入框</td></tr><tr><td>type</td><td>radio</td><td>单选框（配合name 可以实现单选效果）</td></tr><tr><td>type</td><td>checkbox</td><td>复选框</td></tr><tr><td>type</td><td>button</td><td>普通按钮</td></tr><tr><td>type</td><td>submit</td><td>提交按钮</td></tr><tr><td>type</td><td>reset</td><td>重置按钮</td></tr><tr><td>type</td><td>image</td><td>图像形式的提交按钮</td></tr><tr><td>type</td><td>file</td><td>文件域, 点击之后打开文件选择器</td></tr><tr><td>name</td><td>任意文本</td><td>控件名称 , name 相同则表示是同一组数据</td></tr><tr><td>value</td><td>任意文本</td><td>默认文本值</td></tr><tr><td>size</td><td>正整数</td><td>显示大小</td></tr><tr><td>checked</td><td>checked</td><td>默认是否被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>控制输入的最大字符数量</td></tr></tbody></table><blockquote><p>多个 radio 使用相同的 name ，则表示这是一组数据，这样可以实现单选效果。如果不加 name 多个 radio 可同时被选中</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>input标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--次数密码中间的空格使用了是全角输入法，全角输入法中，空格占一个汉字的大小--&gt;</span></span><br><span class="line">    密　码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用name 限定了一组内容，从而实现单选--&gt;</span></span><br><span class="line">    性　别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    爱　好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span> 看电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span> 读书</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../image/imgButton.png&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    请选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/2551993-4b14a53ad1ac03db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/510/format/webp" alt="img"></p><h4 id="（2）label-标签"><a href="#（2）label-标签" class="headerlink" title="（2）label 标签"></a>（2）label 标签</h4><ul><li>label 标签为 input 标签定义标注/标签</li><li>用来绑定一个表单元素，当点击 label 标签的时候，被绑定的 表单元素就会获取焦点</li><li>通过 for 属性，可以绑定 label 和 input ; 或者直接用lable 标签将input 包裹起来</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>label的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--label 中直接包裹 input,可以实现绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>点击此处文本，用户名输入框会获取焦点 <span class="tag">&lt;<span class="name">br</span>&gt;</span> 用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 label 的 for 属性绑定input--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#two&quot;</span>&gt;</span>点击此处文本，密码输入框会获取焦点<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密　码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;#two&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（3）textarea-文本域标签"><a href="#（3）textarea-文本域标签" class="headerlink" title="（3）textarea 文本域标签"></a>（3）textarea 文本域标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>用来做大量文本的输入，支持多行。</span><br></pre></td></tr></table></figure><p><textarea></textarea></p><ul><li>有 cols 、rows 属性。cols 限制每行中所输入的文本字数，rows 限制最大行数。（这两个属性通常不被使用，更多使用会使用CSS样式做相关控制）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>textarea标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    请输入评论内容：</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/2551993-54c7eff013d9bf9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/338/format/webp" alt="img"></p><h4 id="（4）下拉菜单"><a href="#（4）下拉菜单" class="headerlink" title="（4）下拉菜单 "></a>（4）下拉菜单 <select></select></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span> 用来定义下拉菜单</span><br><span class="line"></span><br><span class="line">- <span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span> 用来定义下拉菜单选项</span><br><span class="line"></span><br><span class="line">- <span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span> 中至少包含一对 <span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- 在 option 中定义了属性 selected=&quot;selected&quot; 之后，表示该项被默认选中</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>select标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    设置家乡</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>选择省份<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>内蒙古<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>山西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（5）表单域"><a href="#（5）表单域" class="headerlink" title="（5）表单域 "></a>（5）表单域 <form></form></h4><ul><li><p>该标签用来定义表单域，以实现用户信息的收集和传递，form 中的内容通常都会被提交到服务器。</p></li><li><p>基本语法格式： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单名称&quot;</span>&gt;</span></span><br><span class="line">    ...各种表单控件...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>常用属性有action、method、name </p><ul><li>action : 指定接收并处理表单信息的服务器url地址</li><li>method : 表单数据的提交方式。分为 post / get</li><li>name : 指定表单名称，用来区分页面中的多个表单</li></ul></li><li><p>每个表单都应该有自己的表单域</p></li><li><p><strong>使用form 包裹之后点击提交按钮才有提交的动作</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>form表单域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 form 包裹之后，提交按钮和图片按钮点击时就有效果了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userInfo&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--次数密码中间的空格使用了是全角输入法，全角输入法中，空格占一个汉字的大小--&gt;</span></span><br><span class="line">        密　码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--使用name 限定了一组内容，从而实现单选--&gt;</span></span><br><span class="line">        性　别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span> 男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span> 女</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        爱　好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span> 看电影</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>/&gt;</span> 读书</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置按钮&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../image/imgButton.png&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        请选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="18、综合案例"><a href="#18、综合案例" class="headerlink" title="18、综合案例"></a>18、综合案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">legend</span>&gt;</span>学生档案<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓　　名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入学生姓名&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>手 机 号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入学生手机号&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮　　箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>所属学院：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;academy&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;academy&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> &gt;</span>JAVA学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> &gt;</span>前端学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> &gt;</span>PHP学院<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>出生日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>语文成绩：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>数学成绩: <span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">low</span>=<span class="string">&quot;59&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>英语成绩: <span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">low</span>=<span class="string">&quot;59&quot;</span> <span class="attr">value</span>=<span class="string">&quot;90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="19、多媒体标签"><a href="#19、多媒体标签" class="headerlink" title="19、多媒体标签"></a>19、多媒体标签</h3><ul><li>embed : 定义嵌入的内容</li><li>audio : 播放音频</li><li>video : 播放视频</li></ul><h4 id="（1）embed"><a href="#（1）embed" class="headerlink" title="（1）embed"></a>（1）embed</h4><ul><li>用来插入各种多媒体，格式可以是 Midi、Wav、 AIFF 、AU 、Mp3等</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>embed<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;http://player.video.iqiyi.com/44cb2ab93ef163fea5a206e52da7c390/0/0/v_19rqyv6lfo.swf-albumId=1268727400-tvId=1268727400-isPurchase=0-cnId=3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">allowFullScreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">quality</span>=<span class="string">&quot;high&quot;</span> <span class="attr">width</span>=<span class="string">&quot;480&quot;</span> <span class="attr">height</span>=<span class="string">&quot;350&quot;</span> <span class="attr">align</span>=<span class="string">&quot;middle&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">allowScriptAccess</span>=<span class="string">&quot;always&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-shockwave-flash&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面示例代码中，embed 节点中的内容是直接从 爱奇艺 网站下复制的。做法是：<code>找到一个视频 &gt; 分享 &gt; 点击向下的箭头（即 更多）&gt; 复制 html 代码</code> 即可</p></blockquote><h4 id="（2）audio"><a href="#（2）audio" class="headerlink" title="（2）audio"></a><a href="http://www.w3school.com.cn/html5/html_5_audio.asp">（2）audio</a></h4><ul><li><p>html5 通过 <audio></audio> 标签实现音频播放</p></li><li><p><strong>audio 开始和结束标签之间可以嵌入文本，当浏览器不支持该标签时，该文本可以作为提示语。</strong></p></li><li><p>audio 在不同浏览器中的兼容情况如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/2551993-d56fe7fb0e92b616.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p></li></ul><p>常用属性如下：</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>src</td><td>定义音频文件的路径</td></tr><tr><td>autoplay</td><td>自动播放</td></tr><tr><td>controls</td><td>显示默认播放控件</td></tr><tr><td>loop</td><td>循环播放</td></tr><tr><td>preload</td><td>页面初始化时就加载音频，autoplay会覆盖该属性</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;audio&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--使用方式1--&gt;</span><br><span class="line">    &lt;audio src&#x3D;&quot;..&#x2F;assets&#x2F;audio&#x2F;皇后大道东.mp3&quot; autoplay&#x3D;&quot;autoplay&quot; controls&#x3D;&quot;controls&quot; loop&#x3D;&quot;loop&quot;&gt;</span><br><span class="line">        提示语：您的浏览器不支持audio标签</span><br><span class="line">    &lt;&#x2F;audio&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--使用方式2: 通过 source 定义三种音频格式，从而达到不同浏览器上都能播放的情况--&gt;</span><br><span class="line">    &lt;audio loop controls preload&#x3D;&quot;auto&quot;&gt;</span><br><span class="line">        &lt;source src&#x3D;&quot;..&#x2F;assets&#x2F;audio&#x2F;皇后大道东.mp3&quot;&gt;</span><br><span class="line">        &lt;source src&#x3D;&quot;..&#x2F;assets&#x2F;audio&#x2F;皇后大道东.ogg&quot;&gt;</span><br><span class="line">        &lt;source src&#x3D;&quot;..&#x2F;assets&#x2F;audio&#x2F;皇后大道东.wav&quot;&gt;</span><br><span class="line">        提示语：您的浏览器不支持audio标签</span><br><span class="line">    &lt;&#x2F;audio&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2551993-3a5e7e10638c240b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/634/format/webp" alt="img"></p><blockquote><p>注意，如果 歌曲比较大，那么加载的过程会比较长！！！但是，只要设置了 autoplay ，加载完成后必然会自动播放</p></blockquote><h4 id="（3）video"><a href="#（3）video" class="headerlink" title="（3）video"></a>（3）video</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- html5中使用<span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span> 来实现视频的播放</span><br><span class="line">- video 目前支持三种视频格式：ogg、mp4、webM</span><br></pre></td></tr></table></figure><ul><li>video 在各浏览器上的兼容情况如下：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2551993-2f4381d2a21f312e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>常用属性如下：</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>autoplay</td><td>自动播放</td></tr><tr><td>controls</td><td>显示默认播放控制</td></tr><tr><td>loop</td><td>循环播放</td></tr><tr><td>width</td><td>设置播放器宽度</td></tr><tr><td>height</td><td>设置播放器高度</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文基于传智播客《Web前端入门教程》整合而成，详细视频教程可参考&lt;a href=&quot;http://yun.itheima.com/course/267.html&quot;&gt;http://yun.itheima.com/course/267.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://juoyo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://juoyo.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>读论文4 Volatility Prediction using Financial Disclosures Sentiments with Word Embedding-based IR Models</title>
    <link href="https://juoyo.github.io/posts/9e956bc.html"/>
    <id>https://juoyo.github.io/posts/9e956bc.html</id>
    <published>2019-08-11T01:36:16.000Z</published>
    <updated>2019-08-20T16:07:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>波动率预测(volatility)是金融市场的一个重要指标，近年来有人通过情感分析的方法来解决这个问题。这篇文章调查了股票市场中公司年度披露文档的情感来预报波动率。</p><a id="more"></a><p>论文介绍<a href="https://arxiv.org/abs/1702.01978">https://arxiv.org/abs/1702.01978</a></p><p>论文下载<a href="https://arxiv.org/pdf/1702.01978.pdf">https://arxiv.org/pdf/1702.01978.pdf</a></p><hr><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>情绪分析理论已经用于解决金融市场波动性预测，调查股票市场年度披露的情绪来预测市场波动。探索使用最新信息检索（IR）术语权重模型，通过使用相关术语词嵌入进行高效扩展。除了文本信息外，真实市场数据已经被用作主流方法，来预测市场风险。我们融合文本和市场数据，基于词嵌入的方法明显优于其他最好方法，我们还研究了不同金融领域公司报告的特点。</p><hr><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>我们的研究是建立在以前的研究基础上的波动率预测与10-K报告情绪信息分析。在利用文本内容对波动率进行预测方面，本文给出了最先进的收益于词嵌入信息的信息检索(IR)项权重模型，对预测精度有显著的正向影响。最近关于这个话题的研究(Tsai and Wang, 2014)使用词内嵌获得的相关词汇来扩展情感性词汇的词汇量。相反，与Rekabsaz等人(2016b)相似，我们通过将每个词汇扩展到文档中相似的词汇来定义每个词汇的权重。该方法在文献检索方面有显著改进，通过抓住词汇的重要性促使我们将其应用于情感分析。</p><p>此外，我们还阐明了针对每个部门调整分析的效果:预期特定领域的训练将导致提升，我们的常规模型泛化能力好，并优于行业特定的训练模型。</p><hr><h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><p>Xie等(2013)提出了一种基于语义树的模型来表示预测股价走势的新闻数据。Luss等人(2015)也利用新闻与回报价格相结合来预测当天的价格走势。他们使用多内核学习(MKL)算法来结合这两个特性。与单独使用每个特性相比，这种组合在最终预测方面显示出改进。在那些研究的推动下，我们研究了将文本信息与非文本信息相结合的MKL算法的性能。</p><p>上述研究使用短文本(句子或段落级)，而接近长文本(文档级)进行市场预测主要基于n克袋词法。Nopp和Hanbury(2015)使用Loughran和McDonald(2011)提供的金融专用词汇研究了银行年报的情绪，以评估银行系统风险因素。</p><p>Kogan等人(2009)对1996-2006年发表的报告使用线性支持向量机(SVM)算法，这与10-K波动预测报告的信息量更直接相关。Wang et al.(2013)利用Loughran和McDonald(2011)的词典对其进行了改进，观察了预测的改进。之后，Tsai和Wang(2014)采用了与Wang et al.(2013)相同的方法，并在此基础上增加了词内嵌来扩展金融词汇。我们复制了这些研究中的所有方法，并展示了我们的情绪分析方法的优势。</p><hr><h1 id="问题公式化"><a href="#问题公式化" class="headerlink" title="问题公式化"></a>问题公式化</h1><p>在这一节中，我们阐述了波动率预测问题和我们实验的预测目标。波动率被定义为的自然对数的标准差(调整)返回τ天的价格在一个窗口。这个定义称为标准波动率(Li and Hong, 2011)或已实现波动率(Liu and Tse,2013)，定义如下:</p><p><img src="/posts/9e956bc.htm/%E8%AF%BB%E8%AE%BA%E6%96%874-Volatility-Prediction-using-Financial-Disclosures-Sentiments-with-Word-Embedding-based-IR-Models%5C1.gif"></p><hr><h1 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h1><p>首先描述了文本情绪分析方法，然后介绍了从实际市场数据中获得的特征，最后解释了将文本和市场特征集结合起来的方法。</p><h2 id="情绪分析"><a href="#情绪分析" class="headerlink" title="情绪分析"></a>情绪分析</h2><p>与之前的研究相似(Nopp and Hanbury, 2015;Wang et al.， 2013)，我们使用<strong>积极组、消极组和不确定组</strong>从一个特定金融的词汇库中提取关键字集(Loughran and McDonald, 2011)，使用英文分词算法。我们将这个关键字集称为Lex。Tsai和Wang(2014)对该集合进行了扩展，将每一项的前20个相关项添加到原集合中，利用所有报告语料库构建的Word2Vec (Mikolov et al.， 2013)模型得到相关项，具有余弦相似性。我们还在实验中使用了这个扩展集，并将其称为LexExt。</p><p>在检索资讯时，我们常用以下字词加权方案，并在我们的研究中加以考虑:</p><p><img src="/posts/9e956bc.htm/%E8%AF%BB%E8%AE%BA%E6%96%874-Volatility-Prediction-using-Financial-Disclosures-Sentiments-with-Word-Embedding-based-IR-Models%5C2.gif"></p><p>除了标准的加权方案,我们使用先进的信息检索中的直接受益于词嵌入模型的权重方法(Rekabsaz et al ., 2016 b)：它们利用词嵌入模型提供的词与词之间的相似度值，通过扩展每个词库关键字的相似词的权重，实现加权方案:</p><p><img src="/posts/9e956bc.htm/%E8%AF%BB%E8%AE%BA%E6%96%874-Volatility-Prediction-using-Financial-Disclosures-Sentiments-with-Word-Embedding-based-IR-Models%5C3.gif"></p><p>由Lex或LexExt词汇的权重生成的特征向量是高度稀疏的，因为维度的数量大于数据点的数量。因此，我们通过应用主成分分析(PCA)来减少维数。我们的初步实验表明，400维是从50到1000维的最佳尺寸。</p><p>给出了最终的l维特征向量x，我们将SVM作为一种众所周知的训练回归和分类方法。</p><p>内核可以看作是文档的特征向量与其他所有文档的特征向量之间的(相似性)函数。我们的初步实验表明，径向基函数(RBF)核的性能优于线性核和余弦核，因此本文采用了径向基函数核。</p><p>我们使用人工神经网络(ANN)算法来测试神经网络用于自动特征学习的有效性。我们尝试了几种不同正则化方法的神经网络结构(早期停止、正则化项、退出)。采用两层隐层(分别为400和500个节点)，tanh为激活函数，梯度学习率为0.001，梯度学习效果较好，且提前停止。然而，这些网络不能提供比SVM回归器更好的结果。因此，对于本报告，我们只报告SVM方法。</p><hr><h2 id="市场特点"><a href="#市场特点" class="headerlink" title="市场特点"></a>市场特点</h2><p>除了文本特征外，我们还使用真实市场数据和历史价格(称为市场特征)定义了以下三个特征:</p><p>**Current Volatility **是按报告发出日期前的四分之一窗口计算:  v (si 64−si)</p><p><strong>GARCH</strong> (Bollerslev, 1986)是一种常用的股票预测计量时间序列模型价格波动。</p><p><strong>Sector</strong> 是报告对应公司所属的部门，即能源(ene)、基础产业(ind)、金融(fin)、科技(tech)、杂项(misc)、非耐用消费品(n-dur)、耐用消费品(dur)、资本货物(capt)、消费服务(serv)、公用事业(pub)、医疗(hlth)1。使用一种热编码将特征转换为数值表示。</p><hr><h2 id="特征融合"><a href="#特征融合" class="headerlink" title="特征融合"></a>特征融合</h2><p>晚期融合方法首先在每个特征集中学习一个模型，然后使用/学习一个元模型来组合它们的结果。作为我们的第二种方法，我们使用堆叠(Wolpert, 1992)，这是一种晚期融合的特殊情况。在堆叠过程中，我们首先将训练集分成两部分(70%-30%)。使用第一部分，我们为每个文本和市场特性集训练单独的机器学习模型。接下来，我们用训练好的模型预测第二部分的标签，最后训练另一个模型来捕捉基本模型输出之间的组合。在我们的实验中，最终的模型总是使用带有RBF核的SVM进行训练。</p><p>由于训练集的分割，基础模型或元模型可能会缺少训练数据。在一个模型中学习这两个特性集的一种潜在方法是MKL方法。MKL算法(也称为中间融合(Noble et al.， 2004))通过学习(同时学习参数)多个核心的最优组合，扩展了SVM模型的核心。</p><p>优化可能在计算上具有挑战性。我们使用mklaren方法(Strazar和Curkˇ,2016),线性复杂性数据实例的数量和内核。它已被证明优于最近的多核近似方法。我们对文本和市场特性集都使用RBF内核。</p><hr><h2 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h2><p>我们从美国证券交易委员会(SEC)网站下载了2006年至2015年美国股市公司的报告。</p><p>基线GARCH：虽然GARCH模型包含市场事实信息，但是我们使用它作为基线来比较基于文本的方法和主流方法的有效性。</p><p>评价指标作为一种常用的度量可合性预测指标，我们使用r^2度量(相关系数的平方)进行评价：</p><p><img src="/posts/9e956bc.htm/%E8%AF%BB%E8%AE%BA%E6%96%874-Volatility-Prediction-using-Financial-Disclosures-Sentiments-with-Word-Embedding-based-IR-Models%5C4.gif"></p><hr><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>让我们从观察这些年来报告的特征向量的变化开始我们的实验。为了进行比较，我们使用了Tsai and Wang(2014)提出的最先进的情绪分析方法。我们首先通过计算当年发表的所有报告的特征向量的质心(元素均值)来表示每年的特征向量，然后计算2006-2015年每对质心向量的余弦相似度。</p><hr><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>在本文中，我们研究了最近10-K年披露的股票市场公司的情绪预测波动。我们的袋装词汇情感分析方法得益于最先进的信息检索模型，该模型使用单词嵌入将词汇的权重扩展到文档中的类似词汇。此外，我们还探索了将文本特征与真实市场特征相结合的融合方法，即GARCH预测模型和当前波动性。在这两种情况下，我们的方法都优于现有的10-K波动率预测方法，并证明了情绪分析在长期波动率预测中的有效性。</p><p>此外，我们研究了每个行业在风险敏感术语方面的特征。我们的分析表明，同一部门的报告有相当大的共同风险和不稳定因素。然而，尽管有预期，在不同部门培训不同的模型与一般模型相比并没有提高性能。我们将其追溯到每个部门可用数据的大小，并表明考虑部门仍然有好处，随着更多数据可用，未来可以进一步探索这些好处。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;波动率预测(volatility)是金融市场的一个重要指标，近年来有人通过情感分析的方法来解决这个问题。这篇文章调查了股票市场中公司年度披露文档的情感来预报波动率。&lt;/p&gt;</summary>
    
    
    
    <category term="读论文" scheme="https://juoyo.github.io/categories/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="情感分析" scheme="https://juoyo.github.io/tags/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"/>
    
    <category term="volatility" scheme="https://juoyo.github.io/tags/volatility/"/>
    
    <category term="波动率预测" scheme="https://juoyo.github.io/tags/%E6%B3%A2%E5%8A%A8%E7%8E%87%E9%A2%84%E6%B5%8B/"/>
    
    <category term="信息检索" scheme="https://juoyo.github.io/tags/%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>word2vec入门</title>
    <link href="https://juoyo.github.io/posts/970805c9.html"/>
    <id>https://juoyo.github.io/posts/970805c9.html</id>
    <published>2019-08-08T14:55:58.000Z</published>
    <updated>2019-11-18T02:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>word2vec</p><a id="more"></a><h1 id="One-Hot-编码"><a href="#One-Hot-编码" class="headerlink" title="One-Hot 编码"></a>One-Hot 编码</h1><p>又称一位有效编码，其方法是使用N位状态寄存器来对N个状态进行编码，每个状态都有它独立的寄存器位，并且在任意时候，其中只有一位有效。</p><p>one-hot编码就是保证每个样本中的单个特征只有1位处于状态1，其他的都是0。</p><p>考虑一下的三个特征：</p><p>[“male”, “female”]<br>[“from Europe”, “from US”, “from Asia”]<br>[“uses Firefox”, “uses Chrome”, “uses Safari”, “uses Internet Explorer”]</p><p>将它换成独热编码后，应该是：<br> feature1=[01,10]<br> feature2=[001,010,100]<br> feature3=[0001,0010,0100,1000]</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：</p><ol><li><p>解决了分类器不好处理离散数据的问题</p></li><li><p>一定程度上也起到了扩充特征的作用</p></li></ol><p>缺点：</p><ol><li><p>它是一个词袋模型，不考虑词与词之间的顺序（文本中词的顺序信息也是很重要的）</p></li><li><p>假设词与词相互独立（在大多数情况下，词与词是相互影响的）</p></li><li><p>得到的特征是离散稀疏的</p></li></ol><p>向量会过于稀疏，并且会造成维度灾难。</p><p>Dristributed representation可以解决One hot representation的问题，它的思路是通过训练，将每个词都映射到一个较短的词向量上来。所有的这些词向量就构成了向量空间，进而可以用普通的统计学的方法来研究词与词之间的关系。</p><p>从一个可能非常稀疏的向量坐在的空间，映射到现在这个四维向量所在的空间，必须满足以下性质：</p><p>（1）这个映射是单设（不懂的概念自行搜索）；<br>（2）映射之后的向量不会丢失之前的那种向量所含的信息。</p><p>这个过程称为<strong>word embedding（词嵌入）</strong>，即将高维词向量嵌入到一个低维空间。</p><h1 id="word2vec"><a href="#word2vec" class="headerlink" title="word2vec"></a>word2vec</h1><p>word2vec模型其实就是简单化的神经网络。</p><p>Word2vec总共有两种类型，每种类型有两个策略，总共4种。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;word2vec&lt;/p&gt;</summary>
    
    
    
    <category term="AI指北" scheme="https://juoyo.github.io/categories/AI%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="word2vec" scheme="https://juoyo.github.io/tags/word2vec/"/>
    
  </entry>
  
  <entry>
    <title>jieba中文分词官方文档入门</title>
    <link href="https://juoyo.github.io/posts/78cc9031.html"/>
    <id>https://juoyo.github.io/posts/78cc9031.html</id>
    <published>2019-08-07T14:07:08.000Z</published>
    <updated>2019-11-18T02:30:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>jiaba中文分词官方文档入门到进阶。</p><a id="more"></a><h1 id="三种分词模式"><a href="#三种分词模式" class="headerlink" title="三种分词模式"></a>三种分词模式</h1><ul><li><p>精确模式，试图将句子最精确地切开，适合文本分析；</p></li><li><p>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</p></li><li><p>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</p></li></ul><h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><ul><li><code>jieba.cut</code> 接受三个输入参数: 需要分词的字符串；cut_all 控制是否采用全模式；HMM 控制是否使用 HMM 模型。</li></ul><ul><li><p><code>jieba.cut_for_search</code> 方法接受两个参数：需要分词的字符串；是否使用 HMM 模型。</p><p>该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细。</p></li></ul><ol><li>jieba.cut 以及 jieba.cut_for_search 返回的结构都是一个可迭代的 generator，可以使用 for 循环来获得分词后得到的每一个词语(unicode)</li><li>用jieba.lcut 以及 jieba.lcut_for_search 直接返回 list</li></ol><p><code>jieba.Tokenizer(dictionary=DEFAULT_DICT)</code> 新建自定义分词器，可用于同时使用不同词典。<code>jieba.dt</code> 为默认分词器，所有全局分词相关函数都是该分词器的映射。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;我来到北京清华大学&quot;</span>, cut_all=<span class="literal">True</span>)  <span class="comment"># 全模式</span></span><br><span class="line">print(<span class="string">&quot;Full Mode:&quot;</span> + <span class="string">&quot;/&quot;</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;我来到北京清华大学&quot;</span>, cut_all=<span class="literal">False</span>)  <span class="comment"># 精确模式</span></span><br><span class="line">print(<span class="string">&quot;Default Mode:&quot;</span> + <span class="string">&quot;/&quot;</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;他来到了网易杭研大厦&quot;</span>)  <span class="comment"># 默认是精确模式</span></span><br><span class="line">print(<span class="string">&quot;, &quot;</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">&quot;小明硕士毕业于中国科学院计算所，后在日本京都大学深造&quot;</span>)  <span class="comment"># 搜索引擎模式</span></span><br><span class="line">print(<span class="string">&quot;, &quot;</span>.join(seg_list))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Building prefix dict from the default dictionary ...</span><br><span class="line">Loading model from cache C:\Users\yao\AppData\Local\Temp\jieba.cache</span><br><span class="line">Loading model cost 1.829 seconds.</span><br><span class="line">Prefix dict has been built succesfully.</span><br><span class="line"></span><br><span class="line">Full Mode:我&#x2F;来到&#x2F;北京&#x2F;清华&#x2F;清华大学&#x2F;华大&#x2F;大学</span><br><span class="line">Default Mode:我&#x2F;来到&#x2F;北京&#x2F;清华大学</span><br><span class="line">他, 来到, 了, 网易, 杭研, 大厦</span><br><span class="line">小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, ，, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</span><br></pre></td></tr></table></figure><h2 id="添加自定义词典"><a href="#添加自定义词典" class="headerlink" title="添加自定义词典"></a>添加自定义词典</h2><h3 id="载入词典"><a href="#载入词典" class="headerlink" title="载入词典"></a>载入词典</h3><ul><li>用法： jieba.load_userdict(file_name)   # file_name 为文件类对象或自定义词典的路径</li></ul><ul><li><p>词典格式和 <code>dict.txt</code> 一样，一个词占一行；每一行分三部分，用空格隔开，顺序不可颠倒。</p><p>词语  词频（可省略）  词性（可省略）</p></li></ul><p>词典举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># filename: userdict.txt</span><br><span class="line">创新办 3 i</span><br><span class="line">云计算 5</span><br><span class="line">凱特琳 nz</span><br><span class="line">台中</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;jiaba中文分词官方文档入门到进阶。&lt;/p&gt;</summary>
    
    
    
    <category term="AI指北" scheme="https://juoyo.github.io/categories/AI%E6%8C%87%E5%8C%97/"/>
    
    
    <category term="jieba分词" scheme="https://juoyo.github.io/tags/jieba%E5%88%86%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch09 泛型</title>
    <link href="https://juoyo.github.io/posts/a1b3abe2.html"/>
    <id>https://juoyo.github.io/posts/a1b3abe2.html</id>
    <published>2019-08-06T16:14:54.000Z</published>
    <updated>2019-10-07T03:44:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>泛型是一种代码模板，可以套用各种类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cup&lt;T&gt;</span><br><span class="line">Cup&lt;Water&gt;</span><br><span class="line">Cup&lt;Coffee&gt;</span><br><span class="line">Cup&lt;Tea&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="泛型引入"><a href="#泛型引入" class="headerlink" title="泛型引入"></a>泛型引入</h2><h3 id="泛型引入-1"><a href="#泛型引入-1" class="headerlink" title="泛型引入"></a>泛型引入</h3><p>必须把<code>ArrayList</code>变成一种模板：<code>ArrayList&lt;T&gt;</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T e)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>T</code>可以是任何class。这样一来，我们就实现了：编写一次模版，可以创建任意类型的<code>ArrayList</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建可以存储String的ArrayList:</span></span><br><span class="line">ArrayList&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 创建可以存储Float的ArrayList:</span></span><br><span class="line">ArrayList&lt;Float&gt; floatList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line"><span class="comment">// 创建可以存储Person的ArrayList:</span></span><br><span class="line">ArrayList&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br></pre></td></tr></table></figure><p>泛型就是定义一种模板，例如<code>ArrayList&lt;T&gt;</code>，然后在代码中为用到的类创建对应的<code>ArrayList&lt;类型&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>在Java标准库中的<code>ArrayList&lt;T&gt;</code>实现了<code>List&lt;T&gt;</code>接口，它可以向上转型为<code>List&lt;T&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>类型<code>ArrayList&lt;T&gt;</code>可以向上转型为<code>List&lt;T&gt;</code>。</p><p><font color="red"><em>注意</em>：不能把<code>ArrayList&lt;Integer&gt;</code>向上转型为<code>ArrayList&lt;Number&gt;</code>或<code>List&lt;Number&gt;</code>。</font></p><p><font color="red">  ArrayList<Integer>和ArrayList<Number>两者完全没有继承关系。 </Number></Integer></font></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>泛型就是编写模板代码来适应任意类型；</p></li><li><p>泛型的好处是使用时不必对类型进行强制转换，它通过编译器对类型进行检查；</p></li><li><p>泛型的继承关系：可以把<code>ArrayList&lt;Integer&gt;</code>向上转型为<code>List&lt;Integer&gt;</code>（<code>T</code>不能变！），但不能把<code>ArrayList&lt;Integer&gt;</code>向上转型为<code>ArrayList&lt;Number&gt;</code>（<code>T</code>不能变成父类）。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;泛型是一种代码模板，可以套用各种类型：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Cup&amp;lt;T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cup&amp;lt;Water&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cup&amp;lt;Coffee&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cup&amp;lt;Tea&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="泛型" scheme="https://juoyo.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch08 注解</title>
    <link href="https://juoyo.github.io/posts/bc6e4a20.html"/>
    <id>https://juoyo.github.io/posts/bc6e4a20.html</id>
    <published>2019-08-06T16:13:35.000Z</published>
    <updated>2019-10-07T03:48:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>注解（Annotation）是在Java源码的类、方法、字段、参数前的一种特殊“注释”。</p><a id="more"></a><h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><h3 id="注解作用"><a href="#注解作用" class="headerlink" title="注解作用"></a>注解作用</h3><p>Java的注解可以分为三类：</p><p>第一类是由编译器使用的注解，例如：</p><ul><li><code>@Override</code>：让编译器检查该方法是否正确地实现了覆写；</li><li><code>@SuppressWarnings</code>：告诉编译器忽略此处代码产生的警告。</li></ul><p>这类注解不会被编译进入<code>.class</code>文件，它们在编译后就被编译器扔掉了。</p><p>第二类是由工具处理<code>.class</code>文件使用的注解，比如有些工具会在加载class的时候，对class做动态修改，实现一些特殊的功能。这类注解会被编译进入<code>.class</code>文件，但加载结束后并不会存在于内存中。这类注解只被一些底层库使用，一般我们不必自己处理。</p><p>第三类是在程序运行期能够读取的注解，它们在加载后一直存在于JVM中，这也是最常用的注解。例如，一个配置了<code>@PostConstruct</code>的方法会在调用构造方法后自动被调用（这是Java代码读取该注解实现的功能，JVM并不会识别该注解）。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>注解（Annotation）是Java语言用于工具处理的标注：</p><p>注解可以配置参数，没有指定配置的参数使用默认值；</p><p>如果参数名称是<code>value</code>，且只有一个参数，那么可以省略参数名称。</p><hr><h2 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h2><hr><h2 id="处理注解"><a href="#处理注解" class="headerlink" title="处理注解"></a>处理注解</h2><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>可以在运行期通过反射读取<code>RUNTIME</code>类型的注解，注意千万不要漏写<code>@Retention(RetentionPolicy.RUNTIME)</code>，否则运行期无法读取到该注解。</p><p>可以通过程序处理注解来实现相应的功能：</p><ul><li>对JavaBean的属性值按规则进行检查；</li><li>JUnit会自动运行<code>@Test</code>标记的测试方法。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;注解（Annotation）是在Java源码的类、方法、字段、参数前的一种特殊“注释”。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="注解" scheme="https://juoyo.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="Annotation" scheme="https://juoyo.github.io/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch07 反射</title>
    <link href="https://juoyo.github.io/posts/b8b68207.html"/>
    <id>https://juoyo.github.io/posts/b8b68207.html</id>
    <published>2019-08-06T16:05:47.000Z</published>
    <updated>2019-10-07T03:48:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>反射Reflection，Java的反射是指程序在运行期可以获取一个对象的所有信息。反射是为了解决在运行期，对某个实例一无所知的情况下，如何调用其方法。</p><a id="more"></a><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>由于JVM为每个加载的<code>class</code>创建了对应的<code>Class</code>实例，并在实例中保存了该<code>class</code>的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个<code>Class</code>实例，我们就可以通过这个<code>Class</code>实例获取到该实例对应的<code>class</code>的所有信息。</p><p>这种通过<code>Class</code>实例获取<code>class</code>信息的方法称为反射（Reflection）。</p><p>获取一个<code>class</code>的<code>Class</code>实例有三个方法：</p><p>方法一：直接通过一个<code>class</code>的静态变量<code>class</code>获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = String.class;</span><br></pre></td></tr></table></figure><p>方法二：如果我们有一个实例变量，可以通过该实例变量提供的<code>getClass()</code>方法获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Class cls = s.getClass();</span><br></pre></td></tr></table></figure><p>方法三：如果知道一个<code>class</code>的完整类名，可以通过静态方法<code>Class.forName()</code>获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>JVM为每个加载的<code>class</code>及<code>interface</code>创建了对应的<code>Class</code>实例来保存<code>class</code>及<code>interface</code>的所有信息；</p></li><li><p>获取一个<code>class</code>对应的<code>Class</code>实例后，就可以获取该<code>class</code>的所有信息；</p></li><li><p>通过Class实例获取<code>class</code>信息的方法称为反射（Reflection）；</p></li><li><p>JVM总是动态加载<code>class</code>，可以在运行期根据条件来控制加载class。</p></li></ul><hr><h2 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h2><h3 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h3><p>Class类提供了以下几个方法来获取字段：</p><ul><li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li><li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li><li>Field[] getFields()：获取所有public的field（包括父类）</li><li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class stdClass = Student.class;</span><br><span class="line">        <span class="comment">// 获取public字段&quot;score&quot;:</span></span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取继承的public字段&quot;name&quot;:</span></span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取private字段&quot;grade&quot;:</span></span><br><span class="line">        System.out.println(stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先获取<code>Student</code>的<code>Class</code>实例，然后，分别获取<code>public</code>字段、继承的<code>public</code>字段以及<code>private</code>字段，打印出的<code>Field</code>类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Student.score</span><br><span class="line"><span class="keyword">public</span> java.lang.String Person.name</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> Student.grade</span><br></pre></td></tr></table></figure><h3 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h3><p>对于一个<code>Person</code>实例，我们可以先拿到<code>name</code>字段对应的<code>Field</code>，再获取这个实例的<code>name</code>字段的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object p = <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Ming&quot;</span>);</span><br><span class="line">        Class c = p.getClass();</span><br><span class="line">        Field f = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);  <span class="comment">//不管字段是不是public，一律允许访问。</span></span><br><span class="line">        Object value = f.get(p);</span><br><span class="line">        System.out.println(value); <span class="comment">// &quot;Xiao Ming&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正常情况下，<code>Main</code>类无法访问<code>Person</code>类的<code>private</code>字段。要修复错误，可以将<code>private</code>改为<code>public</code>，或者，在调用<code>Object value = f.get(p);</code>前增加f.setAccessible(true);</p><p>如果使用反射可以获取<code>private</code>字段的值，那么类的封装还有什么意义？</p><p>正常情况下，通过<code>p.name</code>来访问<code>Person</code>的<code>name</code>字段，编译器会根据<code>public</code>、<code>protected</code>和<code>private</code>决定是否允许访问字段，这样就达到了数据封装的目的。</p><p><font color="green">反射是一种非常规的用法，使用反射，首先代码非常繁琐，其次，它更多地是给工具或者底层框架来使用，目的是在不知道目标实例任何信息的情况下，获取特定字段的值。</font></p><h3 id="设置字段值"><a href="#设置字段值" class="headerlink" title="设置字段值"></a>设置字段值</h3><p>通过Field实例既然可以获取到指定实例的字段值，自然也可以<font color="green">设置</font>字段的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Ming&quot;</span>);</span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Xiao Ming&quot;</span></span><br><span class="line">        Class c = p.getClass();</span><br><span class="line">        Field f = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(p, <span class="string">&quot;Xiao Hong&quot;</span>);</span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Xiao Hong&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Xiao Ming</span><br><span class="line">Xiao Hong</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Java的反射API提供的<code>Field</code>类封装了字段的所有信息：</p><p>通过<code>Class</code>实例的方法可以获取<code>Field</code>实例：<code>getField()</code>，<code>getFields()</code>，<code>getDeclaredField()</code>，<code>getDeclaredFields()</code>；</p><p>通过Field实例可以获取字段信息：<code>getName()</code>，<code>getType()</code>，<code>getModifiers()</code>；</p><p>通过Field实例可以读取或设置某个对象的字段，如果存在访问限制，要首先调用<code>setAccessible(true)</code>来访问非<code>public</code>字段。</p><p>通过反射读写字段是一种非常规方法，它会破坏对象的封装。</p><hr><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><h3 id="调用方法-1"><a href="#调用方法-1" class="headerlink" title="调用方法"></a>调用方法</h3><p>可以通过<code>Class</code>实例获取所有<code>Method</code>信息。<code>Class</code>类提供了以下几个方法来获取<code>Method</code>：</p><ul><li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li><li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li></ul><h2 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h2><hr><h2 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h2><hr><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;反射Reflection，Java的反射是指程序在运行期可以获取一个对象的所有信息。反射是为了解决在运行期，对某个实例一无所知的情况下，如何调用其方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="反射" scheme="https://juoyo.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
    <category term="Reflection" scheme="https://juoyo.github.io/tags/Reflection/"/>
    
  </entry>
  
  <entry>
    <title>读论文3 基于文本语义相似度的计算机辅助定密系统研究与实现</title>
    <link href="https://juoyo.github.io/posts/69d5a5fc.html"/>
    <id>https://juoyo.github.io/posts/69d5a5fc.html</id>
    <published>2019-07-23T15:51:45.000Z</published>
    <updated>2019-07-27T02:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于文本语义相似度的计算机辅助定密系统</p><a id="more"></a><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><ol><li><p>构建基于树型结构的定密规则，形成定密规则库。根据待定密文档所属行业领域，对文档内容进行分词和聚类，检索并匹配定密规则库来判定文档密级。</p></li><li><p>针对不能有效匹配定密规则库的目标文档，提出了一种基于加权语义相似度分析的文档定密方法。对文档进行分词和去停用词之后，对新得到的文档中的词语进行语义概念降维与排歧，使词与词之间达到正交，Ｗ便将文本的特征词用更小的特征空间向量进行表示。在此基础之上，提出一种加权的语义相似度Ｋ－最近邻算法，实现对中文文本最后的密级分类。该算法首先ＷＨｏｗｎｅｔ为基础，计算文本的语义相似度，并在该相似度的基础上加入了文本特征词的频率和逆文档频率（ＴＦＩＤＦ值）及特征词在文档中的位置权重作为其权重，最后结合机器学习中的ＫＮＮ分类算法来对文档的密级进行分类。通过实验发现，加权的语义文本相似度的ＫＮＮ算法的分类效果比加权之前的基于语义相似度的ＫＮＮ算法的分类效果好，运算所消耗的时间也较短。</p></li></ol><h1 id="基于定密规则的文档密级确定方法"><a href="#基于定密规则的文档密级确定方法" class="headerlink" title="基于定密规则的文档密级确定方法"></a>基于定密规则的文档密级确定方法</h1><p>根据保密法和国家秘密及其密级具体范围的规定及秘密事项细目建立树型结构的定密规则，并根据这些树型结构定密规则构建起各个行业领域的定密规则库，然后匹配待定密文档与定密规则库的定密规则，最终根据匹配结果确定文档的密级。</p><h2 id="定密规则库的构建"><a href="#定密规则库的构建" class="headerlink" title="定密规则库的构建"></a>定密规则库的构建</h2><p>利用Ｍａｐ这个数据结构的键值对对定密规则进行存储，将定密规则存储为Ｍａｐ的值（ｖａｌｕｅ），将规则所对应的密级存储为Ｍａｐ的键（ｋｅｙ）。</p><h2 id="解析待定密文档"><a href="#解析待定密文档" class="headerlink" title="解析待定密文档"></a>解析待定密文档</h2><p>处理中文文本信息的基础性工作和关键性工作是对中文文本进行词法分析，而分词作为对中文文本语法分析和语义分析的起点。</p><p>由中国科学院计算技术研究所的张华平先生设计开发出来的ＮＬＰＩＲ分词系统，其分词的正确率高达９７．５８％，未登录词的识别率和召回率均高于９０％，其中，对于中国人名的识别召回率可接近９８％，其处理文本的速度为３１．５Ｋｂｙｔｅｓ／ｓ，不难看出，ＮＬＰＨＩ分词系统具有很高的实践性和正确性。</p><p>ＮＬＰ化分词系统采用ＨＭＭ模型，建立切分词图。在对文本词语的粗分阶段，首先通过计算得出Ｎ个概率最大的切分词语的结果，然后，利用角色标注的方法识别未登录词，并计算未登录词的概率，在切分词图中加入这些未登录词，在之后的操作中就将这些已经加入切分词图中的未登录词视为普通的词语进行处理，最终对切分标注结果进行动态规划选出Ｎ个最大概率切分结果。</p><h2 id="密级确定"><a href="#密级确定" class="headerlink" title="密级确定"></a>密级确定</h2><p>对定密规则库中的每一条定密规则逐条进行匹配，如果文档中出现了与定密规则中相同的词，我们就把定密规则中的这个词ｒｅｍｏｖｅ掉，最后判断定密规则的值的大小，如果值的大小为１，即ｖａｌｕｅ＝ＮＵ化，我们就判定这个文档的密级为这个ｖａｌｕｅ为空的规则所对应的ｋｅｙ的值；如果值的大小大于１，则说明这篇文档不符合这条定密规则。</p><h1 id="基于加权文本语义相似度的文档密级确定方法"><a href="#基于加权文本语义相似度的文档密级确定方法" class="headerlink" title="基于加权文本语义相似度的文档密级确定方法"></a>基于加权文本语义相似度的文档密级确定方法</h1><h2 id="文本分类的定义和过程"><a href="#文本分类的定义和过程" class="headerlink" title="文本分类的定义和过程"></a>文本分类的定义和过程</h2><p>文本分类属于有指导的学习，一般可将文本分类分为训练阶段和分类阶段。</p><p>文本分类的分类过程一般包括五个步骤：文本预处理、文本表示、特征选择、权重计算、分类算法。文本预处理，主要是指对文本分词、去停用词、文本词频统计等处理过程；文本表示，主要把使用自然语言构成的文本转换成为使计算机能够识别和理解的形式，使计算机在处理文档的时候更加方便，更加容易；特征选择，主要是指从一个文本中提取出一些特别的词语，可Ｗ用这些词语来表示这<br>个文本，通常这些词语在文本中最具代表性，并且对这个文档的分类有重要的贡献；权重计算，主要是指按某种方法计算并赋予特征词相应的权值；分类算法，主要指如何对训练样本集进行训练和学习，并且根据训练和学习的结果，对测试样本中的文本进行准确而有效的分类。</p><h2 id="文本分类关键技术简介"><a href="#文本分类关键技术简介" class="headerlink" title="文本分类关键技术简介"></a>文本分类关键技术简介</h2><p>（１）文本预处理<br>为了方便文本分类后续的操作，首先就是要对文本进行预处理，将语料库中原始的文本转化为统一的格式。</p><p>１）分词</p><p>目前，汉语分词算法一般可Ｗ分为Ｗ下Ｈ个大类：基于字典和词库匹配的机械分词方法、基于知识理解的分词方法以及基于统计的分词方法。</p><p>２）去停用词</p><p>停用词是指那些在文本中出现次数很多，但是在文本分类方面几乎起不到任何作用的词。</p><p>（２）文本表示</p><p>向量空间模型将文本简化为向量的形式来进行表示，把文本分类的过程简化为对空间向量的一系列运算。但是，向量空间模型基于的文本特征词之间相互独立的假设存在一些问题，因为模型假设文本的特征词之间是相互独立的、没有先后顺序的，但实际上这些特征词之间并不是独立存在的，特征词之间还存在着同义关系，近似关系等语义方面的联系。</p><p>向量空间模型主要两个基本问题；特征词选择和项的权重计算。</p><p>（３）特征选择<br>经过文本的预处理Ｗ后，程序就能得到一个由文档中所有词语所组成的文本特征全集。需要对文本中的特征词进行筛选和优化，从原始的特征全集中提取出一个最优的特征子集。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于文本语义相似度的计算机辅助定密系统&lt;/p&gt;</summary>
    
    
    
    <category term="读论文" scheme="https://juoyo.github.io/categories/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="语义相似度" scheme="https://juoyo.github.io/tags/%E8%AF%AD%E4%B9%89%E7%9B%B8%E4%BC%BC%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>读论文2 基于关键词相关度的计算机辅助定密技术研究</title>
    <link href="https://juoyo.github.io/posts/300234ae.html"/>
    <id>https://juoyo.github.io/posts/300234ae.html</id>
    <published>2019-07-21T16:00:57.000Z</published>
    <updated>2019-07-22T13:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>采用基于词激活力的文档语义网络来计算文档相似度，并最终确定文档密级。</p><a id="more"></a><p>首先，论文研究了基于领域关键词对文档进行分词并进行向量化表示方法；其次，基于词激活力构建文档的语义网络，为文档的向量化表示模型增加语义层特征；再次，Ｗ文档的增强型向量表示为基础，计算待定密文档与已定密样本文档的相似性；最后基于文本相似度确定待定密文档的密级。</p><h2 id="文档命名实体识别"><a href="#文档命名实体识别" class="headerlink" title="文档命名实体识别"></a>文档命名实体识别</h2><p>命名实体是指从文本中识别具有特定语义含义的实体。</p><p>命名实体识别的任务就是识别出待处理文本中3大类（实体类、时间类和数字类）、7小类（人名、机构名、地名、时间、日期、货币和百分比）命名实体</p><p>命名实体识别的主要技术方法分为3种：基于规则和词典的方法、基于统计的方法、二者混合的方法。</p><h2 id="基于词激活力的涉密文档相似度计算方法"><a href="#基于词激活力的涉密文档相似度计算方法" class="headerlink" title="基于词激活力的涉密文档相似度计算方法"></a>基于词激活力的涉密文档相似度计算方法</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;采用基于词激活力的文档语义网络来计算文档相似度，并最终确定文档密级。&lt;/p&gt;</summary>
    
    
    
    <category term="读论文" scheme="https://juoyo.github.io/categories/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="关键词" scheme="https://juoyo.github.io/tags/%E5%85%B3%E9%94%AE%E8%AF%8D/"/>
    
    <category term="相似度" scheme="https://juoyo.github.io/tags/%E7%9B%B8%E4%BC%BC%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>读论文1 Automatically Labeled Data Generation for Large Scale Event Extraction</title>
    <link href="https://juoyo.github.io/posts/a5b89cc.html"/>
    <id>https://juoyo.github.io/posts/a5b89cc.html</id>
    <published>2019-07-18T16:29:05.000Z</published>
    <updated>2019-07-21T15:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>ACL（The Association for ComputationalLinguistics）是自然语言处理与计算语言学领域最具影响力、最具活力的级别学术会议，由计算语言学协会主办，每年一届。</p><a id="more"></a><p>ACL 2017 公布了录用的论文，其中包含生物医学、认知建模与心理语言学、交互式对话系统、机器翻译等各研究领域的 194 篇长篇论文、107篇短篇论文、21 个软件演示以及 21 篇在由 TACL （Transactions of the Association for Computational Linguistics）接收出版并将在 ACL 2017 上进行主题演讲报告的论文。</p><p>本文阅读的论文是：</p><p><strong>Automatically Labeled Data Generation for Large Scale Event Extraction</strong></p><ul><li>作者：Yubo Chen, Kang Liu and Jun Zhao</li><li>幻灯片地址：<a href="http://t.cn/RXm3vz0">http://t.cn/RXm3vz0</a></li><li>论文地址：<a href="https://www.aclweb.org/anthology/P17-1038">https://www.aclweb.org/anthology/P17-1038</a></li></ul><p>这篇文章关注对event extraction提供标注数据的方法。传统的hand-labeled的训练数据非常昂贵，并且event覆盖的非常有限。这使得一些supervised的方法很难去抽取大规模的event来进行KBP(knowledge base population)。为了解决数据标注的问题，作者提出了一个利用world knowledge和linguistic knowledge来自动标注event extraction所需要的数据的方法。这个方法能够探测到每一个event type的key argument和trigger word，然后用它们来从文本中标注event。实验结果显示大规模自动标注的数据与精心设计的人工标注的数据效果相当。所提出的自动标注的数据能够与人工标注的数据结合用来提高利用这些数据训练的模型的性能。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ACL（The Association for ComputationalLinguistics）是自然语言处理与计算语言学领域最具影响力、最具活力的级别学术会议，由计算语言学协会主办，每年一届。&lt;/p&gt;</summary>
    
    
    
    <category term="读论文" scheme="https://juoyo.github.io/categories/%E8%AF%BB%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="ACL" scheme="https://juoyo.github.io/tags/ACL/"/>
    
    <category term="event extraction" scheme="https://juoyo.github.io/tags/event-extraction/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch06 异常</title>
    <link href="https://juoyo.github.io/posts/2d48a616.html"/>
    <id>https://juoyo.github.io/posts/2d48a616.html</id>
    <published>2019-07-12T15:38:05.000Z</published>
    <updated>2019-08-12T23:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容是Java处理异常，包括捕获、抛出、自定义以及处理异常等。</p><a id="more"></a><h1 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h1><p>三种类型的异常：</p><ul><li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li></ul><hr><h2 id="Exception-类的层次"><a href="#Exception-类的层次" class="headerlink" title="Exception 类的层次"></a>Exception 类的层次</h2><p>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/12-130Q1234I6223.jpg" alt="img"></p><hr><h2 id="Java-内置异常类"><a href="#Java-内置异常类" class="headerlink" title="Java 内置异常类"></a>Java 内置异常类</h2><p>Java 语言定义了一些异常类在 java.lang 标准包中。</p><p>标准运行时异常类的子类是最常见的异常类。由于 java.lang 包是默认加载到所有的 Java 程序的，所以大部分从运行时异常类继承而来的异常都可以直接使用。</p><p>Java 根据各个类库也定义了一些其他的异常，下面的表中列出了 Java 的<strong>非检查性异常</strong>。</p><table><thead><tr><th align="left"><strong>异常</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">ArithmeticException</td><td align="left">当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例。</td></tr><tr><td align="left">ArrayIndexOutOfBoundsException</td><td align="left">用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</td></tr><tr><td align="left">ArrayStoreException</td><td align="left">试图将错误类型的对象存储到一个对象数组时抛出的异常。</td></tr><tr><td align="left">ClassCastException</td><td align="left">当试图将对象强制转换为不是实例的子类时，抛出该异常。</td></tr><tr><td align="left">IllegalArgumentException</td><td align="left">抛出的异常表明向方法传递了一个不合法或不正确的参数。</td></tr><tr><td align="left">IllegalMonitorStateException</td><td align="left">抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。</td></tr><tr><td align="left">IllegalStateException</td><td align="left">在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。</td></tr><tr><td align="left">IllegalThreadStateException</td><td align="left">线程没有处于请求操作所要求的适当状态时抛出的异常。</td></tr><tr><td align="left">IndexOutOfBoundsException</td><td align="left">指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</td></tr><tr><td align="left">NegativeArraySizeException</td><td align="left">如果应用程序试图创建大小为负的数组，则抛出该异常。</td></tr><tr><td align="left">NullPointerException</td><td align="left">当应用程序试图在需要对象的地方使用 <code>null</code> 时，抛出该异常</td></tr><tr><td align="left">NumberFormatException</td><td align="left">当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</td></tr><tr><td align="left">SecurityException</td><td align="left">由安全管理器抛出的异常，指示存在安全侵犯。</td></tr><tr><td align="left">StringIndexOutOfBoundsException</td><td align="left">此异常由 <code>String</code> 方法抛出，指示索引或者为负，或者超出字符串的大小。</td></tr><tr><td align="left">UnsupportedOperationException</td><td align="left">当不支持请求的操作时，抛出该异常。</td></tr></tbody></table><p>下面的表中列出了 Java 定义在 java.lang 包中的<strong>检查性异常类</strong>。</p><table><thead><tr><th align="left"><strong>异常</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">ClassNotFoundException</td><td align="left">应用程序试图加载类时，找不到相应的类，抛出该异常。</td></tr><tr><td align="left">CloneNotSupportedException</td><td align="left">当调用 <code>Object</code> 类中的 <code>clone</code> 方法克隆对象，但该对象的类无法实现 <code>Cloneable</code> 接口时，抛出该异常。</td></tr><tr><td align="left">IllegalAccessException</td><td align="left">拒绝访问一个类的时候，抛出该异常。</td></tr><tr><td align="left">InstantiationException</td><td align="left">当试图使用 <code>Class</code> 类中的 <code>newInstance</code> 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</td></tr><tr><td align="left">InterruptedException</td><td align="left">一个线程被另一个线程中断，抛出该异常。</td></tr><tr><td align="left">NoSuchFieldException</td><td align="left">请求的变量不存在</td></tr><tr><td align="left">NoSuchMethodException</td><td align="left">请求的方法不存在</td></tr></tbody></table><hr><h1 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h1><p>使用 try/catch 的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e1)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//Catch 块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多重捕获块"><a href="#多重捕获块" class="headerlink" title="多重捕获块"></a>多重捕获块</h2><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p><p>多重捕获块的语法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throws-throw-关键字："><a href="#throws-throw-关键字：" class="headerlink" title="throws/throw 关键字："></a>throws/throw 关键字：</h2><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p><p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p><p>下面方法的声明抛出一个 RemoteException 异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">className</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> RemoteException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// Method implementation</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RemoteException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//Remainder of class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h2><p>finally 关键字用来创建在 try 代码块后面执行的代码块。</p><p>无论是否发生异常，finally 代码块中的代码总会被执行。</p><p>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p><p>finally 代码块出现在 catch 代码块最后，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明自定义异常"><a href="#声明自定义异常" class="headerlink" title="声明自定义异常"></a>声明自定义异常</h2><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p><ul><li>所有异常都必须是 Throwable 的子类。</li><li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li><li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li></ul><p>可以像下面这样定义自己的异常类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要内容是Java处理异常，包括捕获、抛出、自定义以及处理异常等。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="异常" scheme="https://juoyo.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>概率论</title>
    <link href="https://juoyo.github.io/posts/155618b9.html"/>
    <id>https://juoyo.github.io/posts/155618b9.html</id>
    <published>2019-07-02T15:01:09.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要复习概率论相关概念、分布函数、概率密度等。</p><a id="more"></a><h2 id="概率及相关定义"><a href="#概率及相关定义" class="headerlink" title="概率及相关定义"></a>概率及相关定义</h2><h3 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><img src="/posts/155618b9.htm/1.gif"></p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p><img src="/posts/155618b9.htm/2.gif"></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">链式法则：</span><br><span class="line"><span class="variable">P</span><span class="punctuation">(</span><span class="variable">A1A2</span><span class="operator">...</span><span class="variable">An</span><span class="punctuation">)</span> <span class="operator">=</span> <span class="variable">P</span><span class="punctuation">(</span><span class="variable">A1</span><span class="punctuation">)</span><span class="variable">P</span><span class="punctuation">(</span><span class="variable">A2</span><span class="operator">|</span><span class="variable">A1</span><span class="punctuation">)</span><span class="variable">P</span><span class="punctuation">(</span><span class="variable">A3</span><span class="operator">|</span><span class="variable">A1A2</span><span class="punctuation">)</span></span><br><span class="line"><span class="operator">...</span><span class="variable">P</span><span class="punctuation">(</span><span class="variable">An</span><span class="operator">|</span><span class="variable">A1A2A3</span><span class="operator">...</span><span class="variable">An</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="全概率"><a href="#全概率" class="headerlink" title="全概率"></a>全概率</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p><img src="/posts/155618b9.htm/3.gif"></p><p><img src="/posts/155618b9.htm/4.gif"></p><h4 id="条件概率的全概率公式"><a href="#条件概率的全概率公式" class="headerlink" title="条件概率的全概率公式"></a>条件概率的全概率公式</h4><p><img src="/posts/155618b9.htm/5.gif"></p><h3 id="Bayes公式"><a href="#Bayes公式" class="headerlink" title="Bayes公式"></a>Bayes公式</h3><p><img src="/posts/155618b9.htm/6.gif"></p><p>P(AB) = P(A) * P(B|A) = P(B) * P(A|B)</p><h3 id="连续函数Bayes公式"><a href="#连续函数Bayes公式" class="headerlink" title="连续函数Bayes公式"></a>连续函数Bayes公式</h3><p><img src="/posts/155618b9.htm/7.gif"></p><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p><img src="/posts/155618b9.htm/8.gif"></p><p><img src="/posts/155618b9.htm/9.gif"></p><h3 id="一维离散连续常用分布"><a href="#一维离散连续常用分布" class="headerlink" title="一维离散连续常用分布"></a>一维离散连续常用分布</h3><h3 id="分布函数和概率密度"><a href="#分布函数和概率密度" class="headerlink" title="分布函数和概率密度"></a>分布函数和概率密度</h3><h3 id="随机变量的函数分布"><a href="#随机变量的函数分布" class="headerlink" title="随机变量的函数分布"></a>随机变量的函数分布</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要复习概率论相关概念、分布函数、概率密度等。&lt;/p&gt;</summary>
    
    
    
    <category term="概率论与数理统计" scheme="https://juoyo.github.io/categories/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="概率论" scheme="https://juoyo.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch05 核心类</title>
    <link href="https://juoyo.github.io/posts/7812c0e4.html"/>
    <id>https://juoyo.github.io/posts/7812c0e4.html</id>
    <published>2019-06-28T09:58:08.000Z</published>
    <updated>2019-08-12T13:49:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容为介绍Java核心类，包括字符串、StringBuilder、包装类型、JavaBean等。</p><a id="more"></a><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p><code>String</code>是一个引用类型，它本身也是一个<code>class</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><p>字符串<em>不可变</em>，不可变性是通过内部的<code>private final char[]</code>字段，以及没有任何修改<code>char[]</code>的方法实现的。</p><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>实际上是想比较字符串的<strong>内容</strong>是否相同，必须使用<code>equals()</code>方法而不能用<code>==</code>。</p><p>Java编译器在编译期，会自动把所有相同的字符串当作一个对象放入常量池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;HELLO&quot;</span>.toLowerCase();</span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>要忽略大小写比较，使用<code>equalsIgnoreCase()</code>方法。</p><p><font color="red">equal</font>&gt;</p><p>public boolean equals(Object obj)</p><p>equals 方法在非空对象引用上实现相等关系：</p><ul><li>自反性：对于任何非空引用值 x，x.equals(x) 都应返回 true。</li><li>对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应返回 true。</li><li>传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应返回true。</li><li>一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或始终返回 false，前提是对象上 equals 比较中所用的信息没有被修改。</li><li>对于任何非空引用值 x，x.equals(null) 都应返回 false。</li></ul><p><font color="red">注意：</font>&gt;当此方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常</p><p>规协定，该协定声明相等对象必须具有相等的哈希码。</p><p><strong>参数：</strong><br>obj - 要与之比较的引用对象。</p><p><strong>返回：</strong><br>如果此对象与 obj 参数相同，则返回 true；否则返回 false。</p><h3 id="返回字符索引、提取子字符串"><a href="#返回字符索引、提取子字符串" class="headerlink" title="返回字符索引、提取子字符串"></a>返回字符索引、提取子字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否包含子串:</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.contains(<span class="string">&quot;ll&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回字符在字符串中的第一个索引</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.indexOf(<span class="string">&quot;l&quot;</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回字符在字符串中的最后一个索引</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.lastIndexOf(<span class="string">&quot;l&quot;</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.startsWith(<span class="string">&quot;He&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.endsWith(<span class="string">&quot;lo&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取子字符串</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.substring(<span class="number">2</span>); <span class="comment">// &quot;llo&quot;</span></span><br><span class="line"><span class="string">&quot;Hello&quot;</span>.substring(<span class="number">2</span>, <span class="number">4</span>); <span class="string">&quot;ll&quot;</span></span><br></pre></td></tr></table></figure><h3 id="去除首尾空白"><a href="#去除首尾空白" class="headerlink" title="去除首尾空白"></a>去除首尾空白</h3><h4 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h4><p>移除字符串首尾的空格，<code>\t</code>，<code>\r</code>，<code>\n</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s3 = <span class="string">&quot;  \tHello\r\n &quot;</span>.trim(); <span class="comment">// &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><p><code>trim()</code>并没有改变字符串的内容，而是<strong>返回了一个新字符串</strong>。(s3=”Hello”)</p><h4 id="strip"><a href="#strip" class="headerlink" title="strip()"></a>strip()</h4><p>JAVA11(JDK11)中的strip()方法，适用于字符首尾空白是Unicode空白字符的情况。</p><p>类似**中文的空格字符<code>\u3000</code>**也会被移除。</p><p> Character c = ‘\u2000’;中’\u2000’就是Unicdoe空白字符。</p><h3 id="isEmpty-和-isBlank"><a href="#isEmpty-和-isBlank" class="headerlink" title="isEmpty() 和 isBlank()"></a>isEmpty() 和 isBlank()</h3><p>isEmpty()判断字符串长度是否为0</p><p>isBlank()判断字符串是否由空白字符组成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.isEmpty(); <span class="comment">// true，因为字符串长度为0</span></span><br><span class="line"><span class="string">&quot;  &quot;</span>.isEmpty(); <span class="comment">// false，因为字符串长度不为0</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;  \n&quot;</span>.isBlank(); <span class="comment">// true，因为只包含空白字符</span></span><br><span class="line"><span class="string">&quot; Hello &quot;</span>.isBlank(); <span class="comment">// false，因为包含非空白字符</span></span><br></pre></td></tr></table></figure><h3 id="替换子串"><a href="#替换子串" class="headerlink" title="替换子串"></a>替换子串</h3><h4 id="根据字符串替换"><a href="#根据字符串替换" class="headerlink" title="根据字符串替换"></a>根据字符串替换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">s.replace(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;w&#x27;</span>); <span class="comment">// &quot;hewwo&quot;，所有字符&#x27;l&#x27;被替换为&#x27;w&#x27;</span></span><br><span class="line">s.replace(<span class="string">&quot;ll&quot;</span>, <span class="string">&quot;~~&quot;</span>); <span class="comment">// &quot;he~~o&quot;，所有子串&quot;ll&quot;被替换为&quot;~~&quot;</span></span><br></pre></td></tr></table></figure><h4 id="正则表达式替换"><a href="#正则表达式替换" class="headerlink" title="正则表达式替换"></a>正则表达式替换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;A,,B;C ,D&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配的子串统一替换为&quot;,&quot;</span></span><br><span class="line">s.replaceAll(<span class="string">&quot;[\\,\\;\\s]+&quot;</span>, <span class="string">&quot;,&quot;</span>); <span class="comment">// &quot;A,B,C,D&quot;</span></span><br></pre></td></tr></table></figure><h3 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;A,B,C,D&quot;</span>;</span><br><span class="line">String[] ss = s.split(<span class="string">&quot;\\,&quot;</span>); <span class="comment">// &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>使用split()方法，传入的参数也是正则表达式。</p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = &#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>&#125;;</span><br><span class="line">String s = String.join(<span class="string">&quot;***&quot;</span>, arr); <span class="comment">// &quot;A***B***C&quot;</span></span><br></pre></td></tr></table></figure><p>join()方法用指定的字符串连接字符数组各元素。</p><h3 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h3><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><p>把<strong>任意基本类型或引用类型转换为字符串</strong>，可以使用静态方法<code>valueOf()</code>。这是一个重载方法，编译器会根据参数自动选择合适的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String.valueOf(<span class="number">123</span>); <span class="comment">// &quot;123&quot;</span></span><br><span class="line">String.valueOf(<span class="number">45.67</span>); <span class="comment">// &quot;45.67&quot;</span></span><br><span class="line">String.valueOf(<span class="keyword">true</span>); <span class="comment">// &quot;true&quot;</span></span><br><span class="line">String.valueOf(<span class="keyword">new</span> Object()); <span class="comment">// 类似java.lang.Object@636be97c</span></span><br></pre></td></tr></table></figure><h4 id="字符串转换为int"><a href="#字符串转换为int" class="headerlink" title="字符串转换为int"></a>字符串转换为int</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n1 = Integer.parseInt(<span class="string">&quot;123&quot;</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">int</span> n2 = Integer.parseInt(<span class="string">&quot;ff&quot;</span>, <span class="number">16</span>); <span class="comment">// 按十六进制转换，255</span></span><br></pre></td></tr></table></figure><h4 id="字符串转换为boolean"><a href="#字符串转换为boolean" class="headerlink" title="字符串转换为boolean"></a>字符串转换为boolean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b1 = Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">boolean</span> b2 = Boolean.parseBoolean(<span class="string">&quot;FALSE&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="转换为char"><a href="#转换为char" class="headerlink" title="转换为char[]"></a>转换为char[]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] cs = <span class="string">&quot;Hello&quot;</span>.toCharArray(); <span class="comment">// String -&gt; char[]</span></span><br><span class="line">String s = <span class="keyword">new</span> String(cs); <span class="comment">// char[] -&gt; String</span></span><br></pre></td></tr></table></figure><p>通过<code>new String(char[])</code>创建新的<code>String</code>实例时，不会直接引用传入的<code>char[]</code>数组，而是会复制一份，所以，修改外部的<code>char[]</code>数组不会影响<code>String</code>实例内部的<code>char[]</code>数组，因为这是两个不同的数组。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>Java字符串<code>String</code>是不可变对象；</li><li>字符串操作不改变原字符串内容，而是返回新字符串；</li><li>常用的字符串操作：提取子串、查找、替换、大小写转换等；</li><li>Java使用Unicode编码表示<code>String</code>和<code>char</code>；</li><li>转换编码就是将<code>String</code>和<code>byte[]</code>转换，需要指定编码；</li><li>转换为<code>byte[]</code>时，始终优先考虑<code>UTF-8</code>编码。</li></ul><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>使用+连接字符串时，每次都会创建新的字符串对象，影响GC效率。</p><p>Java标准库提供了<code>StringBuilder</code>，它是一个可变对象，可以预分配缓冲区，这样，往<code>StringBuilder</code>中新增字符时，不会创建新的临时对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    sb.append(i);</span><br><span class="line">    sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">String s = sb.toString();</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,</span><br></pre></td></tr></table></figure><p><code>StringBuilder</code>进行链式操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;Mr &quot;</span>)</span><br><span class="line">          .append(<span class="string">&quot;Bob&quot;</span>)</span><br><span class="line">          .append(<span class="string">&quot;!&quot;</span>)</span><br><span class="line">          .insert(<span class="number">0</span>, <span class="string">&quot;Hello, &quot;</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, Mr Bob!</span><br></pre></td></tr></table></figure><p>查看<code>StringBuilder</code>的源码，定义的append（）方法会返回this，这样可以不断调用自身的其他方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Adder adder = <span class="keyword">new</span> Adder();</span><br><span class="line">        adder.add(<span class="number">3</span>)</span><br><span class="line">             .add(<span class="number">5</span>)</span><br><span class="line">             .inc()</span><br><span class="line">             .add(<span class="number">10</span>);</span><br><span class="line">        System.out.println(adder.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Adder <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        sum += n;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Adder <span class="title">inc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sum ++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><p>adder.add(3)<br>             .add(5)<br>             .inc()<br>             .add(10);</p><p>add方法返回this，即哪个对象调用add方法，则返回哪个对象，此处返回adder对象，因此可以继续调用自身的其他方法。</p><p><code>StringBuffer</code>是Java早期的一个<code>StringBuilder</code>的线程安全版本，通过同步来保证多个线程操作<code>StringBuffer</code>是安全的，但是同步会带来执行速度的下降。</p><p><font color="red"><code>StringBuilder</code>和<code>StringBuffer</code>接口完全相同，推荐使用StringBuilder。</font></p><h2 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h2><p>实际上是运用了StringBuilder的一个拼接字符串的封装处理，用于构造由分隔符分隔的字符序列，并可选择性地从提供的前缀开始和以提供的后缀结尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StringJoiner sj = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    sj.add(<span class="string">&quot;George&quot;</span>).add(<span class="string">&quot;Sally&quot;</span>).add(<span class="string">&quot;Fred&quot;</span>);</span><br><span class="line">    String desiredString = sj.toString();</span><br><span class="line">    System.out.println(desiredString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[George:Sally:Fred]</span><br></pre></td></tr></table></figure><p>StringJoiner类源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringJoiner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String prefix;<span class="comment">//前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String delimiter;<span class="comment">//间隔符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String suffix;<span class="comment">//后缀</span></span><br><span class="line">    <span class="keyword">private</span> StringBuilder value;<span class="comment">//值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String emptyValue;<span class="comment">//空值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringJoiner</span><span class="params">(CharSequence delimiter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(delimiter, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);<span class="comment">//默认前缀和后缀为&quot;&quot;,重载调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringJoiner</span><span class="params">(CharSequence delimiter,</span></span></span><br><span class="line"><span class="function"><span class="params">                        CharSequence prefix,</span></span></span><br><span class="line"><span class="function"><span class="params">                        CharSequence suffix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//间隔符，前缀和后缀判断是否为null，null将抛出异常</span></span><br><span class="line">        Objects.requireNonNull(prefix, <span class="string">&quot;The prefix must not be null&quot;</span>);</span><br><span class="line">        Objects.requireNonNull(delimiter, <span class="string">&quot;The delimiter must not be null&quot;</span>);</span><br><span class="line">        Objects.requireNonNull(suffix, <span class="string">&quot;The suffix must not be null&quot;</span>); </span><br><span class="line">        <span class="comment">// 成员变量赋值</span></span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix.toString();</span><br><span class="line">        <span class="keyword">this</span>.delimiter = delimiter.toString();</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix.toString();</span><br><span class="line">        <span class="keyword">this</span>.emptyValue = <span class="keyword">this</span>.prefix + <span class="keyword">this</span>.suffix;<span class="comment">//空值被设置为只有前后缀</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//设置空值，检查是否为null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringJoiner <span class="title">setEmptyValue</span><span class="params">(CharSequence emptyValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emptyValue = Objects.requireNonNull(emptyValue,</span><br><span class="line">            <span class="string">&quot;The empty value must not be null&quot;</span>).toString();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> emptyValue;<span class="comment">//没有值将返回空值或者后续设置的空值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (suffix.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> value.toString();<span class="comment">//后缀为&quot;&quot;直接返回字符串，不用添加</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//后缀不为&quot;&quot;，添加后缀，然后直接返回字符串，修改长度</span></span><br><span class="line">                <span class="keyword">int</span> initialLength = value.length();</span><br><span class="line">                String result = value.append(suffix).toString();</span><br><span class="line">                <span class="comment">// reset value to pre-append initialLength</span></span><br><span class="line">                value.setLength(initialLength);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">////初始化，先添加前缀，有了之后每次先添加间隔符，StringBuilder后续append字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringJoiner <span class="title">add</span><span class="params">(CharSequence newElement)</span> </span>&#123;</span><br><span class="line">        prepareBuilder().append(newElement);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//合并StringJoiner，注意后面StringJoiner 的前缀就不要了，后面的appen进来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringJoiner <span class="title">merge</span><span class="params">(StringJoiner other)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">if</span> (other.value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> length = other.value.length();</span><br><span class="line">            <span class="comment">// lock the length so that we can seize the data to be appended</span></span><br><span class="line">            <span class="comment">// before initiate copying to avoid interference, especially when</span></span><br><span class="line">            <span class="comment">// merge &#x27;this&#x27;</span></span><br><span class="line">            StringBuilder builder = prepareBuilder();</span><br><span class="line">            builder.append(other.value, other.prefix.length(), length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//初始化，先添加前缀，有了之后每次先添加间隔符</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> StringBuilder <span class="title">prepareBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            value.append(delimiter);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = <span class="keyword">new</span> StringBuilder().append(prefix);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Remember that we never actually append the suffix unless we return</span></span><br><span class="line">        <span class="comment">// the full (present) value or some sub-string or length of it, so that</span></span><br><span class="line">        <span class="comment">// we can add on more if we need to.</span></span><br><span class="line">        <span class="comment">//不忘添加后缀的长度</span></span><br><span class="line">        <span class="keyword">return</span> (value != <span class="keyword">null</span> ? value.length() + suffix.length() :</span><br><span class="line">                emptyValue.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="String-join"><a href="#String-join" class="headerlink" title="String.join()"></a>String.join()</h3><p><code>String</code>还提供了一个静态方法<code>join()</code>，方法在内部使用了<code>StringJoiner</code>来拼接字符串。在不需要指定“开头”和“结尾”的时候，推荐<code>String.join()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String[] names = &#123;<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Grace&quot;</span>&#125;;</span><br><span class="line">    String s = String.join(<span class="string">&quot;, &quot;</span>, names);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bob, Alice, Grace</span><br></pre></td></tr></table></figure><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>Java的数据类型分两种：</p><ul><li>基本类型：<code>byte</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>boolean</code>，<code>float</code>，<code>double</code>，<code>char</code></li><li>引用类型：所有<code>class</code>和<code>interface</code>类型</li></ul><p>引用类型可以赋值为<code>null</code>，表示空，但基本类型不能赋值为<code>null</code>。</p><p>Java核心库为每种基本类型都提供了对应的包装类型：</p><table><thead><tr><th align="left">基本类型</th><th align="left">对应的引用类型</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="left">java.lang.Boolean</td></tr><tr><td align="left">byte</td><td align="left">java.lang.Byte</td></tr><tr><td align="left">short</td><td align="left">java.lang.Short</td></tr><tr><td align="left">int</td><td align="left">java.lang.Integer</td></tr><tr><td align="left">long</td><td align="left">java.lang.Long</td></tr><tr><td align="left">float</td><td align="left">java.lang.Float</td></tr><tr><td align="left">double</td><td align="left">java.lang.Double</td></tr><tr><td align="left">char</td><td align="left">java.lang.Character</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        Integer n1 = <span class="keyword">new</span> Integer(i);</span><br><span class="line">        <span class="comment">// 通过静态方法valueOf(int)创建Integer实例:</span></span><br><span class="line">        Integer n2 = Integer.valueOf(i);</span><br><span class="line">        <span class="comment">// 通过静态方法valueOf(String)创建Integer实例:</span></span><br><span class="line">        Integer n3 = Integer.valueOf(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        System.out.println(n3.intValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动装箱（Auto-Boxing）和自动拆箱（Auto-Unboxing）"><a href="#自动装箱（Auto-Boxing）和自动拆箱（Auto-Unboxing）" class="headerlink" title="自动装箱（Auto Boxing）和自动拆箱（Auto Unboxing）"></a>自动装箱（Auto Boxing）和自动拆箱（Auto Unboxing）</h3><p>把<code>int</code>变为<code>Integer</code>的赋值写法，称为自动装箱（Auto Boxing）；</p><p>把<code>Integer</code>变为<code>int</code>的赋值写法，称为自动拆箱（Auto Unboxing）。</p><p>注意：自动装箱和自动拆箱只发生在编译阶段，目的是为了少写代码。</p><p>int<code>和</code>Integer`之间转型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">Integer n = Integer.valueOf(i);</span><br><span class="line"><span class="keyword">int</span> x = n.intValue();</span><br></pre></td></tr></table></figure><p>Java编译器可以帮助我们自动在<code>int</code>和<code>Integer</code>之间转型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer n = <span class="number">100</span>; <span class="comment">// 编译器自动使用Integer.valueOf(int)</span></span><br><span class="line"><span class="keyword">int</span> x = n; <span class="comment">// 编译器自动使用Integer.intValue()</span></span><br></pre></td></tr></table></figure><h3 id="不变类"><a href="#不变类" class="headerlink" title="不变类"></a>不变类</h3><p>所有的包装类型都是不变类。</p><p><code>Integer</code>的核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，一旦创建了<code>Integer</code>对象，该对象就是不变的。</p><p>对两个<code>Integer</code>实例进行比较要<font color="red">特别注意</font>&gt;：不能用<code>==</code>比较，因为<code>Integer</code>是引用类型，必须使用<code>equals()</code>比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer x = <span class="number">127</span>;</span><br><span class="line">        Integer y = <span class="number">127</span>;</span><br><span class="line">        Integer m = <span class="number">99999</span>;</span><br><span class="line">        Integer n = <span class="number">99999</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;x == y: &quot;</span> + (x==y)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m == n: &quot;</span> + (m==n)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x.equals(y): &quot;</span> + x.equals(y)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m.equals(n): &quot;</span> + m.equals(n)); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">解释：</font></p><p>可以发现，<code>==</code>比较，较小的两个相同的<code>Integer</code>返回<code>true</code>，较大的两个相同的<code>Integer</code>返回<code>false</code>，这是因为<code>Integer</code>是不变类，编译器把<code>Integer x = 127;</code>自动变为<code>Integer x = Integer.valueOf(127);</code></p><p>为了节省内存，<code>Integer.valueOf()</code>对于较小的数，始终返回相同的实例，因此，<code>==</code>比较“恰好”为<code>true</code>。</p><p><em>绝不能</em>因为Java标准库的<code>Integer</code>内部有缓存优化就用<code>==</code>比较，必须用<code>equals()</code>方法比较两个<code>Integer</code>。</p><p>自己创建<code>Integer</code>的时候，以下两种方法：</p><ul><li>方法1：<code>Integer n = new Integer(100);</code></li><li>方法2：<code>Integer n = Integer.valueOf(100);</code></li></ul><p>推荐方法2，因为方法1总是创建新的<code>Integer</code>实例，方法2为缓存实例。</p><p>能创建“新”对象的静态方法称为静态工厂方法。<code>Integer.valueOf()</code>就是静态工厂方法，它尽可能地返回缓存的实例以节省内存。</p><p><font color="red">创建新对象时，优先选用静态工厂方法而不是new操作符。</font></p><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 字符串转数字</span></span><br><span class="line">    <span class="keyword">int</span> x1 = Integer.parseInt(<span class="string">&quot;100&quot;</span>); <span class="comment">// 100</span></span><br><span class="line">    System.out.println(x1);</span><br><span class="line">    <span class="keyword">int</span> x2 = Integer.parseInt(<span class="string">&quot;100&quot;</span>, <span class="number">16</span>); <span class="comment">// 256,因为按16进制解析</span></span><br><span class="line">    System.out.println(x2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 整数转字符串</span></span><br><span class="line">        System.out.println(Integer.toString(<span class="number">100</span>)); <span class="comment">// &quot;100&quot;,表示为10进制</span></span><br><span class="line">        System.out.println(Integer.toString(<span class="number">100</span>, <span class="number">36</span>)); <span class="comment">// &quot;2s&quot;,表示为36进制</span></span><br><span class="line">        System.out.println(Integer.toHexString(<span class="number">100</span>)); <span class="comment">// &quot;64&quot;,表示为16进制</span></span><br><span class="line">        System.out.println(Integer.toOctalString(<span class="number">100</span>)); <span class="comment">// &quot;144&quot;,表示为8进制</span></span><br><span class="line">        System.out.println(Integer.toBinaryString(<span class="number">100</span>)); <span class="comment">// &quot;1100100&quot;,表示为2进制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的整数和浮点数的包装类型都继承自<code>Number</code>，因此，可以非常方便地直接通过包装类型获取各种基本类型。</p><h3 id="处理无符号整型"><a href="#处理无符号整型" class="headerlink" title="处理无符号整型"></a>处理无符号整型</h3><p>在Java中，并没有无符号整型（Unsigned）的基本数据类型。<code>byte</code>、<code>short</code>、<code>int</code>和<code>long</code>都是带符号整型，最高位是符号位。无符号整型和有符号整型的转换在Java中就需要借助包装类型的静态方法完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> x = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span> y = <span class="number">127</span>;</span><br><span class="line">        System.out.println(Byte.toUnsignedInt(x)); <span class="comment">// 255</span></span><br><span class="line">        System.out.println(Byte.toUnsignedInt(y)); <span class="comment">// 127</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>JavaBean 与其它 Java 类相比而言独一无二的特征：</p><ul><li>提供一个默认的无参构造函数。</li><li>需要被序列化并且实现了 Serializable 接口（新增）。</li><li>可能有一系列可读写属性。</li><li>可能有一系列的 <strong>getter</strong> 或 <strong>setter</strong> 方法。</li><li>属性必须私有化。</li><li>私有化的属性必须通过public类型的方法暴露给其它程序，并且方法的命名也必须遵守一定的命名规范</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ma</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.age = age; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isChild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age &lt;= <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaBean的作用"><a href="#JavaBean的作用" class="headerlink" title="JavaBean的作用"></a>JavaBean的作用</h3><p>JavaBean主要用来传递数据，即把一组数据组合成一个JavaBean便于传输。此外，JavaBean可以方便地被IDE工具分析，生成读写属性的代码，主要用在图形界面的可视化设计中。</p><p>通过IDE，可以快速生成<code>getter</code>和<code>setter</code>。例如，在Eclipse中，先输入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，点击右键，在弹出的菜单中选择“Source”，“Generate Getters and Setters”，在弹出的对话框中选中需要生成<code>getter</code>和<code>setter</code>方法的字段，点击确定即可由IDE自动完成所有方法代码。</p><h2 id="enum枚举类"><a href="#enum枚举类" class="headerlink" title="enum枚举类"></a>enum枚举类</h2><p>首先，<code>enum</code>常量本身带有类型信息，即<code>Weekday.SUN</code>类型是<code>Weekday</code>，编译器会自动检查出类型错误。</p><p>其次，不可能引用到非枚举的值，因为无法通过编译。</p><p>最后，不同类型的枚举不能互相比较或者赋值，因为类型不符。</p><p>编译器可以在编译期自动检查出所有可能的潜在错误。</p><p>引用类型比较，要使用<code>equals()</code>方法，如果使用<code>==</code>比较，它比较的是两个引用类型的变量是否是同一个对象。因此，引用类型比较，要始终使用<code>equals()</code>方法。</p><p><code>enum</code>定义的枚举类是一种引用类型，<code>enum</code>类型可以例外，因为<code>enum</code>类型的每个常量在JVM中只有一个唯一实例，所以可以直接用<code>==</code>比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (day == Weekday.FRI) &#123; <span class="comment">// ok!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (day.equals(Weekday.SUN)) &#123; <span class="comment">// ok, but more code!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="enum类型"><a href="#enum类型" class="headerlink" title="enum类型"></a>enum类型</h3><p><code>enum</code>定义的类型就是<code>class</code>，有以下几个特点：</p><ul><li>定义的<code>enum</code>类型总是继承自<code>java.lang.Enum</code>，且无法被继承；</li><li>只能定义出<code>enum</code>的实例，而无法通过<code>new</code>操作符创建<code>enum</code>的实例；</li><li>定义的每个实例都是引用类型的唯一实例；</li><li>可以将<code>enum</code>类型用于<code>switch</code>语句。</li></ul><p>定义的<code>Color</code>枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器编译出的<code>class</code>大概就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> <span class="keyword">extends</span> <span class="title">Enum</span> </span>&#123; <span class="comment">// 继承自Enum，标记为final class</span></span><br><span class="line">    <span class="comment">// 每个实例均为全局唯一:</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color RED = <span class="keyword">new</span> Color();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color GREEN = <span class="keyword">new</span> Color();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLUE = <span class="keyword">new</span> Color();</span><br><span class="line">    <span class="comment">// private构造方法，确保外部无法调用new操作符:</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>求绝对值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.abs(-<span class="number">100</span>); <span class="comment">// 100</span></span><br><span class="line">Math.abs(-<span class="number">7.8</span>); <span class="comment">// 7.8</span></span><br></pre></td></tr></table></figure><p>取最大或最小值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.max(<span class="number">100</span>, <span class="number">99</span>); <span class="comment">// 100</span></span><br><span class="line">Math.min(<span class="number">1.2</span>, <span class="number">2.3</span>); <span class="comment">// 1.2</span></span><br></pre></td></tr></table></figure><p>计算xy次方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.pow(<span class="number">2</span>, <span class="number">10</span>); <span class="comment">// 2的10次方=1024</span></span><br></pre></td></tr></table></figure><p>计算√x：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.sqrt(2); &#x2F;&#x2F; 1.414...</span><br></pre></td></tr></table></figure><p>计算ex次方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.exp(2); &#x2F;&#x2F; 7.389...</span><br></pre></td></tr></table></figure><p>计算以e为底的对数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.log(4); &#x2F;&#x2F; 1.386...</span><br></pre></td></tr></table></figure><p>计算以10为底的对数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.log10(100); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure><p>三角函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Math.sin(<span class="number">3.14</span>); <span class="comment">// 0.00159...</span></span><br><span class="line">Math.cos(<span class="number">3.14</span>); <span class="comment">// -0.9999...</span></span><br><span class="line">Math.tan(<span class="number">3.14</span>); <span class="comment">// -0.0015...</span></span><br><span class="line">Math.asin(<span class="number">1.0</span>); <span class="comment">// 1.57079...</span></span><br><span class="line">Math.acos(<span class="number">1.0</span>); <span class="comment">// 0.0</span></span><br></pre></td></tr></table></figure><p>Math还提供了几个数学常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> pi = Math.PI; <span class="comment">// 3.14159...</span></span><br><span class="line"><span class="keyword">double</span> e = Math.E; <span class="comment">// 2.7182818...</span></span><br><span class="line">Math.sin(Math.PI / <span class="number">6</span>); <span class="comment">// sin(π/6) = 0.5</span></span><br></pre></td></tr></table></figure><p>生成一个随机数x，x的范围是<code>0 &lt;= x &lt; 1</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Math.random(); <span class="comment">// 0.53907... 每次都不一样</span></span><br></pre></td></tr></table></figure><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><p><code>Random</code>用来创建伪随机数，只要给定一个初始的种子，产生的随机数序列是完全一样的。</p><p><code>Math.random()</code>实际上内部调用了<code>Random</code>类</p><p>要生成一个随机数，可以使用<code>nextInt()</code>、<code>nextLong()</code>、<code>nextFloat()</code>、<code>nextDouble()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line">r.nextInt(); <span class="comment">// 2071575453,每次都不一样</span></span><br><span class="line">r.nextInt(<span class="number">10</span>); <span class="comment">// 5,生成一个[0,10)之间的int</span></span><br><span class="line">r.nextLong(); <span class="comment">// 8811649292570369305,每次都不一样</span></span><br><span class="line">r.nextFloat(); <span class="comment">// 0.54335...生成一个[0,1)之间的float</span></span><br><span class="line">r.nextDouble(); <span class="comment">// 0.3716...生成一个[0,1)之间的double</span></span><br></pre></td></tr></table></figure><h3 id="SecureRandom"><a href="#SecureRandom" class="headerlink" title="SecureRandom"></a>SecureRandom</h3><p><code>SecureRandom</code>就是用来创建安全的随机数的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SecureRandom sr = <span class="keyword">new</span> SecureRandom();</span><br><span class="line">System.out.println(sr.nextInt(<span class="number">100</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要内容为介绍Java核心类，包括字符串、StringBuilder、包装类型、JavaBean等。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="字符串" scheme="https://juoyo.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="StringBuilder" scheme="https://juoyo.github.io/tags/StringBuilder/"/>
    
    <category term="StringJoiner" scheme="https://juoyo.github.io/tags/StringJoiner/"/>
    
    <category term="JavaBean" scheme="https://juoyo.github.io/tags/JavaBean/"/>
    
  </entry>
  
  <entry>
    <title>编译原理ch6 语法分析4</title>
    <link href="https://juoyo.github.io/posts/f68a918e.html"/>
    <id>https://juoyo.github.io/posts/f68a918e.html</id>
    <published>2019-06-19T08:15:36.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容有SLR分析、LR（1）分析、LALR分析、二义性文法的LR分析、LR分析中的错误处理。</p><a id="more"></a><h2 id="SLR分析"><a href="#SLR分析" class="headerlink" title="SLR分析"></a>SLR分析</h2><h3 id="LR-0-分析过程中的冲突"><a href="#LR-0-分析过程中的冲突" class="headerlink" title="LR(0) 分析过程中的冲突"></a>LR(0) 分析过程中的冲突</h3><p><img src="/posts/f68a918e.htm/1.gif" alt="LR(0)分析冲突"></p><h3 id="SLR-分析"><a href="#SLR-分析" class="headerlink" title="SLR 分析"></a>SLR 分析</h3><h4 id="SLR分析法的基本思想"><a href="#SLR分析法的基本思想" class="headerlink" title="SLR分析法的基本思想"></a>SLR分析法的基本思想</h4><p><img src="/posts/f68a918e.htm/2.gif" alt="LR(0)分析冲突"></p><h3 id="SLR分析表"><a href="#SLR分析表" class="headerlink" title="SLR分析表"></a>SLR分析表</h3><p><img src="/posts/f68a918e.htm/3.gif" alt="LR(0)分析冲突"></p><p><img src="/posts/f68a918e.htm/4.gif" alt="LR(0)分析冲突"></p><p>如果给定文法的SLR分析表中不存在有冲突的动作，那么该文法称为<font color="red">SLR文法</font>&gt;。 </p><h3 id="SLR-分析中的冲突"><a href="#SLR-分析中的冲突" class="headerlink" title="SLR 分析中的冲突"></a>SLR 分析中的冲突</h3><p><img src="/posts/f68a918e.htm/5.gif" alt="LR(0)分析冲突"></p><h2 id="LR-1-分析"><a href="#LR-1-分析" class="headerlink" title="LR(1)分析"></a>LR(1)分析</h2><h3 id="SLR分析存在的问题"><a href="#SLR分析存在的问题" class="headerlink" title="SLR分析存在的问题"></a><strong>SLR分析存在的问题</strong></h3><p>SLR只是简单地考察<font color="red">下一个输入符号</font>b是否属于与归约项目A→α相关联的<font color="red">FOLLOW(A)</font>， 但b∈FOLLOW(A)只是归约α的一个必要条件，而非充分条件。</p><h3 id="LR-1-分析法的提出"><a href="#LR-1-分析法的提出" class="headerlink" title="LR(1)分析法的提出"></a>LR(1)分析法的提出</h3><p>对于产生式 A→α的归约，在不同的使用位置，A会要求不同的后继符号 </p><p><img src="/posts/f68a918e.htm/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86ch6-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%904%5C6.gif"></p><p>在特定位置， A的后继符集合是FOLLOW(A)的子集 </p><p><img src="/posts/f68a918e.htm/7.gif"></p><p><img src="/posts/f68a918e.htm/8.gif"></p><p><img src="/posts/f68a918e.htm/9.gif"></p><p><img src="/posts/f68a918e.htm/10.gif"></p><p>如果除展望符外，两个LR(1)项目集是相同的，则称这两个LR(1)项目集是<font color="red">同心</font>&gt;的 </p><p>如果LR(1)分析表中没有语法分析动作冲突，那么给定的文法就称为LR(1)文法 </p><h2 id="LALR分析法"><a href="#LALR分析法" class="headerlink" title="LALR分析法"></a>LALR分析法</h2><h3 id="LALR-lookahead-LR-分析的基本思想"><a href="#LALR-lookahead-LR-分析的基本思想" class="headerlink" title="LALR ( lookahead-LR )分析的基本思想"></a>LALR ( lookahead-LR )分析的基本思想</h3><ol><li><p>寻找具有相同核心的LR (1) 项集，并将这些项集合并为一个项集。 所谓项集的核心就是其第一分<br>量的集合 </p></li><li><p>然后根据合并后得到的项集族构造语法分析表 </p></li><li><p>如果分析表中没有语法分析动作冲突，给定的文法就称为<strong>LALR (1)</strong> 文法，就可以根据该分析表<br>进行语法分析</p></li></ol><p><img src="/posts/f68a918e.htm/11.gif"></p><p><img src="/posts/f68a918e.htm/12.gif"></p><p><img src="/posts/f68a918e.htm/13.gif"></p><h3 id="LALR-1-的特点"><a href="#LALR-1-的特点" class="headerlink" title="LALR(1)的特点"></a>LALR(1)的特点</h3><ol><li><p>形式上与LR(1)相同 </p></li><li><p>大小上与LR(0)/SLR相当</p></li><li><p>分析能力介于SLR和LR(1)二者之间    <strong>SLR&lt;LALR(1)&lt;LR(1)</strong></p></li><li><p>合并后的展望符集合仍为FOLLOW集的子集</p></li></ol><h2 id="二义性文法的LR分析"><a href="#二义性文法的LR分析" class="headerlink" title="二义性文法的LR分析"></a>二义性文法的LR分析</h2><h2 id="LR分析中的错误处理"><a href="#LR分析中的错误处理" class="headerlink" title="LR分析中的错误处理"></a>LR分析中的错误处理</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要内容有SLR分析、LR（1）分析、LALR分析、二义性文法的LR分析、LR分析中的错误处理。&lt;/p&gt;</summary>
    
    
    
    <category term="编译原理" scheme="https://juoyo.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="SLR" scheme="https://juoyo.github.io/tags/SLR/"/>
    
    <category term="LR（1）" scheme="https://juoyo.github.io/tags/LR%EF%BC%881%EF%BC%89/"/>
    
    <category term="LALR" scheme="https://juoyo.github.io/tags/LALR/"/>
    
    <category term="二义性文法" scheme="https://juoyo.github.io/tags/%E4%BA%8C%E4%B9%89%E6%80%A7%E6%96%87%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>编译原理ch5 语法分析3</title>
    <link href="https://juoyo.github.io/posts/79936e54.html"/>
    <id>https://juoyo.github.io/posts/79936e54.html</id>
    <published>2019-06-18T08:18:01.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容包括自底向上分析概述、LR分析法概述、LR（0）分析及分析表构造</p><a id="more"></a><h2 id="自底向上分析概述"><a href="#自底向上分析概述" class="headerlink" title="自底向上分析概述"></a>自底向上分析概述</h2><h3 id="自底向上的语法分析"><a href="#自底向上的语法分析" class="headerlink" title="自底向上的语法分析"></a>自底向上的语法分析</h3><p>从分析树的底部(叶节点)向顶部(根节点)方向构造分析树，可以看成是将<strong>输入串w</strong>归约到<strong>文法开始符号S</strong>的过程<br>自顶向下的语法分析采用<strong>最左推导</strong>方式<br>自底向上的语法分析采用<strong>最左归约</strong>方式（反向构造最右推导）</p><p>自底向上语法分析的通用框架：移入-归约分析(Shift-Reduce Parsing) </p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文法</span><br><span class="line">① <span class="built_in">E</span> → <span class="built_in">E</span><span class="operator">+</span><span class="built_in">E</span></span><br><span class="line">② <span class="built_in">E</span> → <span class="built_in">E</span><span class="operator">*</span><span class="built_in">E</span></span><br><span class="line">③ <span class="built_in">E</span> → <span class="punctuation">(</span><span class="built_in">E</span><span class="punctuation">)</span></span><br><span class="line">④ <span class="built_in">E</span> → <span class="variable">id</span> </span><br></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">栈 剩余输入 动作</span><br><span class="line"><span class="variable">$</span> <span class="variable">id</span><span class="operator">+</span><span class="punctuation">(</span><span class="variable">id</span><span class="operator">+</span><span class="variable">id</span><span class="punctuation">)</span> <span class="variable">$</span></span><br><span class="line"><span class="variable">$</span> <span class="variable">id</span> <span class="operator">+</span><span class="punctuation">(</span><span class="variable">id</span><span class="operator">+</span><span class="variable">id</span><span class="punctuation">)</span> <span class="variable">$</span> 移入</span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span> <span class="operator">+</span><span class="punctuation">(</span><span class="variable">id</span><span class="operator">+</span><span class="variable">id</span><span class="punctuation">)</span> <span class="variable">$</span> 归约<span class="operator">:</span> <span class="built_in">E</span>→<span class="variable">id</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span> <span class="punctuation">(</span><span class="variable">id</span><span class="operator">+</span><span class="variable">id</span><span class="punctuation">)</span> <span class="variable">$</span> 移入</span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span><span class="punctuation">(</span> <span class="variable">id</span><span class="operator">+</span><span class="variable">id</span><span class="punctuation">)</span> <span class="variable">$</span> 移入</span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span><span class="punctuation">(</span><span class="variable">id</span> <span class="operator">+</span><span class="variable">id</span><span class="punctuation">)</span> <span class="variable">$</span> 移入</span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span><span class="punctuation">(</span><span class="built_in">E</span> <span class="operator">+</span><span class="variable">id</span><span class="punctuation">)</span> <span class="variable">$</span> 归约<span class="operator">:</span> <span class="built_in">E</span>→<span class="variable">id</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span><span class="punctuation">(</span><span class="built_in">E</span><span class="operator">+</span> <span class="variable">id</span><span class="punctuation">)</span> <span class="variable">$</span> 移入</span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span><span class="punctuation">(</span><span class="built_in">E</span><span class="operator">+</span><span class="variable">id</span> <span class="punctuation">)</span> <span class="variable">$</span> 移入</span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span><span class="punctuation">(</span><span class="built_in">E</span><span class="operator">+</span><span class="built_in">E</span> <span class="punctuation">)</span> <span class="variable">$</span> 归约<span class="operator">:</span> <span class="built_in">E</span>→<span class="variable">id</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span><span class="punctuation">(</span><span class="built_in">E</span> <span class="punctuation">)</span> <span class="variable">$</span> 归约<span class="operator">:</span> <span class="built_in">E</span>→<span class="built_in">E</span><span class="operator">+</span><span class="built_in">E</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span><span class="punctuation">(</span><span class="built_in">E</span><span class="punctuation">)</span> <span class="variable">$</span> 移入</span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span><span class="operator">+</span><span class="built_in">E</span> <span class="variable">$</span> 归约<span class="operator">:</span> <span class="built_in">E</span>→<span class="punctuation">(</span><span class="built_in">E</span><span class="punctuation">)</span></span><br><span class="line"><span class="variable">$</span> <span class="built_in">E</span> <span class="variable">$</span> 归约<span class="operator">:</span> <span class="built_in">E</span>→<span class="built_in">E</span><span class="operator">+</span><span class="built_in">E</span></span><br></pre></td></tr></table></figure><p>每次归约的符号串称为“<strong>句柄</strong>” </p><p>栈内符号串 + 剩余输入 =“规范句型” </p><h3 id="移入-归约分析的工作过程"><a href="#移入-归约分析的工作过程" class="headerlink" title="移入-归约分析的工作过程"></a>移入-归约分析的工作过程</h3><ol><li><p>在对输入串的一次从左到右扫描过程中，语法分析器将零个或多个输入符号移入到栈的顶端，直到它可以对栈顶的一个文法符号串β进行归约为止 </p></li><li><p>然后，它将符号串β归约为某个产生式的左部 </p></li><li><p>语法分析器不断地重复这个循环，直到它检测到一个语法错误，或者栈中包含了开始符号且输入缓冲区为空(当进入这样的格局时，语法分析器停止运行，并宣称成功完成了语法分析)为止 </p></li></ol><h3 id="移入-归约分析器可采取的4种动作"><a href="#移入-归约分析器可采取的4种动作" class="headerlink" title="移入-归约分析器可采取的4种动作"></a>移入-归约分析器可采取的4种动作</h3><ol><li><p>移入：将下一个输入符号移到栈的顶端</p></li><li><p>归约：被归约的符号串的右端必然处于栈顶。语法分析器在栈中确定这个串的左端，并决定用哪个非终结符来替换这个串</p></li><li><p>接收：宣布语法分析过程成功完成</p></li><li><p>报错：发现一个语法错误，并调用错误恢复子例程 </p></li></ol><h3 id="移入-归约分析中存在的问题"><a href="#移入-归约分析中存在的问题" class="headerlink" title="移入-归约分析中存在的问题"></a>移入-归约分析中存在的问题</h3><p>造成错误的原因：错误地识别了句柄 </p><p>句柄：句型的最左直接短语 </p><p><strong>自底向上分析的关键问题 是如何正确识别句柄。</strong></p><h2 id="LR分析法"><a href="#LR分析法" class="headerlink" title="LR分析法"></a>LR分析法</h2><p>LR文法(Knuth, 1963) 是最大的、可以构造出相应<font color="red">移入-归约语法分析器</font>的文法类 </p><ol><li><p>L: 对输入进行从左到右的扫描</p></li><li><p>R: 反向构造出一个最右推导序列 </p></li></ol><p>LR(k)分析: 需要向前查看k个输入符号的LR分析 </p><p>当省略(k)时，表示k =1 </p><h3 id="LR分析表结构"><a href="#LR分析表结构" class="headerlink" title="LR分析表结构"></a>LR分析表结构</h3><p><img src="/posts/79936e54.htm/1.gif" alt="LR分析表"></p><p>符号a进入符号栈中，状态n进入状态栈中。</p><h3 id="LR-分析器的工作过程"><a href="#LR-分析器的工作过程" class="headerlink" title="LR 分析器的工作过程"></a>LR 分析器的工作过程</h3><p>初始化（状态栈中只有s0，符号栈中只有$，输入缓冲区中符号串为a1a2…an）</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">s0</span></span><br><span class="line"><span class="variable">$</span><span class="variable">a1a2</span>…<span class="variable">an</span> <span class="variable">$</span> </span><br></pre></td></tr></table></figure><p>一般情况下</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">s0s1</span>… <span class="variable">sm</span></span><br><span class="line"><span class="variable">$X1</span>…<span class="variable">Xm</span><span class="variable">aiai</span><span class="operator">+</span><span class="number">1</span>…<span class="variable">an</span> <span class="variable">$</span> </span><br></pre></td></tr></table></figure><ol><li>如果ACTION [sm, ai]= Sx， 那么格局变为： </li></ol><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">s0s1</span>… <span class="variable">sm</span> <span class="variable">x</span></span><br><span class="line"><span class="variable">$X1</span>…<span class="variable">Xm</span> <span class="variable">ai</span> <span class="variable">ai</span><span class="operator">+</span><span class="number">1</span>…<span class="variable">an</span> <span class="variable">$</span></span><br></pre></td></tr></table></figure><hr><p>理解：如果符号栈栈顶sm，遇到输入缓冲区ai，查表对应项为移入动作Sx，</p><p>则ai进入符号栈，x进入状态栈，当前状态变为状态x</p><hr><ol start="2"><li>如果ACTION[sm , ai]= rx 表示用第x个产生式A→Xm-(k-1)…Xm<br>进行归约，那么格局变为： </li></ol><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">s0s1</span>… <span class="variable">sm</span><span class="operator">-</span><span class="variable">k</span></span><br><span class="line"><span class="variable">$X1</span>…<span class="variable">Xm</span><span class="operator">-</span><span class="variable">k</span> <span class="variable">A</span> <span class="variable">aiai</span><span class="operator">+</span><span class="number">1</span>…<span class="variable">an</span> <span class="variable">$</span></span><br></pre></td></tr></table></figure><hr><p>理解：如果符号栈栈顶sm，遇到输入缓冲区ai，查表对应项为规约动作rx，表示用第x个产生式A→Xm-(k-1)…Xm进行归约 ，</p><p>则符号栈顶k个符号Xm-(k-1)…Xm出栈，产生式左部A入栈（未完）</p><hr><p>接下来检查状态S(m-k)遇到规约的非终结符A如何进行状态转移，如果GOTO[sm-k , A]=y，那么格局变为： </p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">s0s1</span>… <span class="variable">sm</span><span class="operator">-</span><span class="variable">k</span> <span class="variable">y</span></span><br><span class="line"><span class="variable">$</span> <span class="variable">X1</span>…<span class="variable">Xm</span><span class="operator">-</span><span class="variable">k</span> <span class="variable">A</span> <span class="variable">aiai</span><span class="operator">+</span><span class="number">1</span>…<span class="variable">an</span> <span class="variable">$</span></span><br></pre></td></tr></table></figure><hr><p>理解：必须检查状态栈顶状态遇到新规约的非终结符A如何进行状态转移，如果GOTO[sm-k , A]=y，则状态y进入状态栈</p><hr><ol start="3"><li>如果ACTION[sm , ai]=acc，那么分析成功</li><li>如果ACTION[sm , ai]=err ，那么出现语法错误 </li></ol><h3 id="如何构造给定文法的LR分析表"><a href="#如何构造给定文法的LR分析表" class="headerlink" title="如何构造给定文法的LR分析表"></a>如何构造给定文法的LR分析表</h3><p><font color="red">不同分析法对应LR分析表构成方法不同</font></p><p>LR(0)分析<br>SLR分析<br>LR(1)分析<br>LALR分析 </p><h2 id="LR-0-分析"><a href="#LR-0-分析" class="headerlink" title="LR(0)分析"></a>LR(0)分析</h2><h3 id="LR（0）项目"><a href="#LR（0）项目" class="headerlink" title="LR（0）项目"></a>LR（0）项目</h3><p>右部某位置标有圆点的产生式称为相应文法的一个LR(0)项目（简称为项目） </p><p>S→bBB </p><p>S → ·bBB  （ .后面为终结符，称<font color="red">移进项目</font> ）<br>S → b·BB    （ .后面为非终结符，称<font color="red">待约项目</font> ）<br>S → bB·B<br>S → bBB·     （ .在最后，称<font color="red">归约项目</font> ）</p><p>产生式A→ε 只生成一个项目A→ · </p><p>项目描述了<strong>句柄识别的状态</strong> </p><h3 id="增广文法-Augmented-Grammar"><a href="#增广文法-Augmented-Grammar" class="headerlink" title="增广文法 (Augmented Grammar)"></a>增广文法 (Augmented Grammar)</h3><p>如果G 是一个以S为开始符号的文法，则G的增广文法 G’ 就是在G中加上新开始符号S’ 和产生式S’ → S而得到的文法 </p><p>引入这个新的开始产生式的目的是使得<strong>文法开始符号仅出现在一个产生式的左边</strong>，从而使得<strong>分析器只有一个接受状态</strong> </p><h3 id="LR-0-自动机"><a href="#LR-0-自动机" class="headerlink" title="LR(0)自动机"></a>LR(0)自动机</h3><p>把等价的项目组成一个项目集(I) ，称为<font color="red">项目集闭包(Closure of Item Sets)</font>&gt;，</p><p>每个项目集闭包对应着<font color="blue">自动机的一个<strong>状态</strong> </font></p><p><img src="/posts/79936e54.htm/LR%EF%BC%880%EF%BC%89.gif" alt="LR（0）"></p><h2 id="LR（0）分析表构造算法"><a href="#LR（0）分析表构造算法" class="headerlink" title="LR（0）分析表构造算法"></a>LR（0）分析表构造算法</h2><h3 id="LR-0-分析过程中的冲突"><a href="#LR-0-分析过程中的冲突" class="headerlink" title="LR(0) 分析过程中的冲突"></a>LR(0) 分析过程中的冲突</h3><p><img src="/posts/79936e54.htm/3.gif"></p><h3 id="LR-0-分析表含有移进-归约冲突"><a href="#LR-0-分析表含有移进-归约冲突" class="headerlink" title="LR(0)分析表含有移进/归约冲突"></a>LR(0)分析表含有移进/归约冲突</h3><p><img src="/posts/79936e54.htm/4.gif"></p><h3 id="移进-归约冲突和归约-归约冲突"><a href="#移进-归约冲突和归约-归约冲突" class="headerlink" title="移进/归约冲突和归约/归约冲突"></a><strong>移进/归约</strong>冲突和<strong>归约/归约</strong>冲突</h3><p><img src="/posts/79936e54.htm/5.gif"></p><p><strong>不是所有CFG都能用LR(0)方法进行分析，也就是说， CFG不总是LR(0)文法</strong> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要内容包括自底向上分析概述、LR分析法概述、LR（0）分析及分析表构造&lt;/p&gt;</summary>
    
    
    
    <category term="编译原理" scheme="https://juoyo.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="自底向上" scheme="https://juoyo.github.io/tags/%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A/"/>
    
    <category term="LR（0）" scheme="https://juoyo.github.io/tags/LR%EF%BC%880%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>编译原理ch4 语法分析2</title>
    <link href="https://juoyo.github.io/posts/b76f852a.html"/>
    <id>https://juoyo.github.io/posts/b76f852a.html</id>
    <published>2019-06-16T16:27:16.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容为计算First集和Follow集、递归和非递归预测分析法、预测分析中的错误处理等。</p><a id="more"></a><h2 id="First集和Follow集的计算"><a href="#First集和Follow集的计算" class="headerlink" title="First集和Follow集的计算"></a>First集和Follow集的计算</h2><h3 id="计算文法符号X的FIRST-X"><a href="#计算文法符号X的FIRST-X" class="headerlink" title="计算文法符号X的FIRST(X )"></a>计算文法符号X的FIRST(X )</h3><p><font color="red">回顾定义</font></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="variable">X</span> <span class="punctuation">)</span>：可以从<span class="variable">X</span>推导出的所有串首终结符构成的集合</span><br><span class="line">如果 <span class="variable">X</span> <span class="operator">-</span>》<span class="operator">*</span>ε， 那么 ε∈<span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="variable">X</span> <span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">① <span class="built_in">E</span> → <span class="variable">TE</span><span class="operator">&#x27;</span></span><br><span class="line">② <span class="built_in">E</span><span class="operator">&#x27;</span> → <span class="operator">+</span><span class="variable">TE</span><span class="operator">&#x27;</span> <span class="operator">|</span>ε</span><br><span class="line">③ <span class="variable">T</span> → <span class="variable">FT</span> <span class="operator">&#x27;</span></span><br><span class="line">④ <span class="variable">T</span><span class="operator">&#x27;</span> → <span class="operator">*</span><span class="variable">FT</span> <span class="operator">&#x27;</span> <span class="operator">|</span>ε</span><br><span class="line">⑤ <span class="variable">F</span> → <span class="punctuation">(</span><span class="built_in">E</span><span class="punctuation">)</span><span class="operator">|</span><span class="variable">id</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">First</span>集求解：</span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="built_in">E</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="punctuation">(</span>， <span class="variable">id</span> <span class="punctuation">&#125;</span> </span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="built_in">E</span><span class="operator">&#x27;</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="operator">+</span>， ε<span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="variable">T</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="punctuation">(</span>， <span class="variable">id</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="variable">T</span><span class="operator">&#x27;</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="operator">*</span>， ε<span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="variable">F</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="punctuation">(</span>， <span class="variable">id</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>不断应用下列规则，直到没有新的终结符或ε可以被加入到任何FIRST集合中为止 </p><ol><li><p>如果X是一个终结符，那么FIRST ( X ) = { X } </p></li><li><p>如果X是一个非终结符，且 X→Y1…Yk ∈ P (k≥1)，那么如果对于某个i， a在FIRST (Yi ) 中且ε 在所有的FIRST(Y1) , … , FIRST(Yi-1)中(即Y1…Yi-1 * ε )，就把a加入到FIRST( X )中。</p><p>如果对于所有的 j = 1,2, . . . , k， ε在FIRST(Yj)中，那么将ε加入到FIRST( X )。</p></li><li><p>如果 X→ε∈P，那么将ε加入到FIRST( X ) 。</p></li></ol><h3 id="计算串X-1X-2-…X-n的FIRST-集合"><a href="#计算串X-1X-2-…X-n的FIRST-集合" class="headerlink" title="计算串X 1X 2 …X n的FIRST 集合"></a>计算串X 1X 2 …X n的FIRST 集合</h3><ol><li><p>向FIRST(X1X2 …Xn)加入FIRST(X1)中所有的非ε符号<br>理解：X1可推导出非ε的所有<strong>串首终结符</strong>加入FIRST(X1X2 …Xn)</p></li><li><p>如果ε在FIRST(X1)中，再加入FIRST(X2)中的所有非ε符号；<br>如果ε在FIRST(X1)和FIRST(X2)中，再加入FIRST(X3)中的所有非ε符号，以此类推 </p></li><li><p>最后，如果对所有的i， ε都在FIRST(Xi)中，那么将ε加入到FIRST(X1X2 …Xn) 中 </p></li></ol><h3 id="计算非终结符A的FOLLOW-A"><a href="#计算非终结符A的FOLLOW-A" class="headerlink" title="计算非终结符A的FOLLOW(A)"></a>计算非终结符A的FOLLOW(A)</h3><p><font color="red">回顾定义</font></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">FOLLOW</span><span class="punctuation">(</span><span class="variable">A</span><span class="punctuation">)</span>：可能在某个句型中紧跟在<span class="variable">A</span>后边的 终结符<span class="variable">a</span> 的集合</span><br><span class="line"><span class="variable">FOLLOW</span><span class="punctuation">(</span><span class="variable">A</span><span class="punctuation">)</span><span class="operator">=</span><span class="punctuation">&#123;</span> <span class="variable">a</span><span class="operator">|</span> <span class="variable">S</span> <span class="operator">-</span>》 <span class="operator">*</span>α<span class="variable">Aa</span>β<span class="operator">,</span> <span class="variable">a</span>∈<span class="variable">VT</span>， α<span class="operator">,</span>β∈<span class="punctuation">(</span><span class="variable">VT</span>∪<span class="variable">VN</span><span class="punctuation">)</span><span class="operator">*</span> <span class="punctuation">&#125;</span></span><br><span class="line">如果<span class="variable">A</span>是某个句型的的最右符号，则将结束符“<span class="variable">$</span>”添加到<span class="variable">FOLLOW</span><span class="punctuation">(</span><span class="variable">A</span><span class="punctuation">)</span>中</span><br></pre></td></tr></table></figure><p>理解：</p><p><strong>α,β为符号串</strong></p><p>E → TE’ 中E、TE’ 即为两个句型</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">①<span class="built_in">E</span> → <span class="variable">TE</span><span class="operator">&#x27;</span></span><br><span class="line">② <span class="built_in">E</span><span class="operator">&#x27;</span> → <span class="operator">+</span><span class="variable">TE</span><span class="operator">&#x27;</span> <span class="operator">|</span>ε</span><br><span class="line">③ <span class="variable">T</span> → <span class="variable">FT</span><span class="operator">&#x27;</span></span><br><span class="line">④ <span class="variable">T</span><span class="operator">&#x27;</span> → <span class="operator">*</span><span class="variable">FT</span><span class="operator">&#x27;</span> <span class="operator">|</span>ε</span><br><span class="line">⑤ <span class="variable">F</span> → <span class="punctuation">(</span><span class="built_in">E</span><span class="punctuation">)</span> <span class="operator">|</span> <span class="variable">id</span></span><br><span class="line"></span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="built_in">E</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="punctuation">(</span> <span class="variable">id</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="built_in">E</span><span class="operator">&#x27;</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="operator">+</span> ε <span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="variable">T</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="punctuation">(</span> <span class="variable">id</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="variable">T</span><span class="operator">&#x27;</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="operator">*</span> ε <span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FIRST</span> <span class="punctuation">(</span> <span class="variable">F</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="punctuation">(</span> <span class="variable">id</span> <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">FOLLOW</span><span class="punctuation">(</span> <span class="built_in">E</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="variable">$</span> <span class="punctuation">)</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FOLLOW</span><span class="punctuation">(</span> <span class="built_in">E</span><span class="operator">&#x27;</span> <span class="punctuation">)</span><span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="variable">$</span> <span class="punctuation">)</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FOLLOW</span><span class="punctuation">(</span> <span class="variable">T</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="operator">+</span> <span class="variable">$</span> <span class="punctuation">)</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FOLLOW</span><span class="punctuation">(</span> <span class="variable">T</span><span class="operator">&#x27;</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="operator">+</span> <span class="variable">$</span> <span class="punctuation">)</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">FOLLOW</span><span class="punctuation">(</span> <span class="variable">F</span> <span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span> <span class="operator">*</span> <span class="operator">+</span> <span class="variable">$</span> <span class="punctuation">)</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h3><p>不断应用下列规则，直到没有新的终结符可以被加入到任何FOLLOW集合中为止 ：</p><p>S是开始符号，$是输入右端的结束标记</p><ol><li><p>将$放入FOLLOW( S )中</p></li><li><p>如果存在一个产生式A→αBβ，那么<strong>FIRST ( β )中除ε 之外</strong>的所有符号都在FOLLOW( B )中</p><p>紧跟在B后面<strong>除ε 之外的串首终结符</strong>，都在FOLLOW( B )中</p></li><li><p>如果存在一个产生式A→αB，或存在产生式A→αBβ且FIRST ( β ) 包含ε，那么 FOLLOW( A )中的所有符号都在FOLLOW( B )中 </p></li></ol><p>理解：</p><p><strong>α、β均是符号串</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要内容为计算First集和Follow集、递归和非递归预测分析法、预测分析中的错误处理等。&lt;/p&gt;</summary>
    
    
    
    <category term="编译原理" scheme="https://juoyo.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="First集" scheme="https://juoyo.github.io/tags/First%E9%9B%86/"/>
    
    <category term="Follow集" scheme="https://juoyo.github.io/tags/Follow%E9%9B%86/"/>
    
    <category term="预测分析法" scheme="https://juoyo.github.io/tags/%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch04 面向对象基础</title>
    <link href="https://juoyo.github.io/posts/f6179d5f.html"/>
    <id>https://juoyo.github.io/posts/f6179d5f.html</id>
    <published>2019-06-15T07:08:49.000Z</published>
    <updated>2019-07-27T02:38:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容为面向对象基础内容，包括方法、构造方法、重载、继承、多态等。</p><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>把<code>field</code>从<code>public</code>改成<code>private</code>，外部代码不能访问这些<code>field</code>，所以我们需要使用方法（<code>method</code>）来让外部代码可以间接修改<code>field</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Person ming &#x3D; new Person();</span><br><span class="line">        ming.setName(&quot;Xiao Ming&quot;); &#x2F;&#x2F; 设置name</span><br><span class="line">        ming.setAge(12); &#x2F;&#x2F; 设置age</span><br><span class="line">        System.out.println(ming.getName() + &quot;, &quot; + ming.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return this.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        if (age &lt; 0 || age &gt; 100) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;invalid age value&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然外部代码不能直接修改<code>private</code>字段，但是，外部代码可以调用方法<code>setName()</code>和<code>setAge()</code>来间接修改<code>private</code>字段。在方法内部，我们就可以检查参数。比如，<code>setAge()</code>就会检查传入的参数，参数超出了范围，直接报错。这样，外部代码就没有任何机会把<code>age</code>设置成不合理的值。</p><p><strong>一个类通过定义方法，就可以给外部代码暴露一些操作的接口，同时，内部自己保证逻辑一致性。</strong></p><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p>定义方法的语法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 方法返回类型 方法名(方法参数列表) &#123;</span><br><span class="line">    若干方法语句;</span><br><span class="line">    <span class="keyword">return</span> 方法返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>在方法内部，可以使用一个隐含的变量<code>this</code>，它始终<strong>指向当前实例</strong>。因此，通过<code>this.field</code>就可以访问当前实例的字段。</p><p>如果没有命名冲突，可以省略<code>this</code>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name; &#x2F;&#x2F; 相当于this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果有局部变量和字段重名，那么局部变量优先级更高，就必须加上<code>this</code>说明指向当前实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// 前面的this不可少，少了就变成局部变量name了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数用<code>类型...</code>定义，可变参数相当于数组类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Group &#123;</span><br><span class="line">    private String[] names;</span><br><span class="line"></span><br><span class="line">    public void setNames(String... names) &#123;</span><br><span class="line">        this.names &#x3D; names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setNames()</code>就定义了一个可变参数。调用时，可以这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Group g &#x3D; new Group();</span><br><span class="line">g.setNames(&quot;Xiao Ming&quot;, &quot;Xiao Hong&quot;, &quot;Xiao Jun&quot;); &#x2F;&#x2F; 传入3个String</span><br><span class="line">g.setNames(&quot;Xiao Ming&quot;, &quot;Xiao Hong&quot;); &#x2F;&#x2F; 传入2个String</span><br><span class="line">g.setNames(&quot;Xiao Ming&quot;); &#x2F;&#x2F; 传入1个String</span><br><span class="line">g.setNames(); &#x2F;&#x2F; 传入0个String</span><br></pre></td></tr></table></figure><h3 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h3><p>调用方把参数传递给实例方法时，调用时传递的值会按参数位置一一绑定。</p><h4 id="基本参数类型绑定"><a href="#基本参数类型绑定" class="headerlink" title="基本参数类型绑定"></a>基本参数类型绑定</h4><figure class="highlight plain"><figcaption><span>class Main &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Person p &#x3D; new Person();</span><br><span class="line">    int n &#x3D; 15; &#x2F;&#x2F; n的值为15</span><br><span class="line">    p.setAge(n); &#x2F;&#x2F; 传入n的值</span><br><span class="line">    System.out.println(p.getAge()); &#x2F;&#x2F; 15</span><br><span class="line">    n &#x3D; 20; &#x2F;&#x2F; n的值改为20</span><br><span class="line">    System.out.println(p.getAge()); &#x2F;&#x2F; 还是15</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return this.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：基本类型参数的传递，是调用方<strong>值</strong>（上面代码传递的为15）的复制。双方各自的后续修改，互不影响。</p><h4 id="引用参数类型绑定"><a href="#引用参数类型绑定" class="headerlink" title="引用参数类型绑定"></a>引用参数类型绑定</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        String[] fullname = <span class="keyword">new</span> String[] &#123; <span class="string">&quot;Homer&quot;</span>, <span class="string">&quot;Simpson&quot;</span> &#125;;</span><br><span class="line">        p.setName(fullname); <span class="comment">// 传入fullname数组</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Homer Simpson&quot;</span></span><br><span class="line">        fullname[<span class="number">0</span>] = <span class="string">&quot;Bart&quot;</span>; <span class="comment">// fullname数组的第一个元素修改为&quot;Bart&quot;</span></span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// 变为&quot;Bart Simpson&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + <span class="keyword">this</span>.name[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String[] name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：引用<strong>类型</strong>参数的传递，调用方的变量和接收方的参数变量，指向的是同一个对象。双方任意一方对这个对象的修改，都会影响对方。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>在创建对象实例时就把内部字段全部初始化为合适的，我们就需要构造方法。</p><p>创建实例的时候，实际上是通过构造方法来初始化实例的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">        System.out.println(p.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法的名称就是<strong>类名</strong>。构造方法的参数没有限制，在方法内部，也可以编写任意语句。但是，和普通方法相比，构造方法没有返回值（也没有<code>void</code>），调用构造方法，必须用<code>new</code>操作符。</p><h3 id="默认构造方法"><a href="#默认构造方法" class="headerlink" title="默认构造方法"></a>默认构造方法</h3><p>如果一个类没有定义构造方法，编译器会自动为我们生成一个默认构造方法，它没有参数，也没有执行语句，类似这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    public Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们自定义了一个构造方法，那么，编译器就<em>不再</em>自动创建默认构造方法。</p><p>如果既要能使用带参数的构造方法，又想保留不带参数的构造方法，那么只能把两个构造方法都定义出来。</p><p>没有在构造方法中初始化字段时，引用类型的字段默认是<code>null</code>，数值类型的字段用默认值，<code>int</code>类型默认值是<code>0</code>，布尔类型默认值是<code>false</code>。</p><p>在Java中，创建对象实例的时候，按照如下顺序进行初始化：</p><ol><li>先初始化字段，例如，<code>int age = 10;</code>表示字段初始化为<code>10</code>，<code>double salary;</code>表示字段默认初始化为<code>0</code>，<code>String name;</code>表示引用类型字段默认初始化为<code>null</code>；</li><li>执行构造方法的代码进行初始化。</li></ol><h3 id="多构造方法"><a href="#多构造方法" class="headerlink" title="多构造方法"></a>多构造方法</h3><p>可以定义多个构造方法，在通过<code>new</code>操作符调用的时候，编译器通过构造方法的参数数量、位置和类型自动区分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.age &#x3D; 12;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个构造方法可以调用其他构造方法，这样做的目的是便于代码复用。调用其他构造方法的语法是<code>this(…)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, <span class="number">18</span>); <span class="comment">// 调用另一个构造方法Person(String, int)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;Unnamed&quot;</span>); <span class="comment">// 调用另一个构造方法Person(String)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>实例在创建时通过<code>new</code>操作符会调用其对应的构造方法，构造方法用于初始化实例；</p></li><li><p>没有定义构造方法时，编译器会自动创建一个默认的无参数构造方法；</p></li><li><p>可以定义多个构造方法，编译器根据参数自动判断；</p></li><li><p>可以在一个构造方法内部调用另一个构造方法，便于代码复用。</p></li></ul><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>方法名相同，但各自的参数不同，称为方法重载（<code>Overload</code>）</p><p>注意：方法重载的返回值类型通常都是相同的。</p><p>方法重载的目的是，功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。</p><h3 id="重载方法indexOf"><a href="#重载方法indexOf" class="headerlink" title="重载方法indexOf()"></a>重载方法indexOf()</h3><p><code>String</code>类提供了多个重载方法<code>indexOf()</code>，可以查找子串：</p><ul><li><code>int indexOf(int ch)</code>：根据字符的Unicode码查找；</li><li><code>int indexOf(String str)</code>：根据字符串查找；</li><li><code>int indexOf(int ch, int fromIndex)</code>：根据字符查找，但指定起始位置；</li><li><code>int indexOf(String str, int fromIndex)</code>根据字符串查找，但指定起始位置。</li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li><p>方法重载是指多个方法的方法名相同，但各自的参数不同；</p></li><li><p>重载方法应该完成类似的功能，参考<code>String</code>的<code>indexOf()</code>；</p></li><li><p>重载方法返回值类型应该相同。</p></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Java使用<code>extends</code>关键字来实现继承：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不要重复name和age字段/方法,</span></span><br><span class="line">    <span class="comment">// 只需要定义新增score字段/方法:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; … &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123; … &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在OOP的术语中，我们把<code>Person</code>称为超类（super class），父类（parent class），基类（base class），把<code>Student</code>称为子类（subclass），扩展类（extended class）。</p><p>Java只允许一个class继承自一个类，因此，一个类有且仅有一个父类。只有<code>Object</code>特殊，它没有父类。</p><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p>为了让子类可以访问父类的字段，我们需要把<code>private</code>改为<code>protected</code>。用<code>protected</code>修饰的字段可以被子类访问。</p><p><code>protected</code>关键字可以把字段和方法的访问权限控制在继承树内部，一个<code>protected</code>字段和方法可以被其子类，以及子类的子类所访问。</p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p><code>super</code>关键字表示父类（超类）。子类引用父类的字段时，可以用<code>super.fieldName</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">12</span>, <span class="number">89</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译错误，原因是在<code>Student</code>的构造方法中，无法调用父类<code>Person</code>的构造方法。</p><p>在Java中，任何<code>class</code>的构造方法，<strong>第一行语句必须是调用父类的构造方法</strong>。如果没有显式调用父类的构造方法，编译器会帮我们自动加一句<code>super();</code></p><p><code>Student</code>类的构造方法实际上是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student extends Person &#123;</span><br><span class="line">    protected int score;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age, int score) &#123;</span><br><span class="line">        super(); &#x2F;&#x2F; 自动调用父类的构造方法</span><br><span class="line">        this.score &#x3D; score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，<code>Person</code>类并没有无参数的构造方法，因此，编译失败。</p><p>解决方法是调用<code>Person</code>类存在的某个构造方法。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student extends Person &#123;</span><br><span class="line">    protected int score;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age, int score) &#123;</span><br><span class="line">        super(name, age); &#x2F;&#x2F; 调用父类的构造方法Person(String, int)</span><br><span class="line">        this.score &#x3D; score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）。</p><p>继承树是<code>Student &gt; Person &gt; Object</code>，所以，可以把<code>Student</code>类型转型为<code>Person</code>，或者更高层次的<code>Object</code>。</p><p>向上转型实际上是把一个子类型安全地变为更加抽象的父类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">Person p = s; <span class="comment">// upcasting, ok</span></span><br><span class="line">Object o1 = p; <span class="comment">// upcasting, ok</span></span><br><span class="line">Object o2 = s; <span class="comment">// upcasting, ok</span></span><br></pre></td></tr></table></figure><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>把一个父类类型强制转型为子类类型，就是向下转型（downcasting）</p><p>不能把父类变为子类，因为子类功能比父类多，向下转型很可能会失败。失败的时候，Java虚拟机会报<code>ClassCastException</code>。</p><p>利用<code>instanceof</code>，在向下转型前可以先判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="keyword">if</span> (p <span class="keyword">instanceof</span> Student) &#123;</span><br><span class="line">    <span class="comment">// 只有判断成功才会向下转型:</span></span><br><span class="line">    Student s = (Student) p; <span class="comment">// 一定会成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区分继承和组合"><a href="#区分继承和组合" class="headerlink" title="区分继承和组合"></a>区分继承和组合</h3><p>继承是is关系，组合是has关系。</p><p><code>Student</code>是<code>Person</code>的一种，它们是is关系，而<code>Student</code>并不是<code>Book</code>，<code>Student</code>和<code>Book</code>的关系是has关系。</p><p>具有has关系不应该使用继承，而是使用组合，即<code>Student</code>可以持有一个<code>Book</code>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Book book;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul><li>继承是面向对象编程的一种强大的代码复用方式；</li><li>Java只允许单继承，所有类最终的根类是<code>Object</code>；</li><li><code>protected</code>允许子类访问父类的字段和方法；</li><li>子类的构造方法可以通过<code>super()</code>调用父类的构造方法；</li><li>可以安全地向上转型为更抽象的类型；</li><li>可以强制向下转型，最好借助<code>instanceof</code>判断；</li><li>子类和父类的关系是is，has关系不能用继承。</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h3><p>在继承关系中，子类如果定义了一个与父类方法签名完全相同的方法，被称为覆写（Override）。</p><p>在<code>Person</code>类中，我们定义了<code>run()</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;Person.run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在子类<code>Student</code>中，覆写这个<code>run()</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student extends Person &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;Student.run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java的实例方法调用是基于<strong>运行时的实际类型</strong>的动态调用，而非变量的声明类型。</p><h3 id="多态Polymorphic"><a href="#多态Polymorphic" class="headerlink" title="多态Polymorphic"></a>多态Polymorphic</h3><p>针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。对某个类型调用某个方法，执行的实际方法可能是某个子类的覆写方法。</p><p>多态具有一个非常强大的功能，就是允许添加更多类型的子类实现功能扩展，却不需要修改基于父类的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 给一个有普通收入、工资收入和享受国务院特殊津贴的小伙伴算税</span></span><br><span class="line">        Income[] incomes = <span class="keyword">new</span> Income[] &#123;</span><br><span class="line">            <span class="keyword">new</span> Income(<span class="number">3000</span>),</span><br><span class="line">            <span class="keyword">new</span> Salary(<span class="number">7500</span>),</span><br><span class="line">            <span class="keyword">new</span> StateCouncilSpecialAllowance(<span class="number">15000</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(totalTax(incomes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">            total = total + income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Income</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.income = income;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>; <span class="comment">// 税率10%</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salary</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCouncilSpecialAllowance</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StateCouncilSpecialAllowance</span><span class="params">(<span class="keyword">double</span> income)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(income);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="覆写Object方法"><a href="#覆写Object方法" class="headerlink" title="覆写Object方法"></a>覆写Object方法</h3><p><code>Object</code>定义了几个重要的方法：</p><ul><li><code>toString()</code>：把instance输出为<code>String</code>；</li><li><code>equals()</code>：判断两个instance是否逻辑相等；</li><li><code>hashCode()</code>：计算一个instance的哈希值。</li></ul><p>在必要的情况下，我们可以覆写<code>Object</code>的这几个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 显示更有意义的字符串:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person:name=&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较是否相等:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当且仅当o为Person类型:</span></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            Person p = (Person) o;</span><br><span class="line">            <span class="comment">// 并且name字段相同时，返回true:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算hash:</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用父类的被覆写的方法"><a href="#调用父类的被覆写的方法" class="headerlink" title="调用父类的被覆写的方法"></a>调用父类的被覆写的方法</h3><p>通过<code>super</code>来调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student extends Person &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类的hello()方法:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hello() + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>因为继承可以使得子类覆写父类的方法，则</p><ol><li><p>如果一个父类<strong>不允许子类对父类的某个方法进行覆写</strong>，可以把该方法标记为<code>final</code>，用<code>final</code>修饰的方法不能被<code>Override</code>：</p></li><li><p>如果一个<strong>类不希望被其他类继承</strong>，那么可以把这个类本身标记为<code>final</code>，用<code>final</code>修饰的类不能被继承</p></li><li><p>一个类的实例字段，用<code>final</code>修饰的字段在<strong>初始化后不能被修改</strong>。</p></li></ol><p>在构造方法中初始化final字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用，因为可以保证实例一旦创建，其<code>final</code>字段就不可修改。</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul><li>子类可以覆写父类的方法（Override），覆写在子类中改变了父类方法的行为；</li><li>Java的方法调用总是作用于<strong>运行期对象的实际类型</strong>，这种行为称为多态；</li><li><code>final</code>修饰符有多种作用：<ul><li><code>final</code>修饰的<strong>方法</strong>可以阻止被覆写；</li><li><code>final</code>修饰的<strong>class</strong>可以阻止被继承；</li><li><code>final</code>修饰的<strong>field</strong>必须在创建对象时初始化，随后不可修改。</li></ul></li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>如果父类的方法本身不需要实现任何功能，仅仅是为了定义方法签名，目的是让子类去覆写它，那么，可以把父类的方法声明为抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把一个方法声明为<code>abstract</code>，表示它是一个抽象方法，本身没有实现任何方法语句。因为这个抽象方法本身是无法执行的，所以，<code>Person</code><strong>类也无法被实例化</strong>。编译器会告诉我们，无法编译<code>Person</code>类，因为它包含抽象方法。</p><p>必须把<code>Person</code>类本身也声明为<code>abstract</code>，才能正确编译它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract class Person &#123;</span><br><span class="line">    public abstract void run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h3><p>如果一个<code>class</code>定义了方法，但没有具体执行代码，这个方法就是抽象方法，抽象方法用<code>abstract</code>修饰。</p><p>因为无法执行抽象方法，因此这个类也必须申明为抽象类（abstract class）。</p><p>因为抽象类本身被设计成只能用于被继承，因此，抽象类可以强迫子类实现其定义的抽象方法，否则编译会报错。</p><p>例如，<code>Person</code>类定义了抽象方法<code>run()</code>，那么，在实现子类<code>Student</code>的时候，就必须覆写<code>run()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Student();</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student.run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="面向抽象编程"><a href="#面向抽象编程" class="headerlink" title="面向抽象编程"></a>面向抽象编程</h3><p>引用高层类型，避免引用实际子类型的方式，称之为面向抽象编程。</p><p>面向抽象编程的本质就是：</p><ul><li>上层代码只定义规范（例如：<code>abstract class Person</code>）；</li><li>不需要子类就可以实现业务逻辑（正常编译）；</li><li>具体的业务逻辑由不同的子类实现，调用者并不关心。</li></ul><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><ul><li>通过<code>abstract</code>定义的方法是抽象方法，<strong>抽象方法只有定义，没有实现</strong>。抽象方法定义了子类必须实现的接口规范；</li><li>定义了抽象方法的class必须被定义为抽象类，从抽象类继承的子类必须实现抽象方法；</li><li>如果不实现抽象方法，则该子类仍是一个抽象类；</li><li>面向抽象编程使得调用者只关心抽象方法的定义，不关心子类的具体实现。</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>在抽象类中，抽象方法本质上是定义接口规范：即规定高层类的接口，从而保证所有子类都有相同的接口实现</p><p>如果一个抽象类没有字段，所有方法全部都是抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abstract class Person &#123;</span><br><span class="line">    public abstract void run();</span><br><span class="line">    public abstract String getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该把该抽象类改写为接口：<code>interface</code>。</p><p>使用<code>interface</code>可以声明一个接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">    void run();</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为接口定义的所有方法默认都是<code>public abstract</code>的，所以这两个修饰符不需要写出来。</p><p>当一个具体的<code>class</code>去实现一个<code>interface</code>时，需要使用<code>implements</code>关键字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Student implements Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(this.name + &quot; run&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，一个类只能继承自另一个类，不能从多个类继承。但是，一个类可以实现多个<code>interface</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Student implements Person, Hello &#123; &#x2F;&#x2F; 实现了两个interface</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类和接口的对比"><a href="#抽象类和接口的对比" class="headerlink" title="抽象类和接口的对比"></a>抽象类和接口的对比</h3><table><thead><tr><th></th><th><strong>abstract class</strong></th><th><strong>interface</strong></th></tr></thead><tbody><tr><td>继承</td><td>只能extends一个class</td><td>可以implements多个interface</td></tr><tr><td>字段</td><td>可以定义实例字段</td><td>不能定义实例字段</td></tr><tr><td>抽象方法</td><td>可以定义抽象方法</td><td>可以定义抽象方法</td></tr><tr><td>非抽象方法</td><td>可以定义非抽象方法</td><td>可以定义default方法</td></tr></tbody></table><h3 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h3><p>一个<code>interface</code>可以继承自另一个<code>interface</code>。<code>interface</code>继承自<code>interface</code>使用<code>extends</code>，它相当于扩展了接口的方法。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface Hello &#123;</span><br><span class="line">    void hello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person extends Hello &#123;</span><br><span class="line">    void run();</span><br><span class="line">    String getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，<code>Person</code>接口继承自<code>Hello</code>接口，因此，<code>Person</code>接口现在实际上有3个抽象方法签名，其中一个来自继承的<code>Hello</code>接口。</p><h3 id="default方法"><a href="#default方法" class="headerlink" title="default方法"></a>default方法</h3><p>在接口中，可以定义<code>default</code>方法。</p><p><code>default</code>方法的目的是，当我们需要给接口新增一个方法时，会涉及到修改全部子类。如果新增的是<code>default</code>方法，那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法。</p><h2 id="静态字段和方法"><a href="#静态字段和方法" class="headerlink" title="静态字段和方法"></a>静态字段和方法</h2><p>实例字段：<code>class</code>中定义的字段</p><p>静态字段<code>static field</code>：用<code>static</code>修饰的字段</p><p>实例字段在每个实例中都有自己的一个独立“空间”，但是静态字段只有一个共享“空间”，所有实例都会共享该字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Person ming = <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="number">12</span>);</span><br><span class="line">Person hong = <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Hong&quot;</span>, <span class="number">15</span>);</span><br><span class="line">ming.number = <span class="number">88</span>;</span><br><span class="line">System.out.println(hong.number);</span><br><span class="line">hong.number = <span class="number">99</span>;</span><br><span class="line">System.out.println(ming.number);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">88</span></span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><p>因为在Java程序中，实例对象并没有静态字段，不推荐用<font color="red"><code>实例变量.静态字段</code></font>去访问静态字段。</p><p><font color="red"><code>类名.静态字段</code></font>来访问静态对象。</p><p>上述访问静态字段的代码应该为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person.number = <span class="number">99</span>;</span><br><span class="line">System.out.println(Person.number);</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态方法：用<code>static</code>修饰的方法</p><p>调用实例方法必须通过一个实例变量，调用静态方法则不需要实例变量，通过类名就可以调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person.setNumber(<span class="number">99</span>);</span><br><span class="line">        System.out.println(Person.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为静态方法属于<code>class</code>而不属于实例，因此，静态方法内部，无法访问<code>this</code>变量，也无法访问实例字段，它只能访问静态字段。</p><p>Person.setNumber(99);    不需实例化，通过类名调用</p><h3 id="接口的静态字段"><a href="#接口的静态字段" class="headerlink" title="接口的静态字段"></a>接口的静态字段</h3><p><code>interface</code>是可以有静态字段的，并且静态字段必须为<code>final</code>类型。</p><p><code>interface</code>的字段只能是<code>public static final</code>类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MALE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> FEMALE = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 编译器会自动加上public statc final:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//public static final int MALE = 1;</span></span><br><span class="line">    <span class="comment">//public static final int FEMALE = 2;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>Java定义了一种名字空间，称之为包：<code>package</code>。一个类总是属于某个包，类名（比如<code>Person</code>）只是一个简写，真正的完整类名是<code>包名.类名</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pk; <span class="comment">// 申明包名pk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">包没有父子关系，java.util和java.util.zip是不同的包，两者没有任何继承关系。</font></p><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>Java内建的<code>package</code>机制是为了避免<code>class</code>命名冲突；</p><p>JDK的核心类使用<code>java.lang</code>包，编译器会自动导入；</p><p>JDK的其它常用类定义在<code>java.util.*</code>，<code>java.math.*</code>，<code>java.text.*</code>，……；</p><p>包名推荐使用倒置的域名，例如<code>org.apache</code>。</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>定义为<code>public</code>的<code>class</code>、<code>interface</code>可以被其他任何类访问</p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p><code>private</code>访问权限被限定在<code>class</code>的内部，而且与方法声明顺序<em>无关</em>。推荐把<code>private</code>方法放到后面，因为<code>public</code>方法定义了类对外提供的功能。</p><h3 id="protected-1"><a href="#protected-1" class="headerlink" title="protected"></a>protected</h3><p><code>protected</code>作用于继承关系。定义为<code>protected</code>的字段和方法可以被子类访问，以及子类的子类。</p><h3 id="final-1"><a href="#final-1" class="headerlink" title="final"></a>final</h3><p>Java还提供了一个<code>final</code><strong>修饰符</strong>。**<code>final</code>与访问权限不冲突**，它有很多作用。</p><p>用<code>final</code>修饰<code>class</code>可以阻止被继承，用<code>final</code>修饰<code>method</code>可以阻止被子类覆写，用<code>final</code>修饰<code>field</code>可以阻止被重新赋值，用<code>final</code>修饰局部变量可以阻止被重新赋值。</p><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><ol><li><p>一个<code>.java</code>文件只能包含一个<code>public</code>类，但可以包含多个非<code>public</code>类。如果有<code>public</code>类，文件名必须和<code>public</code>类的名字相同。</p></li><li><p><code>final</code>修饰符不是访问权限，它可以修饰<code>class</code>、<code>field</code>和<code>method</code>。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要内容为面向对象基础内容，包括方法、构造方法、重载、继承、多态等。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="方法" scheme="https://juoyo.github.io/tags/%E6%96%B9%E6%B3%95/"/>
    
    <category term="构造方法" scheme="https://juoyo.github.io/tags/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
    
    <category term="重载" scheme="https://juoyo.github.io/tags/%E9%87%8D%E8%BD%BD/"/>
    
    <category term="继承" scheme="https://juoyo.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
    <category term="多态" scheme="https://juoyo.github.io/tags/%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>编译原理ch3 语法分析</title>
    <link href="https://juoyo.github.io/posts/b87ecbaa.html"/>
    <id>https://juoyo.github.io/posts/b87ecbaa.html</id>
    <published>2019-06-12T09:45:12.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容是自顶向下分析概述、文法转换、LL（1）文法等。</p><a id="more"></a><h2 id="语法分析主要任务"><a href="#语法分析主要任务" class="headerlink" title="语法分析主要任务"></a>语法分析主要任务</h2><p>语法分析器(parser)从词法分析器输出的token序列中识别出各类短语，并构造语法分析树(parse tree)</p><h3 id="赋值语句分析树"><a href="#赋值语句分析树" class="headerlink" title="赋值语句分析树"></a>赋值语句分析树</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">position &#x3D; initial + rate * 60 ;</span><br><span class="line">&lt;id, position&gt; &lt;&#x3D;&gt; &lt;id,initial&gt; &lt;+&gt; &lt;id, rate&gt; &lt;*&gt; &lt;num,60&gt; &lt;;&gt;</span><br></pre></td></tr></table></figure><p><img src="/posts/b87ecbaa.htm/1.gif" alt="赋值"></p><h3 id="变量声明语句的分析树"><a href="#变量声明语句的分析树" class="headerlink" title="变量声明语句的分析树"></a>变量声明语句的分析树</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文法：</span><br><span class="line">&lt;D&gt; → &lt;T&gt; &lt;IDS&gt;;</span><br><span class="line">&lt;T&gt; → int | real | char | bool</span><br><span class="line">&lt;IDS&gt; → id | &lt;IDS&gt;, id</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">int a , b , c ;</span><br></pre></td></tr></table></figure><p><img src="/posts/b87ecbaa.htm/2.gif" alt="声明"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解释</span><br><span class="line">D -&gt; Declaration</span><br><span class="line">T -&gt; Type</span><br><span class="line">IDS -&gt; Identifier Sequence</span><br></pre></td></tr></table></figure><h2 id="自顶向下的分析"><a href="#自顶向下的分析" class="headerlink" title="自顶向下的分析"></a>自顶向下的分析</h2><p>从分析树的顶部（根节点）向底部（叶节点）方向构造分析树,可以看成是从文法开始符号S推导出词串w的过程。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>文法<br>① E → E + E<br>② E → E * E<br>③ E → ( E )<br>④ E → id<br>输入<br>id + ( id + id )</p><p>推导过程： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E -&gt; E + E</span><br><span class="line">-&gt; E + ( E )</span><br><span class="line">-&gt; E + ( E + E )</span><br><span class="line">-&gt; E + ( id + E )</span><br><span class="line">-&gt; id + ( id + E )</span><br><span class="line">-&gt; id + ( id + id )</span><br></pre></td></tr></table></figure><p><img src="/posts/b87ecbaa.htm/3.gif" alt="声明"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>每一步推导中，都需要做两个选择：</p><ol><li>替换当前句型中的哪个非终结符</li><li>用该非终结符的哪个候选式进行替换</li></ol><h3 id="最左推导"><a href="#最左推导" class="headerlink" title="最左推导"></a>最左推导</h3><p>在最左推导中，总是选择每个句型的最左非终结符进行替换<br><img src="/posts/b87ecbaa.htm/4.gif" alt="声明"></p><h3 id="最右推导"><a href="#最右推导" class="headerlink" title="最右推导"></a>最右推导</h3><p>在最右推导中，总是选择每个句型的最右非终结符进行替换<br><img src="/posts/b87ecbaa.htm/5.gif" alt="声明"><br>在自底向上的分析中，总是采用最左归约的方式，因此把最左归约称为规范归约，而最右推导相应地称为规范推导</p><h3 id="最左推导和最右推导的唯一性"><a href="#最左推导和最右推导的唯一性" class="headerlink" title="最左推导和最右推导的唯一性"></a>最左推导和最右推导的唯一性</h3><p><img src="/posts/b87ecbaa.htm/6.gif" alt="声明"></p><h3 id="自顶向下的语法分析采用最左推导方式"><a href="#自顶向下的语法分析采用最左推导方式" class="headerlink" title="自顶向下的语法分析采用最左推导方式"></a>自顶向下的语法分析采用最左推导方式</h3><p>分析器从左向右扫描，因此自顶向下的语法分析采用最左推导方式</p><ol><li>总是选择每个句型的最左非终结符进行替换</li><li>根据输入流中的下一个终结符，选择最左非终结符的一个候选式<br><img src="/posts/b87ecbaa.htm/7.gif" alt="声明"></li></ol><h3 id="自顶向下语法分析的通用形式"><a href="#自顶向下语法分析的通用形式" class="headerlink" title="自顶向下语法分析的通用形式"></a>自顶向下语法分析的通用形式</h3><h4 id="递归下降分析-Recursive-Descent-Parsing"><a href="#递归下降分析-Recursive-Descent-Parsing" class="headerlink" title="递归下降分析 (Recursive-Descent Parsing)"></a>递归下降分析 (Recursive-Descent Parsing)</h4><ol><li>由一组过程组成，每个过程对应一个非终结符 </li><li>从文法开始符号S对应的过程开始，其中递归调用文法中其它非终结符对应的过程。如果S对应过程体恰好扫描了整个输入串，则成功完成语法分析 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">    选择一个A产生式， A →X1 X2 … Xk ；</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span> to k ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( Xi是一个非终结符号)</span><br><span class="line">    调用过程 Xi ( ) ;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( Xi 等于当前的输入符号a)</span><br><span class="line">    读入下一个输入符号;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">/* 发生了一个错误 */</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>可能需要回溯(backtracking)，导致效率较低</em> </p><h4 id="预测分析-Predictive-Parsing"><a href="#预测分析-Predictive-Parsing" class="headerlink" title="预测分析 (Predictive Parsing)"></a>预测分析 (Predictive Parsing)</h4><ul><li><p>预测分析是递归下降分析技术的一个特例，通过在输入中向前看固定个数（通常是一个） 符号来选择正确的A-产生式。 </p></li><li><p>可以对某些文法构造出向前看k个输入符号的预测分析器，该类文法有时也称为LL(k) 文法类 </p></li><li><p>预测分析不需要回溯，是一种确定的自顶向下分析方法 </p></li></ul><h2 id="文法转换"><a href="#文法转换" class="headerlink" title="文法转换"></a>文法转换</h2><p>并非所有文法均适合自顶向下分析</p><h3 id="回溯问题"><a href="#回溯问题" class="headerlink" title="回溯问题"></a>回溯问题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文法G</span><br><span class="line">S → aAd | aBe</span><br><span class="line">A → c</span><br><span class="line">B → b</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">a b c </span><br></pre></td></tr></table></figure><p>同一非终结符(S)的多个候选式(aAd  aBe)存在<strong>共同前缀</strong>(a)，将导致<font color="red"><strong>回溯</strong></font>现象 </p><h3 id="无限循环问题"><a href="#无限循环问题" class="headerlink" title="无限循环问题"></a>无限循环问题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文法G</span><br><span class="line">E → E + T | E – T | T</span><br><span class="line">T → T * F | T / F | F</span><br><span class="line">F → ( E ) | id</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">id + id * id</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">推导过程如下，存在问题。</span><br><span class="line">E → E + T</span><br><span class="line">→ E + T + T + T</span><br><span class="line">→ E + T + T</span><br><span class="line">→ …</span><br></pre></td></tr></table></figure><ul><li><p>含有A→Aα形式产生式的文法称为是<strong>直接左递归</strong>的(immediate left recursive) </p></li><li><p>如果一个文法中有一个非终结符A使得对某个串α存在一个推导A→+Aα （A推出以A开头的串），那么这个文法就是<strong>左递归</strong>的</p></li><li><p>经过两步或两步以上推导产生的左递归称为是<strong>间接左递归</strong>的 </p></li></ul><p>左递归文法会使递归下降分析器陷入<font color="red"><strong>无限循环</strong> </font></p><h3 id="消除直接左递归"><a href="#消除直接左递归" class="headerlink" title="消除直接左递归"></a>消除直接左递归</h3><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">A → Aα | β(α≠ ε, β不以A开头)</span><br><span class="line"></span><br><span class="line">推导过程：</span><br><span class="line">A → Aα</span><br><span class="line">→ Aαα</span><br><span class="line">→ Aααα</span><br><span class="line">…</span><br><span class="line">→ Aα…α</span><br><span class="line">→ βα…α</span><br><span class="line"></span><br><span class="line">r&#x3D;βα*</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A → β A′</span><br><span class="line">A′ → α A′｜ε</span><br><span class="line"></span><br><span class="line">A′推导过程：</span><br><span class="line">A′ → αA′</span><br><span class="line">→ ααA′</span><br><span class="line">→ αααA′</span><br><span class="line">…</span><br><span class="line">→ α…αA′</span><br><span class="line">→ α…α</span><br></pre></td></tr></table></figure><p>事实上，这种消除过程就是把<strong>左递归</strong>转换成了<strong>右递归</strong> </p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">文法：</span><br><span class="line">E → E + T｜T</span><br><span class="line">转换：</span><br><span class="line">E→ T E′</span><br><span class="line">E′ → + T E′ |ε</span><br><span class="line"></span><br><span class="line">文法：</span><br><span class="line">T → T * F｜F</span><br><span class="line">转换：</span><br><span class="line">T→ F T ′</span><br><span class="line">T ′→* F T ′ ｜ε</span><br><span class="line"></span><br><span class="line">文法：</span><br><span class="line">F → ( E )｜id</span><br><span class="line">转换：</span><br><span class="line">F→ ( E )｜id</span><br></pre></td></tr></table></figure><!--无左递归，不需转换--><h4 id="消除直接左递归的一般形式"><a href="#消除直接左递归的一般形式" class="headerlink" title="消除直接左递归的一般形式"></a>消除直接左递归的一般形式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A → Aα1 | Aα2 | … | Aαn | β1 | β2 | … | βm</span><br><span class="line">(αi ≠ ε, βj不以A开头)</span><br><span class="line"></span><br><span class="line">转换后：</span><br><span class="line"></span><br><span class="line">A → β1 A′ | β2 A′ | … | βm A′</span><br><span class="line">A′ → α1 A′ | α2 A′ | … | αn A′ | ε</span><br></pre></td></tr></table></figure><p>消除左递归是要付出代价的——引进了一些<strong>非终结符</strong>（A′）和<strong>ε_产生式</strong> </p><h3 id="消除间接左递归"><a href="#消除间接左递归" class="headerlink" title="消除间接左递归"></a>消除间接左递归</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">S → A a | b</span><br><span class="line">A → A c | S d | ε</span><br><span class="line">存在间接左递归</span><br><span class="line">S → Aa</span><br><span class="line">→ Sda</span><br><span class="line"></span><br><span class="line">消除方法：</span><br><span class="line">将S的定义代入A-产生式，得：</span><br><span class="line">A → A c | A a d | b d | ε</span><br><span class="line"></span><br><span class="line">消除A-产生式的直接左递归，得：</span><br><span class="line">A → b d A’ | A’</span><br><span class="line">A’ → c A’ | a d A’ | ε</span><br></pre></td></tr></table></figure><h3 id="消除左递归算法"><a href="#消除左递归算法" class="headerlink" title="消除左递归算法"></a>消除左递归算法</h3><p>输入：不含循环推导（即形如A → + A的推导）和ε-产生式的文法G<br>输出：等价的无左递归文法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1)按照某个顺序将非终结符号排序为A1， A2， … ， An .</span><br><span class="line">2) for ( 从1到n的每个i ) &#123;</span><br><span class="line">3) for ( 从1到i -1的每个i ) &#123;</span><br><span class="line">4) 将每个形如Ai → Aj γ的产生式替换为产生式组 Ai → δ1γ ∣ δ2γ ∣ … ∣ δkγ ，</span><br><span class="line">其中Aj → δ1 ∣ δ2 ∣ … ∣ δk ，是所有的 Aj 产生式</span><br><span class="line">5) &#125;</span><br><span class="line">6) 消除 Ai 产生式之间的立即左递归</span><br><span class="line">7) &#125;</span><br></pre></td></tr></table></figure><h3 id="提取左公因子-Left-Factoring"><a href="#提取左公因子-Left-Factoring" class="headerlink" title="提取左公因子(Left Factoring )"></a>提取左公因子(Left Factoring )</h3><h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">文法G</span><br><span class="line">S → aAd | aBe</span><br><span class="line">A → c</span><br><span class="line">B → b</span><br><span class="line">替换为：</span><br><span class="line">文法G&#39;</span><br><span class="line">S → a S&#39;</span><br><span class="line">S&#39; → Ad | Be</span><br><span class="line">A → c</span><br><span class="line">B → b</span><br></pre></td></tr></table></figure><p><strong>通过改写产生式来推迟决定，等读入了足够多的输入，获得足够信息后再做出正确的选择</strong> </p><h4 id="提取左公因子算法"><a href="#提取左公因子算法" class="headerlink" title="提取左公因子算法"></a>提取左公因子算法</h4><p>输入：文法G<br>输出：等价的提取了左公因子的文法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对于每个非终结符A，找出它的两个或多个选项之间的最长公共前缀α。 如果α ≠ ε，即存在一个非平凡的( nontrivial )公共前缀，那么将所有A-产生式</span><br><span class="line">A → α β1 | α β2 | … | α βn | γ1 | γ2 | … | γm</span><br><span class="line">替换为</span><br><span class="line">A → α A&#39; | γ1 | γ2 | … | γm</span><br><span class="line">A&#39; → β1 | β2 | … | βn</span><br><span class="line">其中， γi 表示所有不以α开头的产生式体； A&#39;是一个新的非终结符。不断应用这个转换，直到每个非终结符的任意两个产生式体都没有公共前缀为止</span><br></pre></td></tr></table></figure><h2 id="LL（1）文法"><a href="#LL（1）文法" class="headerlink" title="LL（1）文法"></a>LL（1）文法</h2><h3 id="S文法"><a href="#S文法" class="headerlink" title="S文法"></a>S文法</h3><p>简单的确定性文法</p><ol><li>每个产生式的右部都以终结符开始 </li><li>同一非终结符的各个候选式的首终结符都不同 </li></ol><p><strong>S_文法不含ε产生式</strong> </p><p>预测分析法的工作过程 ：</p><p>从文法开始符号出发，在每一步推导过程中根据当前句型的最左非终结符A和当前输入符号a，选择正确的A-产生式。为保证分析的确定性，选出的候选式必须是唯一的。 </p><p>什么时候使用ε产生式？ </p><p>如果当前某<strong>非终结符A</strong>与当前<strong>输入符a</strong>不匹配时，若<strong>存在A→ε</strong>，可以通过检查a是否可以出现在 A的后面，来决定<strong>是否使用产生式 A→ε</strong>（若文法中无 A→ε ，则应报错） </p><h3 id="非终结符的后继符号集"><a href="#非终结符的后继符号集" class="headerlink" title="非终结符的后继符号集"></a>非终结符的后继符号集</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>可能在某个句型中紧跟在<strong>非终结符A</strong>后边的终结符a的集合，记为<strong>FOLLOW(A)</strong><br><strong>FOLLOW(A)={a| S  -》 * αAaβ,  a∈VT， α,β∈(VT∪VN)*}</strong> </p><h4 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">(</span><span class="number">1</span><span class="punctuation">)</span> <span class="variable">S</span> → <span class="variable">aBC</span></span><br><span class="line"><span class="punctuation">(</span><span class="number">2</span><span class="punctuation">)</span> <span class="variable">B</span> → <span class="variable">bC</span></span><br><span class="line"><span class="punctuation">(</span><span class="number">3</span><span class="punctuation">)</span> <span class="variable">B</span> → <span class="variable">dB</span></span><br><span class="line"><span class="punctuation">(</span><span class="number">4</span><span class="punctuation">)</span> <span class="variable">B</span> → ε</span><br><span class="line"><span class="punctuation">(</span><span class="number">5</span><span class="punctuation">)</span> <span class="built_in">C</span> → <span class="variable">c</span></span><br><span class="line"><span class="punctuation">(</span><span class="number">6</span><span class="punctuation">)</span> <span class="built_in">C</span> → <span class="variable">a</span></span><br><span class="line"></span><br><span class="line"><span class="variable">FOLLOW</span><span class="punctuation">(</span><span class="variable">B</span><span class="punctuation">)</span> <span class="operator">=</span> <span class="punctuation">&#123;</span><span class="variable">a</span><span class="operator">,</span><span class="variable">c</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如果 A是某个句型的的最右符号，则将结束符“$”添加到FOLLOW(A)中。</strong> </p><h3 id="串首终结符"><a href="#串首终结符" class="headerlink" title="串首终结符"></a>串首终结符</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>串首第一个符号，并且是终结符，简称<strong>首终结符</strong>。<br>给定一个文法符号串α， α的<font color="red">串首终结符集FIRST(α)</font>被定义为可以从α推导出的所有<strong>串首终结符</strong>构成的集合。 </p><p>如果α  -》 * ε，那么ε也在FIRST(α)中。 </p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对于任意α∈<span class="punctuation">(</span><span class="variable">VT</span>∪<span class="variable">VN</span><span class="punctuation">)</span><span class="operator">+,</span> <span class="variable">FIRST</span><span class="punctuation">(</span>α<span class="punctuation">)</span><span class="operator">=</span><span class="punctuation">&#123;</span> <span class="variable">a</span> <span class="operator">|</span> α <span class="operator">-</span>》 <span class="operator">*</span><span class="variable">a</span>β， <span class="variable">a</span>∈ <span class="variable">VT</span>， β∈<span class="punctuation">(</span><span class="variable">VT</span> ∪ <span class="variable">VN</span><span class="punctuation">)</span><span class="operator">*</span><span class="punctuation">&#125;</span>；</span><br><span class="line"></span><br><span class="line">如果 α <span class="operator">-</span>》 <span class="operator">*</span> ε， 那么ε ∈ <span class="variable">FIRST</span><span class="punctuation">(</span>α<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><h3 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h3><ul><li>第一个“ L”表示从左向右扫描输入</li><li>第二个“ L”表示产生最左推导</li><li> “ 1”表示在每一步中只需要向前看一个输入符号来决定语法分析动作 </li></ul><p>文法G是LL(1)的，当且仅当G的任意两个具有相同左部的产生式A → α | β 满足下面的条件： </p><ol><li><p>不存在终结符a使得α 和β都能够推导出以a开头的串 (理解：α 和β不能都推出以终结符a开头的串)</p></li><li><p>α 和β至多有一个能推导出 ε</p></li><li><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果 β <span class="operator">-</span>》 <span class="operator">*</span>ε，则 <span class="variable">FIRST</span> <span class="punctuation">(</span>α<span class="punctuation">)</span>∩<span class="variable">FOLLOW</span><span class="punctuation">(</span><span class="variable">A</span><span class="punctuation">)</span> <span class="operator">=</span>Φ；</span><br><span class="line">如果 α <span class="operator">-</span>》 <span class="operator">*</span>ε，则 <span class="variable">FIRST</span> <span class="punctuation">(</span>β<span class="punctuation">)</span>∩<span class="variable">FOLLOW</span><span class="punctuation">(</span><span class="variable">A</span><span class="punctuation">)</span> <span class="operator">=</span>Φ； </span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要内容是自顶向下分析概述、文法转换、LL（1）文法等。&lt;/p&gt;</summary>
    
    
    
    <category term="编译原理" scheme="https://juoyo.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="自顶向下" scheme="https://juoyo.github.io/tags/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/"/>
    
    <category term="LL（1）" scheme="https://juoyo.github.io/tags/LL%EF%BC%881%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch03 数组</title>
    <link href="https://juoyo.github.io/posts/72095ca9.html"/>
    <id>https://juoyo.github.io/posts/72095ca9.html</id>
    <published>2019-06-04T10:45:18.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容为数组遍历与排序。</p><a id="more"></a><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><h3 id="for循环遍历数组"><a href="#for循环遍历数组" class="headerlink" title="for循环遍历数组"></a>for循环遍历数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ns.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = ns[i];</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="for-each循环遍历数组"><a href="#for-each循环遍历数组" class="headerlink" title="for each循环遍历数组"></a>for each循环遍历数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : ns) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量n直接拿到ns数组的元素，而不是索引。</p><h3 id="打印数组内容"><a href="#打印数组内容" class="headerlink" title="打印数组内容"></a>打印数组内容</h3><p>直接打印数组变量，得到的是数组在JVM中的引用地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span> &#125;;</span><br><span class="line">System.out.println(ns); <span class="comment">// 类似 [I@7852e922</span></span><br></pre></td></tr></table></figure><p>使用for each循环来打印数组内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n : ns) &#123;</span><br><span class="line">    System.out.print(n + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java标准库提供了Arrays.toString()，可以快速打印数组内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span> &#125;;</span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>使用冒泡排序算法对一个整型数组从小到大进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] ns = &#123;<span class="number">28</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">36</span> &#125;;</span><br><span class="line"><span class="comment">//排序前：</span></span><br><span class="line">System.out.println(Arrays.toString(ns));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ns.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ns.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (ns[j] &gt; ns[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">temp = ns[j];</span><br><span class="line">ns[j] = ns[j+<span class="number">1</span>];</span><br><span class="line">ns[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序后：</span></span><br><span class="line">System.out.println(Arrays.toString(ns));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置排序"><a href="#内置排序" class="headerlink" title="内置排序"></a>内置排序</h3><p>Java的标准库已经内置了排序功能，我们只需要调用JDK提供的Arrays.sort()就可以排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">28</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">18</span>, <span class="number">96</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">36</span> &#125;;</span><br><span class="line">        Arrays.sort(ns);</span><br><span class="line">        System.out.println(Arrays.toString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>对数组排序实际上修改了数组本身<br><img src="/posts/72095ca9.htm/1.gif" alt="数组排序"></p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>二维数组就是数组的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ns = &#123;</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">            &#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;,</span><br><span class="line">            &#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr0 = ns[<span class="number">0</span>];</span><br><span class="line">        System.out.println(arr0.length); <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">            arr0 ─────┐</span><br><span class="line">                      ▼</span><br><span class="line">                    ┌───┬───┬───┬───┐</span><br><span class="line">         ┌───┐  ┌──&gt;│ 1 │ 2 │ 3 │ 4 │</span><br><span class="line">ns ─────&gt;│░░░│──┘   └───┴───┴───┴───┘</span><br><span class="line">         ├───┤      ┌───┬───┬───┬───┐</span><br><span class="line">         │░░░│─────&gt;│ 5 │ 6 │ 7 │ 8 │</span><br><span class="line">         ├───┤      └───┴───┴───┴───┘</span><br><span class="line">         │░░░│──┐   ┌───┬───┬───┬───┐</span><br><span class="line">         └───┘  └──&gt;│ 9 │10 │11 │12 │</span><br><span class="line">                    └───┴───┴───┴───┘</span><br></pre></td></tr></table></figure><p>二维数组的每个数组元素的长度并不要求相同，例如，可以这么定义<code>ns</code>数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] ns = &#123;</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">    &#123; <span class="number">5</span>, <span class="number">6</span> &#125;,</span><br><span class="line">    &#123; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><p>要打印一个二维数组，可以使用两层嵌套的for循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (int[] arr : ns) &#123;</span><br><span class="line">    for (int n : arr) &#123;</span><br><span class="line">        System.out.print(n);</span><br><span class="line">        System.out.print(&#39;, &#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用Java标准库的<code>Arrays.deepToString()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ns = &#123;</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;,</span><br><span class="line">            &#123; <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;,</span><br><span class="line">            &#123; <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(Arrays.deepToString(ns));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><ol><li>命令行参数类型是<code>String[]</code>数组；</li><li>命令行参数由JVM接收用户输入并传给<code>main</code>方法；</li></ol><p>可以利用接收到的命令行参数，根据不同的参数执行不同的代码。例如，实现一个<code>-version</code>参数，打印程序版本号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (String arg : args) &#123;</span><br><span class="line">            if (&quot;-version&quot;.equals(arg)) &#123;</span><br><span class="line">            &#x2F;&#x2F;将“--version”放前面是为了防止arg字符串为空时调用equals方法出错</span><br><span class="line">                System.out.println(&quot;v 1.0&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面程序必须在命令行执行，先编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ javac Main.java</span><br></pre></td></tr></table></figure><p>然后，执行的时候，给它传递一个参数<code>-version</code>，则输出v 1.0：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java Main -version</span><br><span class="line">v 1.0</span><br></pre></td></tr></table></figure><p>这样，程序就可以根据传入的命令行参数，作出不同的响应。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要内容为数组遍历与排序。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="遍历" scheme="https://juoyo.github.io/tags/%E9%81%8D%E5%8E%86/"/>
    
    <category term="排序" scheme="https://juoyo.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="多维数组" scheme="https://juoyo.github.io/tags/%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    
    <category term="命令行" scheme="https://juoyo.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>编译原理ch2 词法分析2</title>
    <link href="https://juoyo.github.io/posts/1309de0f.html"/>
    <id>https://juoyo.github.io/posts/1309de0f.html</id>
    <published>2019-06-04T06:40:05.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容为FA分类，DFA、NFA、正则表达式之间的相互转换。</p><a id="more"></a><h2 id="有穷自动机（finite-automata）"><a href="#有穷自动机（finite-automata）" class="headerlink" title="有穷自动机（finite automata）"></a>有穷自动机（finite automata）</h2><h3 id="FA的表示"><a href="#FA的表示" class="headerlink" title="FA的表示"></a>FA的表示</h3><ol><li>结点：FA的状态</li><li>1 初始状态（开始状态）：只有一个，由start箭头指向</li><li>2 终止状态（接收状态）：可以有多个，用双圈表示</li><li>带标记的有向边：如果对于输入a，存在一个从状态p到状态q的转换，就在p、 q之间画一条有向边，并标记上a</li></ol><h3 id="FA定义（接收）的语言"><a href="#FA定义（接收）的语言" class="headerlink" title="FA定义（接收）的语言"></a>FA定义（接收）的语言</h3><ol><li>给定输入串x， 如果存在一个对应于串x的从初始状态到某个终止状态的转换序列，则称串x被该FA接收</li><li>由一个有穷自动机M接收的所有串构成的集合称为是该FA定义（或接收）的语言，记为L(M )<br><img src="/posts/1309de0f.htm/4.jpg" alt="接收语言"></li></ol><p>最长子串匹配原则</p><h3 id="FA的分类"><a href="#FA的分类" class="headerlink" title="FA的分类"></a>FA的分类</h3><p>本质上是与状态转化图类似的图,有穷（有限）自动机判别输入串的类型；NFA（Nondeterministic Finite Automata）和DFA（Deterministic Finite Automata）。<br>NFA对其边上的标号没有任何限制，一个符号标记离开同一状态的多条边，并且空串也可以作为标号。DFA对于每个状态和自动机输入字母表中的每个符号，有且只有一条离开该状态，以该符号为标号的边。</p><h4 id="确定的有穷自动机DFA"><a href="#确定的有穷自动机DFA" class="headerlink" title="确定的有穷自动机DFA"></a>确定的有穷自动机DFA</h4><p>DFA是NFA的一个特例，其中：</p><ol><li>没有输入 $\varepsilon$ 上的转换动作</li><li>对每个状态 s 和每个输入符号 a ，有且只有一条标号为 a 的边离开 s 。<br>接受（a|b）*abb的DFA<br><img src="/posts/1309de0f.htm/3.jpg" alt="DFA"></li></ol><h4 id="不确定的有穷自动机NFA"><a href="#不确定的有穷自动机NFA" class="headerlink" title="不确定的有穷自动机NFA"></a>不确定的有穷自动机NFA</h4><p>正则式(a|b)*abb表达的语言NFA:<br><img src="/posts/1309de0f.htm/1.jpg" alt="NFA"></p><p>NFA由以下几个部分组成：</p><ol><li>有穷的状态集合S。</li><li>输入集合符号 $\sum$ ，也即输入字母表，假设代表空串的 $\varepsilon$ 不是 $\sum$ 中的元素。</li><li>转换函数（transition function），为每个状态和 $\sum$ $\bigcup$ {$\varepsilon$} 中的每个符号都给出了相应的后继状态（next state）的集合。</li><li>S 中的一个状态 s_{0} 被指定为开始状态，或者是初始状态。</li><li>S 中的一个子集 F 被指定为接受状态（或者说终止状态）的集合。</li></ol><p>不管是NFA还是DFA，都可以表示为一张转换图（transition graph）。<br>上图可以使用下面的转换表表示：<br><img src="/posts/1309de0f.htm/2.jpg" alt="转换表"></p><h4 id="等价性"><a href="#等价性" class="headerlink" title="等价性"></a>等价性</h4><h4 id="DFA-NFA的等价性"><a href="#DFA-NFA的等价性" class="headerlink" title="DFA NFA的等价性"></a>DFA NFA的等价性</h4><p><img src="/posts/1309de0f.htm/5.jpg" alt="等价性"></p><h4 id="带有和不带有“ε-边”的NFA-的等价性"><a href="#带有和不带有“ε-边”的NFA-的等价性" class="headerlink" title="带有和不带有“ε-边”的NFA 的等价性"></a>带有和不带有“ε-边”的NFA 的等价性</h4><p><img src="/posts/1309de0f.htm/6.jpg" alt="等价性"></p><h3 id="正则表达式和NFA（DFA）的转换"><a href="#正则表达式和NFA（DFA）的转换" class="headerlink" title="正则表达式和NFA（DFA）的转换"></a>正则表达式和NFA（DFA）的转换</h3><h4 id="从RE到FA"><a href="#从RE到FA" class="headerlink" title="从RE到FA"></a>从RE到FA</h4><p><img src="/posts/1309de0f.htm/7.jpg" alt="等价性"></p><h4 id="根据RE构造NFA"><a href="#根据RE构造NFA" class="headerlink" title="根据RE构造NFA"></a>根据RE构造NFA</h4><p><img src="/posts/1309de0f.htm/8.jpg" alt="等价性"></p><p><img src="/posts/1309de0f.htm/9.jpg" alt="等价性"></p><h4 id="举例：RE到NFA转换"><a href="#举例：RE到NFA转换" class="headerlink" title="举例：RE到NFA转换"></a>举例：RE到NFA转换</h4><p><img src="/posts/1309de0f.htm/10.jpg" alt="等价性"></p><h3 id="NFA和DFA的转换"><a href="#NFA和DFA的转换" class="headerlink" title="NFA和DFA的转换"></a>NFA和DFA的转换</h3><h4 id="子集构造法"><a href="#子集构造法" class="headerlink" title="子集构造法"></a>子集构造法</h4><p>➢ 输入： NFA N<br>➢ 输出：接收同样语言的DFA D<br>➢ 方法： 一开始， ε-closure（s0 ）是Dstates 中的唯一状态，且它未加标记；<br>while（在Dstates中有一个未标记状态T ）｛<br>    给T加上标记；<br>    for（每个输入符号a）｛<br>        U = ε-closure(move(T, a));<br>        if ( U不在Dstates中)<br>            将U加入到Dstates中，且不加标记；<br>        Dtran[T, a]=U ;<br>    }<br>}<br><img src="/posts/1309de0f.htm/11.gif" alt="子集构造法"></p><h4 id="计算-ε-closure-T"><a href="#计算-ε-closure-T" class="headerlink" title="计算 ε-closure (T )"></a>计算 ε-closure (T )</h4><p>将T的所有状态压入stack中；<br>将ε-closure（T ）初始化为 T ；<br>while（stack非空）｛<br>    将栈顶元素 t 给弹出栈中；<br>    for（每个满足如下条件的u ：从t出发有一个标号为ε的转换到达状态u)<br>        if ( u不在ε-closure（T ）中）｛<br>            将u加入到ε-closure（T ）中；<br>            将u压入栈中;<br>        }<br>}</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要内容为FA分类，DFA、NFA、正则表达式之间的相互转换。&lt;/p&gt;</summary>
    
    
    
    <category term="编译原理" scheme="https://juoyo.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="NFA" scheme="https://juoyo.github.io/tags/NFA/"/>
    
    <category term="DFA" scheme="https://juoyo.github.io/tags/DFA/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch02 流程控制</title>
    <link href="https://juoyo.github.io/posts/a097301c.html"/>
    <id>https://juoyo.github.io/posts/a097301c.html</id>
    <published>2019-06-01T15:11:33.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>流程控制包括if条件判断、switch选择、while循环、do-while循环、for循环等。</p><a id="more"></a><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>使用System.out.println()来向屏幕输出一些内容。<br>println是print line的缩写，表示输出并换行。因此不想换行，可以用print()</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>格式化输出使用System.out.printf()，通过使用占位符%?，printf()可以把后面的参数格式化成指定格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">3.1415926</span>;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%.2f\n&quot;</span>, d); <span class="comment">// 显示两位小数3.14</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%.4f\n&quot;</span>, d); <span class="comment">// 显示4位小数3.1416</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java的格式化功能提供了多种占位符，可以把各种数据类型“格式化”成指定的字符串：</p><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>格式化输出整数</td></tr><tr><td>%x</td><td>格式化输出十六进制整数</td></tr><tr><td>%f</td><td>格式化输出浮点数</td></tr><tr><td>%e</td><td>格式化输出科学计数法表示的浮点数</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>注意，由于%表示占位符，因此，连续两个%%表示一个%字符本身。</td><td></td></tr></tbody></table><p>详细的格式化参数请参考JDK文档<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Formatter.html#syntax">java.util.Formatter</a></p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ol><li>首先，我们通过import语句导入java.util.Scanner，import是导入某个类的语句，必须放到Java源代码的开头，后面我们在Java的package中会详细讲解如何使用import。</li><li>然后，创建Scanner对象并传入System.in。System.out代表标准输出流，而System.in代表标准输入流。直接使用System.in读取用户输入虽然是可以的，但需要更复杂的代码，而通过Scanner就可以简化后续的代码。</li><li>有了Scanner对象后，要读取用户输入的字符串，使用scanner.nextLine()，要读取用户输入的整数，使用scanner.nextInt()。Scanner会自动转换数据类型，因此不必手动转换。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// 创建Scanner对象</span></span><br><span class="line">        System.out.print(<span class="string">&quot;Input your name: &quot;</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        String name = scanner.nextLine(); <span class="comment">// 读取一行输入并获取字符串</span></span><br><span class="line">        System.out.print(<span class="string">&quot;Input your age: &quot;</span>); <span class="comment">// 打印提示</span></span><br><span class="line">        <span class="keyword">int</span> age = scanner.nextInt(); <span class="comment">// 读取一行输入并获取整数</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;Hi, %s, you are %d\n&quot;</span>, name, age); <span class="comment">// 格式化输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="if-–-else-if-–-else"><a href="#if-–-else-if-–-else" class="headerlink" title="if – else if – else"></a>if – else if – else</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">70</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;及格了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;挂科了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮点数判等"><a href="#浮点数判等" class="headerlink" title="浮点数判等"></a>浮点数判等</h3><p>浮点数在计算机中常常无法精确表示，并且计算可能出现误差，因此，判断浮点数相等用==判断不靠谱,正确的方法是利用差值小于某个临界值来判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = <span class="number">1</span> - <span class="number">9.0</span> / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(x - <span class="number">0.1</span>) &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x is 0.1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x is NOT 0.1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用类型判等"><a href="#引用类型判等" class="headerlink" title="引用类型判等"></a>引用类型判等</h3><p>在Java中，判断值类型的变量是否相等，可以使用==运算符。但是，判断引用类型的变量是否相等，==表示“引用是否相等”，或者说，是否指向同一个对象。<br>例如，下面的两个String类型，它们的内容是相同的，但是，分别指向不同的对象，用==判断，结果为false：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;HELLO&quot;</span>.toLowerCase();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        <span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s1 == s2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s1 != s2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断引用类型的变量内容是否相等，必须使用equals()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;HELLO&quot;</span>.toLowerCase();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        <span class="keyword">if</span> (s1.equals(s2)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s1 equals s2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s1 not equals s2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行语句s1.equals(s2)时，如果变量s1为null，会报NullPointerException</p><h3 id="避免NullPointerException错误"><a href="#避免NullPointerException错误" class="headerlink" title="避免NullPointerException错误"></a>避免NullPointerException错误</h3><ol><li>利用&amp;&amp;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1 != <span class="keyword">null</span> &amp;&amp; s1.equals(<span class="string">&quot;hello&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>把一定不是null的对象”hello”放到前面：例如：if (“hello”.equals(s)) { … }。</li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>不推荐省略花括号{}；</p><p>多个if … else串联要特别注意判断顺序；</p><p>要注意if的边界条件；</p><p>要注意浮点数判断相等不能直接用==运算符；</p><p>引用类型判断内容相等要使用equals()，注意避免NullPointerException。</p><h2 id="switch多重选择"><a href="#switch多重选择" class="headerlink" title="switch多重选择"></a>switch多重选择</h2><h3 id="switch语法"><a href="#switch语法" class="headerlink" title="switch语法"></a>switch语法</h3><p>switch语句根据switch (表达式)计算的结果，跳转到匹配的case结果，然后继续执行后续语句，直到遇到break结束执行。<br>对于多个==判断的情况，使用switch结构更加清晰。<br>使用switch时，注意case语句并没有花括号{}，而且，case语句具有“穿透性”，漏写break将导致意想不到的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (option) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译检查"><a href="#编译检查" class="headerlink" title="编译检查"></a>编译检查</h3><p>使用IDE时，可以自动检查是否漏写了break语句和default语句，方法是打开IDE的编译检查。</p><p>在Eclipse中，选择Preferences - Java - Compiler - Errors/Warnings - Potential programming problems，将以下检查标记为Warning：<br>‘switch’ is missing ‘default’ case<br>‘switch’ case fall-through</p><p>在Idea中，选择Preferences - Editor - Inspections - Java - Control flow issues，将以下检查标记为Warning：<br>Fallthrough in ‘switch’ statement<br>‘switch’ statement without ‘default’ branch<br>当switch语句存在问题时，即可在IDE中获得警告提示。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>switch语句可以做多重选择，然后执行匹配的case语句后续代码；</p><p>switch的计算结果必须是整型、字符串或枚举类型；</p><p>注意千万不要漏写break，建议打开fall-through警告；</p><p>总是写上default，建议打开missing default警告；</p><p>从Java 12开始，switch语句升级为表达式，不再需要break，并且代码更简洁。</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继续执行后续代码</span></span><br></pre></td></tr></table></figure><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    执行循环语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure><p>do-while循环会至少循环一次。</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始条件; 循环检测条件; 循环后更新计数器) &#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-each循环"><a href="#for-each循环" class="headerlink" title="for each循环"></a>for each循环</h3><p>和for循环相比，for each循环的变量n不再是计数器，而是直接对应到数组的每个元素。for each循环的写法也更简洁。但是，for each循环无法指定遍历顺序，也无法获取数组的索引。</p><p>除了数组外，for each循环能够遍历所有“可迭代”的数据类型，包括List、Map等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ns = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : ns) &#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>for循环通过计数器可以实现复杂循环，</p><p>for each循环可以直接遍历数组的每个元素。</p><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break语句总是跳出自己所在的那一层循环</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>break会跳出当前循环，而continue提前结束本次循环，continue后的语句均不执行，直接继续执行下次循环。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;流程控制包括if条件判断、switch选择、while循环、do-while循环、for循环等。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="判断" scheme="https://juoyo.github.io/tags/%E5%88%A4%E6%96%AD/"/>
    
    <category term="循环" scheme="https://juoyo.github.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java语言ch01 基础</title>
    <link href="https://juoyo.github.io/posts/24f5ef7d.html"/>
    <id>https://juoyo.github.io/posts/24f5ef7d.html</id>
    <published>2019-06-01T10:54:10.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍Java程序基础，包括变量、数据类型、运算等。</p><a id="more"></a><h2 id="Java程序基本结构"><a href="#Java程序基本结构" class="headerlink" title="Java程序基本结构"></a>Java程序基本结构</h2><p>一个完整的Java程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以用来自动创建文档的注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向屏幕输出文本:</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">        <span class="comment">/* 多行注释开始</span></span><br><span class="line"><span class="comment">        注释内容</span></span><br><span class="line"><span class="comment">        注释结束 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// class定义结束</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>类名要求：</p><ol><li>类名必须以英文字母开头，后接字母，数字和下划线的组合</li><li>习惯以大写字母开头</li></ol><p>注意到public是访问修饰符，表示该class是公开的。<br>不写public，也能正确编译，但是这个类将无法从命令行执行。<br>在class内部，可以定义若干方法（method）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="comment">// 方法名是main</span></span><br><span class="line">        <span class="comment">// 方法代码...</span></span><br><span class="line">    &#125; <span class="comment">// 方法定义结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法名也有命名规则，命名和class一样，但是首字母小写</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>Java有3种注释:</p><ol><li><p>单行注释<br>// 这是注释…<br>而多行注释以/<em>星号开头，以</em>/结束，可以有多行：</p></li><li><p>多行注释<br>/*<br>这是注释<br>这也是注释</p></li></ol><p>*/</p><ol start="3"><li>文档注释<br>还有一种特殊的多行注释:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以用来自动创建文档的注释</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> liaoxuefeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这种特殊的多行注释需要写在类和方法的定义处，可以用于自动创建文档。</li></ol><h2 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>基本数据类型是CPU可以直接进行运算的类型。Java定义了以下几种基本数据类型：</p><ol><li><p>整数类型：byte，short，int，long</p></li><li><p>浮点数类型：float，double</p></li><li><p>字符类型：char</p></li><li><p>布尔类型：boolean</p></li></ol><p>Java基本数据类型占用的字节数：</p><pre><code>   ┌───┐</code></pre><p>  byte │   │<br>       └───┘<br>       ┌───┬───┐<br> short │   │   │<br>       └───┴───┘<br>       ┌───┬───┬───┬───┐<br>   int │   │   │   │   │<br>       └───┴───┴───┴───┘<br>       ┌───┬───┬───┬───┬───┬───┬───┬───┐<br>  long │   │   │   │   │   │   │   │   │<br>       └───┴───┴───┴───┴───┴───┴───┴───┘<br>       ┌───┬───┬───┬───┐<br> float │   │   │   │   │<br>       └───┴───┴───┴───┘<br>       ┌───┬───┬───┬───┬───┬───┬───┬───┐<br>double │   │   │   │   │   │   │   │   │<br>       └───┴───┴───┴───┴───┴───┴───┴───┘<br>       ┌───┬───┐<br>  char │   │   │<br>       └───┴───┘<br>byte恰好就是一个字节，而long和double需要8个字节。</p><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><p>对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（0表示正数，1表示负数）。各种整型能表示的最大范围如下：</p><p>byte：-128 ~ 127<br>short: -32768 ~ 32767<br>int: -2147483648 ~ 2147483647<br>long: -9223372036854775808 ~ 9223372036854775807</p><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line"><span class="keyword">float</span> f2 = <span class="number">3.14e38f</span>; <span class="comment">// 科学计数法表示的3.14x10^38</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.79e308</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = -<span class="number">1.79e308</span>;</span><br><span class="line"><span class="keyword">double</span> d3 = <span class="number">4.9e-324</span>; <span class="comment">// 科学计数法表示的4.9x10^-324</span></span><br></pre></td></tr></table></figure><p>对于float类型，需要加上f后缀。</p><p>浮点数可表示的范围非常大，float类型可最大表示3.4x10^38，而double类型可最大表示1.79x10^308。</p><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>布尔类型boolean只有true和false两个值</p><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><p>字符类型char表示一个字符。<br>注意char类型使用单引号’，且仅有一个字符，要和双引号”的字符串类型区分开。</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>定义变量的时候，如果加上final修饰符，这个变量就变成了常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; <span class="comment">// PI是一个常量</span></span><br><span class="line"><span class="keyword">double</span> r = <span class="number">5.0</span>;</span><br><span class="line"><span class="keyword">double</span> area = PI * r * r;</span><br><span class="line">PI = <span class="number">300</span>; <span class="comment">// compile error!</span></span><br></pre></td></tr></table></figure><p>常量在定义时进行初始化后就不可再次赋值，再次赋值会导致编译错误。<br>常量名通常全部大写。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Java提供了两种变量类型：基本类型和引用类型</p><p>基本类型包括整型，浮点型，布尔型，字符型。</p><h2 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h2><p>在Java中，字符和字符串是两个不同的类型。</p><h3 id="字符类型-1"><a href="#字符类型-1" class="headerlink" title="字符类型"></a>字符类型</h3><p>字符类型char是基本数据类型，它是character的缩写。一个char保存一个Unicode字符：<br>因为Java在内存中总是使用Unicode表示字符，所以，一个英文字符和一个中文字符都用一个char类型表示，它们都占用两个字节。要显示一个字符的Unicode编码，只需将char类型直接赋值给int类型即可</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>和char类型不同，字符串类型String是引用类型，我们用双引号”…”表示字符串。一个字符串可以存储0个到任意个字符。<br>如果字符串本身恰好包含一个”字符，需要借助转义字符\：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;abc\&quot;xyz&quot;</span>; <span class="comment">// 包含7个字符: a, b, c, &quot;, x, y, z</span></span><br></pre></td></tr></table></figure><p>常见的转义字符包括：</p><p>&quot; 表示字符”<br>&#39; 表示字符’<br>\ 表示字符<br>\n 表示换行符<br>\r 表示回车符<br>\t 表示Tab<br>\u#### 表示一个Unicode编码的字符</p><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><p>可以使用+连接任意字符串和其他数据类型，用+连接字符串和其他数据类型，会将其他数据类型先自动转型为字符串，再连接。<br>Java的字符串除了是一个引用类型外，还有个重要特点，就是字符串不可变，字符串的不可变是指字符串内容不可变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        System.out.println(s); <span class="comment">// 显示 hello</span></span><br><span class="line">        s = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        System.out.println(s); <span class="comment">// 显示 world</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空值null"><a href="#空值null" class="headerlink" title="空值null"></a>空值null</h3><p>引用类型的变量可以指向一个空值null，它表示不存在，即该变量不指向任何对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">null</span>; <span class="comment">// s1是null</span></span><br><span class="line">String s2; <span class="comment">// 没有赋初值值，s2也是null</span></span><br><span class="line">String s3 = s1; <span class="comment">// s3也是null</span></span><br><span class="line">String s4 = <span class="string">&quot;&quot;</span>; <span class="comment">// s4指向空字符串，不是null</span></span><br></pre></td></tr></table></figure><p>空字符串是一个有效的字符串对象，它不等于null。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍Java程序基础，包括变量、数据类型、运算等。&lt;/p&gt;</summary>
    
    
    
    <category term="Java简明" scheme="https://juoyo.github.io/categories/Java%E7%AE%80%E6%98%8E/"/>
    
    
    <category term="数据类型" scheme="https://juoyo.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式ch1 The Agile Unified Process</title>
    <link href="https://juoyo.github.io/posts/e7d6bfea.html"/>
    <id>https://juoyo.github.io/posts/e7d6bfea.html</id>
    <published>2019-06-01T08:03:05.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Agile-Unified-Process"><a href="#The-Agile-Unified-Process" class="headerlink" title="The Agile Unified Process"></a>The Agile Unified Process</h2><p>Before the iterations, there is a “plan and elaborate” phase</p><a id="more"></a><ol><li>motivation, business needs, alternatives</li><li>requirements elicitation and specification</li><li>feasibility study</li><li>use cases and use case diagrams</li><li>requirements and use cases traceability matrix</li><li>draft conceptual model</li><li>schedule, resources, budget</li></ol><h2 id="Steps-of-the-Unified-Process"><a href="#Steps-of-the-Unified-Process" class="headerlink" title="Steps of the Unified Process"></a>Steps of the Unified Process</h2><ol><li>Identifying requirements</li><li>Deriving use cases to satisfy the requirements</li><li>Allocating use cases to increments</li><li>Carrying out each increment  </li></ol><p>4.1) Use case modeling<br>4.2) Domain modeling<br>4.3) Interaction modeling<br>4.4) Derive design class diagram<br>4.5) Implementation and deployment</p><h2 id="What-Is-a-Use-Case"><a href="#What-Is-a-Use-Case" class="headerlink" title="What Is a Use Case"></a>What Is a Use Case</h2><ol><li>A use case is a business process.</li><li>A use case is initiated by (or begins with) an actor. </li><li>A use case must accomplish a business task (for the actor).</li><li>A use case must end with the actor — the actor explicitly or implicitly acknowledges the accomplishment of the business task.</li></ol><h2 id="What-Is-an-Actor"><a href="#What-Is-an-Actor" class="headerlink" title="What Is an Actor"></a>What Is an Actor</h2><ol><li>An actor denotes a business role played by (and on behalf of) a set of business entities or stakeholders.</li><li>Actors are not part of the system.</li><li>Actors interact with the system.</li><li>Actors are often human beings but can also be a piece of hardware, a system, or another component of the system.</li><li>Actors initiate use cases, which accomplish business tasks for the respective actors.</li></ol><h2 id="Use-Case-Specification-3-Levels-of-Abstraction"><a href="#Use-Case-Specification-3-Levels-of-Abstraction" class="headerlink" title="Use Case Specification: 3 Levels of Abstraction"></a>Use Case Specification: 3 Levels of Abstraction</h2><p>We specify use cases at three levels of abstraction:</p><ol><li>Abstract use case: using a verb and a noun phrase</li><li>High level use case: stating exactly when and where the use case begins and when it ends  using TUCBW/TUCEW (This use case begins with/This use case ends with)</li><li>Expanded use case: describing step by step how the actor and the system interact to accomplish the business task using a two column table</li></ol><h2 id="Steps-for-Use-Case-Modeling"><a href="#Steps-for-Use-Case-Modeling" class="headerlink" title="Steps for Use Case Modeling"></a>Steps for Use Case Modeling</h2><ol><li>Deriving (abstract) use cases from requirements</li><li>Describing when and where each use case begins and when it ends (high level use cases).</li><li>Depicting use case contexts according to subsystems/aspects using Use Case Diagrams.</li><li>Relating use cases, and actors if desired.</li><li>Specifying step by step how actor and system interact to accomplish the business task (for the actor) (expanded use cases).</li></ol><p>Steps 1)-4) are performed during the planning phase. Step 5 is performed during each increment.</p><h2 id="Deriving-Use-Cases-from-Requirements"><a href="#Deriving-Use-Cases-from-Requirements" class="headerlink" title="Deriving Use Cases from Requirements"></a>Deriving Use Cases from Requirements</h2><p>In the requirements specification, look for verb noun phrases or verb-nouns that indicate </p><ol><li>“do something” </li><li>“something must be done” or</li><li>“perform some task”  </li></ol><p>in the application domain.<br>Verify the verb noun phrases using use case definition (next slide)</p><h2 id="Verify-the-Use-Cases-Identified"><a href="#Verify-the-Use-Cases-Identified" class="headerlink" title="Verify the Use Cases Identified"></a>Verify the Use Cases Identified</h2><p>Verify the use cases identified using use case definition:  </p><ol><li>Is it a business process? y/n</li><li>Is it initiated by an actor? y/n</li><li>Does it end with the actor? y/n</li><li>Does it accomplish something useful for the actor? y/n</li></ol><p>All of the answers to the above questions must be “y”.</p><h2 id="Identify-Actor-System-amp-Subsystem"><a href="#Identify-Actor-System-amp-Subsystem" class="headerlink" title="Identify Actor, System, &amp; Subsystem"></a>Identify Actor, System, &amp; Subsystem</h2><p>From the requirements, identify also  </p><ol><li>the actors, who initiate the tasks, or for whom the tasks are performed</li><li>the system or subsystem that the use case belongs to </li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;The-Agile-Unified-Process&quot;&gt;&lt;a href=&quot;#The-Agile-Unified-Process&quot; class=&quot;headerlink&quot; title=&quot;The Agile Unified Process&quot;&gt;&lt;/a&gt;The Agile Unified Process&lt;/h2&gt;&lt;p&gt;Before the iterations, there is a “plan and elaborate” phase&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://juoyo.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Agile Unified Process" scheme="https://juoyo.github.io/tags/Agile-Unified-Process/"/>
    
  </entry>
  
  <entry>
    <title>编译原理ch1 词法分析</title>
    <link href="https://juoyo.github.io/posts/164d0cd7.html"/>
    <id>https://juoyo.github.io/posts/164d0cd7.html</id>
    <published>2019-06-01T06:29:01.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>词法分析主要是读入远程的输入字符，组成词素，生成词法单元序列，每个词法单元对应一个词素。</p><a id="more"></a><h2 id="词法分析的主要任务"><a href="#词法分析的主要任务" class="headerlink" title="词法分析的主要任务"></a>词法分析的主要任务</h2><p>词法分析的主要任务是从左向右逐行扫描源程序的字符，识别出各个单词，确定单词的类型。<br>将识别出的单词转换成统一的机内表示——词法单元(token)形式<br><img src="/posts/164d0cd7.htm/token.gif" alt="token"><br><img src="/posts/164d0cd7.htm/token%E7%A4%BA%E4%BE%8B.jpg" alt="token"></p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>词法单元：由词法单元名和可选的属性组成；譬如关键字可以是一个词法单元；或者是代表标识符、数字常量、字符常量等。</p><p>模式：一个词法单元的词素所具有的所有可能的形式。</p><p>词素：源程序的一个具体的字符序列，能够匹配某个模式，并被词法分析器识别。</p><h2 id="正规式"><a href="#正规式" class="headerlink" title="正规式"></a>正规式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>正规式又称正则表达式, 是一种特殊的字符串用来描述一类的字符串的集合。我们把可用正规式描述(其结构)的语言称为正规语言或正规集。</p><p>字母表：符号的有限集合， 例： $\sum$ = { 0, 1 }<br>串：符号的有穷序列，例：0110,  \varepsilon<br>语言：字母表上的一个串集 { \varepsilon , 0, 00, 000, …}, { \varepsilon },  \phi<br>句子：属于语言的串</p><p>在词法分析中，最重要的语言上运算是并、连接和闭包运算。下面是运算的正规定义：<br><img src="/posts/164d0cd7.htm/1.png" alt="正则"></p><h3 id="正规式举例"><a href="#正规式举例" class="headerlink" title="正规式举例"></a>正规式举例</h3><p>如果字母集 $\sum$ = {a, b}</p><p>–则a | b表示的语言是 {a, b}</p><p>–(a | b) (a | b ) 表示的语言是{aa, ab, ba, bb}</p><p>–aa | ab | ba | bb表示的语言是 {aa, ab, ba, bb}</p><p>–a* 由字母a构成的所有串集</p><p>–(a | b)* 由a和b构成的所有串集</p><h3 id="C语言中无符号整数的RE"><a href="#C语言中无符号整数的RE" class="headerlink" title="C语言中无符号整数的RE"></a>C语言中无符号整数的RE</h3><ol><li>十进制<br>(1|…|9)(0|…|9)*|0</li><li>八进制<br>0(1|…|7)(0|…|7)*</li><li>十六进制<br>0x(1|…|9|a|…|f|A|…|F)(0|…|9|a|…|f|A|…|F)*<h3 id="RE的代数定律"><a href="#RE的代数定律" class="headerlink" title="RE的代数定律"></a>RE的代数定律</h3><table><thead><tr><th>定律</th><th>描述</th></tr></thead><tbody><tr><td>r*=(r</td><td>$\varepsilon$)</td></tr><tr><td>r*<em>=r</em></td><td>*具有幂等性</td></tr><tr><td>正则文法与正则表达式等价</td><td></td></tr></tbody></table></li></ol><h2 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>在定义好正则表达式之后，怎么基于正则表达式构造代码来检查输入字符串，并返回和模式匹配的词素呢？作为构造词法分析器的中间步骤，首先将模式转换为具有特定风格的流图，称为“状态转换图”。</p><p>状态转换图（transitiondiagram）包括称为状态（state）的节点，图中还包括有向边，每条边上面有一个或多个标号，代表从一个状态转到另一个状态的条件。转换图的每一个状态代表了词法分析器扫描输入串的过程中可能遇到的情况。</p><h3 id="重要约定"><a href="#重要约定" class="headerlink" title="重要约定"></a>重要约定</h3><p>状态转换图重要约定如下：</p><ol><li>某些状态被称为接收状态或者最终状态，这些状态表明已经找到了一个词素，可以有多个接收状态。</li><li>如果相应的词素并不包括在最后一步使我们到达接受状态的符号，那么可以在该接受状态附近加一个*。</li><li>有一个状态被指定为开始状态，也成为初始状态，该状态由一条没有出发节点的，标号为start的边指明。在读入任何输入符号之前，状态转换图总是处于开始状态。</li></ol><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>转换图可能存在的问题是，会将保留的关键字作为标识符识别出来。<br>问题可以通过两种方式解决。</p><ol><li>初始化时将各个保留字填入符号表。符号表中的相关字段会指出该串不是普通的标识符，并指出它们代表的词法单元，当使用installID函数向符号表中插入条目时，根据匹配的词素以及符号表中的信息，就可以判断出来是一般的标识符还是关键字。</li><li>为每个关键字建立单独的状态转换图。<br><img src="/posts/164d0cd7.htm/2.jpg" alt="状态转换图"><br>如果使用这种方式，需要制定词法单元之间的优先级，使得then作为关键字而不是标识符返回。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;词法分析主要是读入远程的输入字符，组成词素，生成词法单元序列，每个词法单元对应一个词素。&lt;/p&gt;</summary>
    
    
    
    <category term="编译原理" scheme="https://juoyo.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="正则" scheme="https://juoyo.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
    <category term="状态转换图" scheme="https://juoyo.github.io/tags/%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式ch0 Intro</title>
    <link href="https://juoyo.github.io/posts/d38c496d.html"/>
    <id>https://juoyo.github.io/posts/d38c496d.html</id>
    <published>2019-05-29T11:48:30.000Z</published>
    <updated>2019-07-21T03:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-GoF-Patterns"><a href="#The-GoF-Patterns" class="headerlink" title="The GoF Patterns"></a>The GoF Patterns</h1><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><a id="more"></a>每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。  <p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）的书，该书首次提到了软件开发中设计模式的概念。</p><p>四位作者合称 GOF（四人帮，全拼 Gang of Four），所提出的设计模式主要是基于以下的面向对象设计原则：  </p><ol><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ol><h2 id="Creational-Patterns"><a href="#Creational-Patterns" class="headerlink" title="Creational Patterns"></a>Creational Patterns</h2><p>创建型模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用new运算符直接实例化对象，使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。   </p><ol><li>工厂模式Factory method </li><li>抽象工厂模式Abstract factory</li><li>建造者模式Builder</li><li>原型模式Prototype</li><li>单例模式Singleton</li></ol><h2 id="Structural-Patterns"><a href="#Structural-Patterns" class="headerlink" title="Structural Patterns"></a>Structural Patterns</h2><p>结构型模式关注类和对象的组合，继承的概念被用来组合接口和定义组合对象获得新功能的方式。  </p><ol><li>适配器模式Adapter</li><li>桥接模式Bridge</li><li>组合模式Composite</li><li>装饰器模式Decorator</li><li>外观模式Facade</li><li>享元模式Flyweight</li><li>代理模式Proxy</li></ol><h2 id="Behavioral-Patterns"><a href="#Behavioral-Patterns" class="headerlink" title="Behavioral Patterns"></a>Behavioral Patterns</h2><p>行为型模式关注对象之间的通信。   </p><ol><li>责任链模式Chain of responsibility</li><li>命令模式Command</li><li>解释器模式Interpreter</li><li>迭代器模式Iterator</li><li>中介者模式Mediator</li><li>备忘录模式Memento</li><li>观察者模式Observer</li><li>状态模式State</li><li>策略模式Strategy</li><li>模板模式Template method</li><li>访问者模式Visitor</li></ol><h2 id="Summary-of-Patterns"><a href="#Summary-of-Patterns" class="headerlink" title="Summary of Patterns"></a>Summary of Patterns</h2><table><thead><tr><th>Patterns</th><th>Summary</th></tr></thead><tbody><tr><td>Abstract factory</td><td>You want to create objects of a selected family of classes but you don’t want the client to be affected by the choice.</td></tr><tr><td>Adapter</td><td>You want to convert one interface to another.</td></tr><tr><td>Bridge</td><td>You want to switch between different implementations at run time without affecting the client.</td></tr><tr><td>Builder</td><td>You want to change the processes and process steps at run time to produce various categories of products.</td></tr><tr><td>Chain of responsibility</td><td>You want to pass a request along a reconfigurable chain of handlers until one that handles it.</td></tr><tr><td>Command</td><td>You want to encapsulate requests as (command) objects so that you can: (1) delegate the requests to the command objects, (2) queue the requests and execute them at a different time, (3) generate a plan of actions dynamically, and/or (4) stack the requests to support undo and redo.</td></tr><tr><td>Composite</td><td>You want to represent components with recursive part-whole relationships and allow the client to interact with components and composites uniformly.</td></tr><tr><td>Decorator</td><td>You want to dynamically add/remove functionality to/from objects.</td></tr><tr><td>Facade</td><td>You want to simplify the interface for a client that interacts with a web of components.</td></tr><tr><td>Factory method</td><td>You want to create or use objects of different classes but you want to delay the decision to the subclasses so that the decision can be changed at run time.</td></tr><tr><td>Flyweight</td><td>You want to save time and space incurred in the creation, initialization, and storage of many occurrences of an object.</td></tr><tr><td>Interpreter</td><td>You want dynamic modification of a portion of your program but you don’t want to recompile the system.</td></tr><tr><td>Iterator</td><td>You want a traversal mechanism that hides the structure traversed.</td></tr><tr><td>Mediator</td><td>You want to simplify the complex interaction among several components.</td></tr><tr><td>Memento</td><td>You want to store and restore the state of an object but you don’t want to expose the internals of the state to a third party.</td></tr><tr><td>Observer</td><td>You want to decouple change and related responses so that you can add or remove such dependencies freely and dynamically.</td></tr><tr><td>Prototype</td><td>You want to: (1) reduce object creation and initialization costs, (2) reduce number of classes, or (3) use dynamically loaded classes.</td></tr><tr><td>Proxy</td><td>You want to: (1) hide the use of a remote object, (2)  defer creation of an object until it is actually used, (3) control access to an object, or (4) keep track of references or update to an object.</td></tr><tr><td>Singleton</td><td>You want to create at most one or a limited number of globally accessible instances of a class.</td></tr><tr><td>State</td><td>You want a low complexity and easy to extend solution to implement a state machine.</td></tr><tr><td>Strategy</td><td>You want to let the client select an algorithm from available algorithms to accomplish a given task.</td></tr><tr><td>Template</td><td>method    You want the steps of a computation to vary but you don’t want to do so with conditional statements.</td></tr><tr><td>Visitor</td><td>You want to decouple type-dependent operations from a class structure to achieve high-cohesion and designing “stupid objects.”</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;The-GoF-Patterns&quot;&gt;&lt;a href=&quot;#The-GoF-Patterns&quot; class=&quot;headerlink&quot; title=&quot;The GoF Patterns&quot;&gt;&lt;/a&gt;The GoF Patterns&lt;/h1&gt;&lt;p&gt;设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://juoyo.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="创建型" scheme="https://juoyo.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B/"/>
    
    <category term="结构型" scheme="https://juoyo.github.io/tags/%E7%BB%93%E6%9E%84%E5%9E%8B/"/>
    
    <category term="行为型" scheme="https://juoyo.github.io/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B/"/>
    
  </entry>
  
</feed>
